{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/array-iterate/index.js","node_modules/bail/index.js","node_modules/extend/index.js","node_modules/inherits/inherits_browser.js","node_modules/is-buffer/index.js","node_modules/is-plain-obj/index.js","node_modules/nlcst-to-string/index.js","node_modules/parse-english/index.js","node_modules/parse-latin/index.js","node_modules/parse-latin/lib/expressions.js","node_modules/parse-latin/lib/index.js","node_modules/parse-latin/lib/parser.js","node_modules/parse-latin/lib/plugin/break-implicit-sentences.js","node_modules/parse-latin/lib/plugin/make-final-white-space-siblings.js","node_modules/parse-latin/lib/plugin/make-initial-white-space-siblings.js","node_modules/parse-latin/lib/plugin/merge-affix-exceptions.js","node_modules/parse-latin/lib/plugin/merge-affix-symbol.js","node_modules/parse-latin/lib/plugin/merge-final-word-symbol.js","node_modules/parse-latin/lib/plugin/merge-initial-digit-sentences.js","node_modules/parse-latin/lib/plugin/merge-initial-lower-case-letter-sentences.js","node_modules/parse-latin/lib/plugin/merge-initial-word-symbol.js","node_modules/parse-latin/lib/plugin/merge-initialisms.js","node_modules/parse-latin/lib/plugin/merge-inner-word-slash.js","node_modules/parse-latin/lib/plugin/merge-inner-word-symbol.js","node_modules/parse-latin/lib/plugin/merge-non-word-sentences.js","node_modules/parse-latin/lib/plugin/merge-prefix-exceptions.js","node_modules/parse-latin/lib/plugin/merge-remaining-full-stops.js","node_modules/parse-latin/lib/plugin/merge-words.js","node_modules/parse-latin/lib/plugin/patch-position.js","node_modules/parse-latin/lib/plugin/remove-empty-nodes.js","node_modules/parse-latin/lib/tokenizer.js","node_modules/path-browserify/index.js","node_modules/process/browser.js","node_modules/retext-english/index.js","node_modules/retext-stringify/index.js","node_modules/to-vfile/lib/core.js","node_modules/trough/index.js","node_modules/unherit/index.js","node_modules/unified/index.js","node_modules/unist-util-modify-children/index.js","node_modules/unist-util-stringify-position/index.js","node_modules/unist-util-visit-children/index.js","node_modules/vfile-message/index.js","node_modules/vfile/core.js","node_modules/vfile/index.js","node_modules/vfile/node_modules/replace-ext/index.js","node_modules/x-is-function/index.js","node_modules/x-is-string/index.js","node_modules/xtend/immutable.js","src/retext.js"],"names":["f","exports","module","define","amd","window","global","self","this","retext","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","values","callback","context","result","index","own","hasOwnProperty","err","hasOwn","Object","prototype","toStr","toString","isArray","arr","Array","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","constructor","key","extend","options","name","src","copy","copyIsArray","clone","target","arguments","deep","create","ctor","superCtor","super_","value","enumerable","writable","configurable","TempCtor","isBuffer","readFloatLE","slice","isSlowBuffer","_isBuffer","x","getPrototypeOf","nlcstToString","node","separator","children","sep","type","join","ParseEnglish","doc","file","Parser","apply","ParserPrototype","lower","toLowerCase","visitChildren","modifyChildren","proto","tokenizeSentencePlugins","child","sentence","siblings","sibling","other","splice","push","position","end","APOSTROPHE","test","ELISION_PREFIX","ELISION_AFFIX","concat","start","tokenizeParagraphPlugins","paragraph","next","period","word","ABBREVIATION","ABBREVIATION_SENSITIVE","pop","RegExp","affixSymbol","newLine","newLineMulti","terminalMarker","wordSymbolInner","numerical","digitStart","lowerInitial","surrogates","punctuation","whiteSpace","ParseLatin","String","createTextFactory","eat","parent","undefined","noopEat","pluggable","Constructor","run","useFactory","plugins","wareKey","tokenize","parser","tick","left","right","character","prev","SURROGATES","queue","eater","add","tokens","now","line","column","offset","subvalue","pos","before","subvalueLength","lastIndex","charAt","update","WHITE_SPACE","PUNCTUATION","WORD","noopAdd","createParser","expressions","tokenizeSymbol","tokenizeWhiteSpace","tokenizePunctuation","tokenizeSource","tokenizeText","nodes","use","useFirst","parse","tokenizeRoot","tokenizer","delimiter","delimiterType","tokenizerProperty","tail","head","insertion","MULTI_NEW_LINE","shift","previousChild","first","second","AFFIX_SYMBOL","DIGIT","LOWER_INITIAL","unshift","otherChild","isAllDigits","NUMERICAL","prevValue","nextValue","count","C_SLASH","last","INNER_WORD_SYMBOL","ABBREVIATION_PREFIX","grandchild","nextNext","hasFoundDelimiter","TERMINAL_MARKER","patch","childType","expression","normalizeArray","parts","allowAboveRoot","up","filter","xs","res","splitPathRe","splitPath","filename","exec","resolve","resolvedPath","resolvedAbsolute","path","process","cwd","TypeError","split","p","normalize","isAbsolute","trailingSlash","substr","paths","relative","from","to","trim","fromParts","toParts","Math","min","samePartsLength","outputParts","dirname","root","dir","basename","ext","extname","str","len","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","setTimeout","cleanUpNextTick","draining","currentQueue","queueIndex","drainQueue","timeout","marker","cachedClearTimeout","clearTimeout","runClearTimeout","Item","array","noop","nextTick","args","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","chdir","umask","unherit","English","compiler","tree","Compiler","buffer","vfile","fns","middleware","fn","input","done","invoked","then","params","wrap","xtend","inherits","Super","From","parameters","Of","unified","processor","destination","attachers","data","namespace","freeze","plugin","transformer","frozen","freezeIndex","func","transformers","Infinity","cb","executor","reject","assertNode","Promise","pipeline","assertParser","assertCompiler","trough","string","assertUnfrozen","addPreset","addList","settings","addPlugin","entry","find","plain","newable","stringify","compile","runSync","complete","bail","assertDone","processSync","keys","asyncName","ctx","contents","iterate","iteratorFactory","wrapperFactory","location","loc","VMessagePrototype","VMessage","reason","origin","range","indexOf","parseOrigin","stack","message","source","ruleId","fatal","VFile","prop","messages","history","order","assertPart","part","assertNonEmpty","assertPath","replace","encoding","defineProperty","get","set","stem","filePath","info","fail","warn","npath","nFileName","english"],"mappings":"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","file":"retext.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nmodule.exports = iterate;\n\nvar own = {}.hasOwnProperty;\n\nfunction iterate(values, callback, context) {\n  var index = -1;\n  var result;\n\n  if (!values) {\n    throw new Error('Iterate requires that |this| not be ' + values);\n  }\n\n  if (!own.call(values, 'length')) {\n    throw new Error('Iterate requires that |this| has a `length`');\n  }\n\n  if (typeof callback !== 'function') {\n    throw new Error('`callback` must be a function');\n  }\n\n  /* The length might change, so we do not cache it. */\n  while (++index < values.length) {\n    /* Skip missing values. */\n    if (!(index in values)) {\n      continue;\n    }\n\n    result = callback.call(context, values[index], index, values);\n\n    /* If `callback` returns a `number`, move `index` over to\n     * `number`. */\n    if (typeof result === 'number') {\n      /* Make sure that negative numbers do not break the loop. */\n      if (result < 0) {\n        index = 0;\n      }\n\n      index = result - 1;\n    }\n  }\n}\n","'use strict';\n\nmodule.exports = bail;\n\nfunction bail(err) {\n  if (err) {\n    throw err;\n  }\n}\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","'use strict';\nvar toString = Object.prototype.toString;\n\nmodule.exports = function (x) {\n\tvar prototype;\n\treturn toString.call(x) === '[object Object]' && (prototype = Object.getPrototypeOf(x), prototype === null || prototype === Object.getPrototypeOf({}));\n};\n","'use strict';\n\nmodule.exports = nlcstToString;\n\n/* Stringify a NLCST node or list of nodes. */\nfunction nlcstToString(node, separator) {\n  var sep = separator || '';\n  var values;\n  var length;\n  var children;\n\n  if (!node || (!('length' in node) && !node.type)) {\n    throw new Error('Expected node, not `' + node + '`');\n  }\n\n  if (typeof node.value === 'string') {\n    return node.value;\n  }\n\n  children = 'length' in node ? node : node.children;\n  length = children.length;\n\n  /* Shortcut: This is pretty common, and a small performance win. */\n  if (length === 1 && 'value' in children[0]) {\n    return children[0].value;\n  }\n\n  values = [];\n\n  while (length--) {\n    values[length] = nlcstToString(children[length], sep);\n  }\n\n  return values.join(sep);\n}\n","'use strict';\n\nvar Parser = require('parse-latin');\nvar toString = require('nlcst-to-string');\nvar visitChildren = require('unist-util-visit-children');\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = ParseEnglish;\n\n/* Inherit from `ParseLatin`. */\nParserPrototype.prototype = Parser.prototype;\n\nvar proto = new ParserPrototype();\n\nParseEnglish.prototype = proto;\n\n/* Add modifiers to `parser`. */\nproto.tokenizeSentencePlugins = [\n  visitChildren(mergeEnglishElisionExceptions)\n].concat(proto.tokenizeSentencePlugins);\n\nproto.tokenizeParagraphPlugins = [\n  modifyChildren(mergeEnglishPrefixExceptions)\n].concat(proto.tokenizeParagraphPlugins);\n\n/* Transform English natural language into an NLCST-tree. */\nfunction ParseEnglish(doc, file) {\n  if (!(this instanceof ParseEnglish)) {\n    return new ParseEnglish(doc, file);\n  }\n\n  Parser.apply(this, arguments);\n}\n\n/* Constructor to create a `ParseEnglish` prototype. */\nfunction ParserPrototype() {}\n\n/* Match a blacklisted (case-insensitive) abbreviation\n * which when followed by a full-stop does not depict\n * a sentence terminal marker. */\nvar ABBREVIATION = new RegExp(\n  '^(' +\n    /* Business Abbreviations:\n     * Incorporation, Limited company. */\n    'inc|ltd|' +\n\n    /* English unit abbreviations:\n     * - Note that *Metric abbreviations* do not use\n     *   full stops.\n     * - Note that some common plurals are included,\n     *   although units should not be pluralised.\n     *\n     * barrel, cubic, dozen, fluid (ounce), foot, gallon, grain, gross,\n     * inch, karat / knot, pound, mile, ounce, pint, quart, square,\n     * tablespoon, teaspoon, yard. */\n    'bbls?|cu|doz|fl|ft|gal|gr|gro|in|kt|lbs?|mi|oz|pt|qt|sq|tbsp|' +\n    'tsp|yds?|' +\n\n    /* Abbreviations of time references:\n     * seconds, minutes, hours, Monday, Tuesday, *, Wednesday,\n     * Thursday, *, Friday, Saturday, Sunday, January, Februari, March,\n     * April, June, July, August, September, *, October, November,\n     * December. */\n\n    'sec|min|hr|mon|tue|tues|wed|thu|thurs|fri|sat|sun|jan|feb|mar|' +\n    'apr|jun|jul|aug|sep|sept|oct|nov|dec' +\n  ')$'\n  /*\n   * NOTE! There's no `i` flag here because the value to\n   * test against should be all lowercase!\n   */\n);\n\n/* Match a blacklisted (case-sensitive) abbreviation\n * which when followed by a full-stop does not depict\n * a sentence terminal marker. */\nvar ABBREVIATION_SENSITIVE = new RegExp(\n  '^(' +\n    /* Social:\n     * Mister, Mistress, Mistress, woman, Mademoiselle, Madame, Monsieur,\n     * Misters, Mesdames, Junior, Senior, *. */\n    'Mr|Mrs|Miss|Ms|Mss|Mses|Mlle|Mme|M|Messrs|Mmes|Jr|Sr|Snr|' +\n\n    /* Rank and academic:\n     * Doctor, Magister, Attorney, Profesor, Honourable, Reverend,\n     * Father, Monsignor, Sister, Brother, Saint, President,\n     * Superintendent, Representative, Senator. */\n    'Dr|Mgr|Atty|Prof|Hon|Rev|Fr|Msgr|Sr|Br|St|Pres|Supt|Rep|Sen|' +\n\n    /* Rank and military:\n     * Governor, Ambassador, Treasurer, Secretary, Admiral, Brigadier,\n     * General, Commander, Colonel, Captain, Lieutenant, Major,\n     * Sergeant, Petty Officer, Warrant Officer, Purple Heart. */\n    'Gov|Amb|Treas|Sec|Amd|Brig|Gen|Cdr|Col|Capt|Lt|Maj|Sgt|Po|Wo|Ph|' +\n\n    /* Common geographical abbreviations:\n     *\n     * Avenue, Boulevard, Mountain, Road, Building, National, *, Route, *,\n     * County, Park, Square, Drive, Port or Point, Street or State, Fort,\n     * Peninsula, Territory, Highway, Freeway, Parkway. */\n    'Ave|Blvd|Mt|Rd|Bldgs?|Nat|Natl|Rt|Rte|Co|Pk|Sq|Dr|Pt|St|' +\n    'Ft|Pen|Terr|Hwy|Fwy|Pkwy|' +\n\n    /* American state abbreviations:\n     * Alabama, Arizona, Arkansas, California, *, Colorado, *,\n     * Connecticut, Delaware, Florida, Georgia, Idaho, *, Illinois,\n     * Indiana, Iowa, Kansas, *, Kentucky, *, Louisiana, Maine, Maryland,\n     * Massachusetts, Michigan, Minnesota, Mississippi, Missouri, Montana,\n     * Nebraska, *, Nevada, Mexico, Dakota, Oklahoma, *, Oregon,\n     * Pennsylvania, *, *, Tennessee, Texas, Utah, Vermont, Virginia,\n     * Washington, Wisconsin, *, Wyoming. */\n    'Ala|Ariz|Ark|Cal|Calif|Col|Colo|Conn|Del|Fla|Ga|Ida|Id|Ill|Ind|' +\n    'Ia|Kan|Kans|Ken|Ky|La|Me|Md|Mass|Mich|Minn|Miss|Mo|Mont|Neb|' +\n    'Nebr|Nev|Mex|Dak|Okla|Ok|Ore|Penna|Penn|Pa|Tenn|Tex|Ut|Vt|Va|' +\n    'Wash|Wis|Wisc|Wyo|' +\n\n    /* Canadian province abbreviations:\n     * Alberta, Manitoba, Ontario, Quebec, *, Saskatchewan,\n     * Yukon Territory. */\n    'Alta|Man|Ont|Qu\\u00E9|Que|Sask|Yuk|' +\n\n    /* English county abbreviations:\n     * Bedfordshire, Berkshire, Buckinghamshire, Cambridgeshire,\n     * Cheshire, Cornwall, Cumberland, Derbyshire, *, Devon, Dorset,\n     * Durham, Gloucestershire, Hampshire, Herefordshire, *,\n     * Hertfordshire, Huntingdonshire, Lancashire, Leicestershire,\n     * Lincolnshire, Middlesex, *, *, Norfolk, Northamptonshire,\n     * Northumberland, *, Nottinghamshire, Oxfordshire, Rutland,\n     * Shropshire, Somerset, Staffordshire, *, Suffolk, Surrey,\n     * Sussex, *, Warwickshire, *, *, Westmorland, Wiltshire,\n     * Worcestershire, Yorkshire. */\n    'Beds|Berks|Bucks|Cambs|Ches|Corn|Cumb|Derbys|Derbs|Dev|Dor|Dur|' +\n    'Glos|Hants|Here|Heref|Herts|Hunts|Lancs|Leics|Lincs|Mx|Middx|Mddx|' +\n    'Norf|Northants|Northumb|Northd|Notts|Oxon|Rut|Shrops|Salop|Som|' +\n    'Staffs|Staf|Suff|Sy|Sx|Ssx|Warks|War|Warw|Westm|Wilts|Worcs|Yorks' +\n  ')$'\n);\n\n/* Match a blacklisted word which when followed by\n * an apostrophe depicts elision. */\nvar ELISION_PREFIX = new RegExp(\n  '^(' +\n    /* Includes:\n     * - o' > of;\n     * - ol' > old. */\n    'o|ol' +\n  ')$'\n);\n\n/* Match a blacklisted word which when preceded by\n * an apostrophe depicts elision. */\nvar ELISION_AFFIX = new RegExp(\n  '^(' +\n    /* Includes:\n     * - 'im > him;\n     * - 'er > her;\n     * - 'em > them.\n     * - 'cause > because. */\n    'im|er|em|cause|' +\n\n    /* Includes:\n     * - 'twas > it was;\n     * - 'tis > it is;\n     * - 'twere > it were. */\n    'twas|tis|twere|' +\n\n    /* Matches groups of year, optionally followed\n     * by an `s`. */\n    '\\\\d\\\\ds?' +\n  ')$'\n);\n\n/* Match one apostrophe. */\nvar APOSTROPHE = /^['\\u2019]$/;\n\n/* Merge a sentence into its next sentence,\n * when the sentence ends with a certain word. */\nfunction mergeEnglishPrefixExceptions(sentence, index, paragraph) {\n  var children = sentence.children;\n  var period = children[children.length - 1];\n  var word = children[children.length - 2];\n  var value;\n  var next;\n\n  if (period && toString(period) === '.' && word && word.type === 'WordNode') {\n    value = toString(word);\n\n    if (ABBREVIATION.test(lower(value)) || ABBREVIATION_SENSITIVE.test(value)) {\n      /* Merge period into abbreviation. */\n      word.children.push(period);\n      children.pop();\n\n      if (period.position && word.position) {\n        word.position.end = period.position.end;\n      }\n\n      /* Merge sentences. */\n      next = paragraph.children[index + 1];\n\n      if (next) {\n        sentence.children = children.concat(next.children);\n\n        paragraph.children.splice(index + 1, 1);\n\n        /* Update position. */\n        if (next.position && sentence.position) {\n          sentence.position.end = next.position.end;\n        }\n\n        /* Next, iterate over the current node again. */\n        return index - 1;\n      }\n    }\n  }\n}\n\n/* Merge an apostrophe depicting elision into\n * its surrounding word. */\nfunction mergeEnglishElisionExceptions(child, index, sentence) {\n  var siblings;\n  var sibling;\n  var other;\n  var length;\n  var value;\n\n  if (child.type !== 'PunctuationNode' && child.type !== 'SymbolNode') {\n    return;\n  }\n\n  siblings = sentence.children;\n  length = siblings.length;\n  value = toString(child);\n\n  /* Match abbreviation of `with`, `w/` */\n  if (value === '/') {\n    sibling = siblings[index - 1];\n\n    if (sibling && lower(toString(sibling)) === 'w') {\n      /* Remove the slash from the sentence. */\n      siblings.splice(index, 1);\n\n      /* Append the slash into the children of the\n       * previous node. */\n      sibling.children.push(child);\n\n      /* Update position. */\n      if (sibling.position && child.position) {\n        sibling.position.end = child.position.end;\n      }\n    }\n  } else if (APOSTROPHE.test(value)) {\n    /* If two preceding (the first white space and the\n     * second a word), and one following (white space)\n     * nodes exist... */\n    sibling = siblings[index - 1];\n\n    if (\n      index > 2 &&\n      index < length - 1 &&\n      sibling.type === 'WordNode' &&\n      siblings[index - 2].type === 'WhiteSpaceNode' &&\n      siblings[index + 1].type === 'WhiteSpaceNode' &&\n      ELISION_PREFIX.test(lower(toString(sibling)))\n    ) {\n      /* Remove the apostrophe from the sentence. */\n      siblings.splice(index, 1);\n\n      /* Append the apostrophe into the children of\n       * node. */\n      sibling.children.push(child);\n\n      /* Update position. */\n      if (sibling.position && child.position) {\n        sibling.position.end = child.position.end;\n      }\n\n      return;\n    }\n\n    /* If a following word exists, and the preceding node\n     * is not a word... */\n    if (\n      index !== length - 1 &&\n      siblings[index + 1].type === 'WordNode' &&\n      (index === 0 || siblings[index - 1].type !== 'WordNode')\n    ) {\n      sibling = siblings[index + 1];\n      value = lower(toString(sibling));\n\n      if (ELISION_AFFIX.test(value)) {\n        /* Remove the apostrophe from the sentence. */\n        siblings.splice(index, 1);\n\n        /* Prepend the apostrophe into the children of\n         * node. */\n        sibling.children = [child].concat(sibling.children);\n\n        /* Update position. */\n        if (sibling.position && child.position) {\n          sibling.position.start = child.position.start;\n        }\n      /* If both preceded and followed by an apostrophe,\n       * and the word is `n`... */\n      } else if (\n        value === 'n' &&\n        index < length - 2 &&\n        APOSTROPHE.test(toString(siblings[index + 2]))\n      ) {\n        other = siblings[index + 2];\n\n        /* Remove the apostrophe from the sentence. */\n        siblings.splice(index, 1);\n        siblings.splice(index + 1, 1);\n\n        /* Prepend the preceding apostrophe and append\n         * the into the following apostrophe into\n         * the children of node. */\n        sibling.children = [child].concat(sibling.children, other);\n\n        /* Update position. */\n        if (sibling.position) {\n          /* istanbul ignore else */\n          if (child.position) {\n            sibling.position.start = child.position.start;\n          }\n\n          /* istanbul ignore else */\n          if (other.position) {\n            sibling.position.end = other.position.end;\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction lower(value) {\n  return value.toLowerCase();\n}\n","'use strict';\nmodule.exports = require('./lib/index.js');\n","/* This module is generated by `script/build-expressions.js` */\n'use strict';\n\nmodule.exports = {\n  affixSymbol: /^([\\)\\]\\}\\u0F3B\\u0F3D\\u169C\\u2046\\u207E\\u208E\\u2309\\u230B\\u232A\\u2769\\u276B\\u276D\\u276F\\u2771\\u2773\\u2775\\u27C6\\u27E7\\u27E9\\u27EB\\u27ED\\u27EF\\u2984\\u2986\\u2988\\u298A\\u298C\\u298E\\u2990\\u2992\\u2994\\u2996\\u2998\\u29D9\\u29DB\\u29FD\\u2E23\\u2E25\\u2E27\\u2E29\\u3009\\u300B\\u300D\\u300F\\u3011\\u3015\\u3017\\u3019\\u301B\\u301E\\u301F\\uFD3E\\uFE18\\uFE36\\uFE38\\uFE3A\\uFE3C\\uFE3E\\uFE40\\uFE42\\uFE44\\uFE48\\uFE5A\\uFE5C\\uFE5E\\uFF09\\uFF3D\\uFF5D\\uFF60\\uFF63]|[\"'\\xBB\\u2019\\u201D\\u203A\\u2E03\\u2E05\\u2E0A\\u2E0D\\u2E1D\\u2E21]|[!\\.\\?\\u2026\\u203D])\\1*$/,\n  newLine: /^[ \\t]*((\\r?\\n|\\r)[\\t ]*)+$/,\n  newLineMulti: /^[ \\t]*((\\r?\\n|\\r)[\\t ]*){2,}$/,\n  terminalMarker: /^((?:[!\\.\\?\\u2026\\u203D])+)$/,\n  wordSymbolInner: /^((?:[&'\\-\\.:=\\?@\\xAD\\xB7\\u2010\\u2011\\u2019\\u2027])|(?:_)+)$/,\n  numerical: /^(?:[0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19]|\\uD800[\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDEE1-\\uDEFB\\uDF20-\\uDF23\\uDF41\\uDF4A\\uDFD1-\\uDFD5]|\\uD801[\\uDCA0-\\uDCA9]|\\uD802[\\uDC58-\\uDC5F\\uDC79-\\uDC7F\\uDCA7-\\uDCAF\\uDCFB-\\uDCFF\\uDD16-\\uDD1B\\uDDBC\\uDDBD\\uDDC0-\\uDDCF\\uDDD2-\\uDDFF\\uDE40-\\uDE47\\uDE7D\\uDE7E\\uDE9D-\\uDE9F\\uDEEB-\\uDEEF\\uDF58-\\uDF5F\\uDF78-\\uDF7F\\uDFA9-\\uDFAF]|\\uD803[\\uDCFA-\\uDCFF\\uDE60-\\uDE7E]|\\uD804[\\uDC52-\\uDC6F\\uDCF0-\\uDCF9\\uDD36-\\uDD3F\\uDDD0-\\uDDD9\\uDDE1-\\uDDF4\\uDEF0-\\uDEF9]|\\uD805[\\uDCD0-\\uDCD9\\uDE50-\\uDE59\\uDEC0-\\uDEC9\\uDF30-\\uDF3B]|\\uD806[\\uDCE0-\\uDCF2]|\\uD809[\\uDC00-\\uDC6E]|\\uD81A[\\uDE60-\\uDE69\\uDF50-\\uDF59\\uDF5B-\\uDF61]|\\uD834[\\uDF60-\\uDF71]|\\uD835[\\uDFCE-\\uDFFF]|\\uD83A[\\uDCC7-\\uDCCF]|\\uD83C[\\uDD00-\\uDD0C])+$/,\n  digitStart: /^[0-9]/,\n  lowerInitial: /^(?:[a-z\\xB5\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0561-\\u0587\\u13F8-\\u13FD\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7B\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7B5\\uA7B7\\uA7FA\\uAB30-\\uAB5A\\uAB60-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A]|\\uD801[\\uDC28-\\uDC4F]|\\uD803[\\uDCC0-\\uDCF2]|\\uD806[\\uDCC0-\\uDCDF]|\\uD835[\\uDC1A-\\uDC33\\uDC4E-\\uDC54\\uDC56-\\uDC67\\uDC82-\\uDC9B\\uDCB6-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDCEA-\\uDD03\\uDD1E-\\uDD37\\uDD52-\\uDD6B\\uDD86-\\uDD9F\\uDDBA-\\uDDD3\\uDDEE-\\uDE07\\uDE22-\\uDE3B\\uDE56-\\uDE6F\\uDE8A-\\uDEA5\\uDEC2-\\uDEDA\\uDEDC-\\uDEE1\\uDEFC-\\uDF14\\uDF16-\\uDF1B\\uDF36-\\uDF4E\\uDF50-\\uDF55\\uDF70-\\uDF88\\uDF8A-\\uDF8F\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9\\uDFCB])/,\n  surrogates: /[\\uD800-\\uDFFF]/,\n  punctuation: /[!\"'-\\),-\\/:;\\?\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u201F\\u2022-\\u2027\\u2032-\\u203A\\u203C-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E42\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDF3C-\\uDF3E]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]/,\n  word: /[0-9A-Za-z\\xAA\\xB2\\xB3\\xB5\\xB9\\xBA\\xBC-\\xBE\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u09F4-\\u09F9\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71-\\u0B77\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BF2\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D75\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F33\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u137C\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u17F0-\\u17F9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABE\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2070\\u2071\\u2074-\\u2079\\u207F-\\u2089\\u2090-\\u209C\\u20D0-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2CFD\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u3192-\\u3195\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA672\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA830-\\uA835\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0-\\uDEFB\\uDF00-\\uDF23\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC58-\\uDC76\\uDC79-\\uDC9E\\uDCA7-\\uDCAF\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDCFB-\\uDD1B\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBC-\\uDDCF\\uDDD2-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F-\\uDE47\\uDE60-\\uDE7E\\uDE80-\\uDE9F\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDEEB-\\uDEEF\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF58-\\uDF72\\uDF78-\\uDF91\\uDFA9-\\uDFAF]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDCFA-\\uDCFF\\uDE60-\\uDE7E]|\\uD804[\\uDC00-\\uDC46\\uDC52-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDDE1-\\uDDF4\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF3B]|\\uD806[\\uDCA0-\\uDCF2\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF5B-\\uDF61\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44\\uDF60-\\uDF71]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCC7-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD83C[\\uDD00-\\uDD0C]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/,\n  whiteSpace: /[\\t-\\r \\x85\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/\n};\n","'use strict';\n\nvar createParser = require('./parser');\nvar expressions = require('./expressions');\n\nmodule.exports = ParseLatin;\n\n/* == PARSE LATIN ================================================== */\n\n/* Transform Latin-script natural language into\n * an NLCST-tree. */\nfunction ParseLatin(doc, file) {\n  var value = file || doc;\n\n  if (!(this instanceof ParseLatin)) {\n    return new ParseLatin(doc, file);\n  }\n\n  this.doc = value ? String(value) : null;\n}\n\n/* Quick access to the prototype. */\nvar proto = ParseLatin.prototype;\n\n/* Default position. */\nproto.position = true;\n\n/* Create text nodes. */\nproto.tokenizeSymbol = createTextFactory('Symbol');\nproto.tokenizeWhiteSpace = createTextFactory('WhiteSpace');\nproto.tokenizePunctuation = createTextFactory('Punctuation');\nproto.tokenizeSource = createTextFactory('Source');\nproto.tokenizeText = createTextFactory('Text');\n\n/* Expose `run`. */\nproto.run = run;\n\n/* Inject `plugins` to modifiy the result of the method\n * at `key` on the operated on context. */\nproto.use = useFactory(function (context, key, plugins) {\n  context[key] = context[key].concat(plugins);\n});\n\n/* Inject `plugins` to modifiy the result of the method\n * at `key` on the operated on context, before any other. */\nproto.useFirst = useFactory(function (context, key, plugins) {\n  context[key] = plugins.concat(context[key]);\n});\n\n/* Easy access to the document parser. This additionally\n * supports retext-style invocation: where an instance is\n * created for each file, and the file is given on\n * construction. */\nproto.parse = function (value) {\n  return this.tokenizeRoot(value || this.doc);\n};\n\n/* Transform a `value` into a list of `NLCSTNode`s. */\nproto.tokenize = function (value) {\n  return tokenize(this, value);\n};\n\n/* == PARENT NODES =================================================\n *\n * All these nodes are `pluggable`: they come with a\n * `use` method which accepts a plugin\n * (`function(NLCSTNode)`). Every time one of these\n * methods are called, the plugin is invoked with the\n * node, allowing for easy modification.\n *\n * In fact, the internal transformation from `tokenize`\n * (a list of words, white space, punctuation, and\n * symbols) to `tokenizeRoot` (an NLCST tree), is also\n * implemented through this mechanism. */\n\n/* Create a `WordNode` with its children set to a single\n * `TextNode`, its value set to the given `value`. */\npluggable(ParseLatin, 'tokenizeWord', function (value, eat) {\n  var add = (eat || noopEat)('');\n  var parent = {type: 'WordNode', children: []};\n\n  this.tokenizeText(value, eat, parent);\n\n  return add(parent);\n});\n\n/* Create a `SentenceNode` with its children set to\n * `Node`s, their values set to the tokenized given\n * `value`.\n *\n * Unless plugins add new nodes, the sentence is\n * populated by `WordNode`s, `SymbolNode`s,\n * `PunctuationNode`s, and `WhiteSpaceNode`s. */\npluggable(ParseLatin, 'tokenizeSentence', createParser({\n  type: 'SentenceNode',\n  tokenizer: 'tokenize'\n}));\n\n/* Create a `ParagraphNode` with its children set to\n * `Node`s, their values set to the tokenized given\n * `value`.\n *\n * Unless plugins add new nodes, the paragraph is\n * populated by `SentenceNode`s and `WhiteSpaceNode`s. */\npluggable(ParseLatin, 'tokenizeParagraph', createParser({\n  type: 'ParagraphNode',\n  delimiter: expressions.terminalMarker,\n  delimiterType: 'PunctuationNode',\n  tokenizer: 'tokenizeSentence'\n}));\n\n/* Create a `RootNode` with its children set to `Node`s,\n * their values set to the tokenized given `value`. */\npluggable(ParseLatin, 'tokenizeRoot', createParser({\n  type: 'RootNode',\n  delimiter: expressions.newLine,\n  delimiterType: 'WhiteSpaceNode',\n  tokenizer: 'tokenizeParagraph'\n}));\n\n/* == PLUGINS ====================================================== */\n\nproto.use('tokenizeSentence', [\n  require('./plugin/merge-initial-word-symbol'),\n  require('./plugin/merge-final-word-symbol'),\n  require('./plugin/merge-inner-word-symbol'),\n  require('./plugin/merge-inner-word-slash'),\n  require('./plugin/merge-initialisms'),\n  require('./plugin/merge-words'),\n  require('./plugin/patch-position')\n]);\n\nproto.use('tokenizeParagraph', [\n  require('./plugin/merge-non-word-sentences'),\n  require('./plugin/merge-affix-symbol'),\n  require('./plugin/merge-initial-lower-case-letter-sentences'),\n  require('./plugin/merge-initial-digit-sentences'),\n  require('./plugin/merge-prefix-exceptions'),\n  require('./plugin/merge-affix-exceptions'),\n  require('./plugin/merge-remaining-full-stops'),\n  require('./plugin/make-initial-white-space-siblings'),\n  require('./plugin/make-final-white-space-siblings'),\n  require('./plugin/break-implicit-sentences'),\n  require('./plugin/remove-empty-nodes'),\n  require('./plugin/patch-position')\n]);\n\nproto.use('tokenizeRoot', [\n  require('./plugin/make-initial-white-space-siblings'),\n  require('./plugin/make-final-white-space-siblings'),\n  require('./plugin/remove-empty-nodes'),\n  require('./plugin/patch-position')\n]);\n\n/* == TEXT NODES =================================================== */\n\n/* Factory to create a `Text`. */\nfunction createTextFactory(type) {\n  type += 'Node';\n\n  return createText;\n\n  /* Construct a `Text` from a bound `type` */\n  function createText(value, eat, parent) {\n    if (value === null || value === undefined) {\n      value = '';\n    }\n\n    return (eat || noopEat)(value)({\n      type: type,\n      value: String(value)\n    }, parent);\n  }\n}\n\n/* Run transform plug-ins for `key` on `nodes`. */\nfunction run(key, nodes) {\n  var wareKey = key + 'Plugins';\n  var plugins = this[wareKey];\n  var index = -1;\n\n  if (plugins) {\n    while (plugins[++index]) {\n      plugins[index](nodes);\n    }\n  }\n\n  return nodes;\n}\n\n/* Make a method “pluggable”. */\nfunction pluggable(Constructor, key, callback) {\n  /* Set a pluggable version of `callback`\n   * on `Constructor`. */\n  Constructor.prototype[key] = function () {\n    return this.run(key, callback.apply(this, arguments));\n  };\n}\n\n/* Factory to inject `plugins`. Takes `callback` for\n * the actual inserting. */\nfunction useFactory(callback) {\n  return use;\n\n  /* Validate if `plugins` can be inserted. Invokes\n   * the bound `callback` to do the actual inserting. */\n  function use(key, plugins) {\n    var self = this;\n    var wareKey;\n\n    /* Throw if the method is not pluggable. */\n    if (!(key in self)) {\n      throw new Error(\n        'Illegal Invocation: Unsupported `key` for ' +\n        '`use(key, plugins)`. Make sure `key` is a ' +\n        'supported function'\n      );\n    }\n\n    /* Fail silently when no plugins are given. */\n    if (!plugins) {\n      return;\n    }\n\n    wareKey = key + 'Plugins';\n\n    /* Make sure `plugins` is a list. */\n    if (typeof plugins === 'function') {\n      plugins = [plugins];\n    } else {\n      plugins = plugins.concat();\n    }\n\n    /* Make sure `wareKey` exists. */\n    if (!self[wareKey]) {\n      self[wareKey] = [];\n    }\n\n    /* Invoke callback with the ware key and plugins. */\n    callback(self, wareKey, plugins);\n  }\n}\n\n/* == CLASSIFY ===================================================== */\n\n/* Match a word character. */\nvar WORD = expressions.word;\n\n/* Match a surrogate character. */\nvar SURROGATES = expressions.surrogates;\n\n/* Match a punctuation character. */\nvar PUNCTUATION = expressions.punctuation;\n\n/* Match a white space character. */\nvar WHITE_SPACE = expressions.whiteSpace;\n\n/* Transform a `value` into a list of `NLCSTNode`s. */\nfunction tokenize(parser, value) {\n  var tokens;\n  var offset;\n  var line;\n  var column;\n  var index;\n  var length;\n  var character;\n  var queue;\n  var prev;\n  var left;\n  var right;\n  var eater;\n\n  if (value === null || value === undefined) {\n    value = '';\n  } else if (value instanceof String) {\n    value = value.toString();\n  }\n\n  if (typeof value !== 'string') {\n    /* Return the given nodes if this is either an\n     * empty array, or an array with a node as a first\n     * child. */\n    if ('length' in value && (!value[0] || value[0].type)) {\n      return value;\n    }\n\n    throw new Error(\n      'Illegal invocation: \\'' + value + '\\'' +\n      ' is not a valid argument for \\'ParseLatin\\''\n    );\n  }\n\n  tokens = [];\n\n  if (!value) {\n    return tokens;\n  }\n\n  index = 0;\n  offset = 0;\n  line = 1;\n  column = 1;\n\n  /* Eat mechanism to use. */\n  eater = parser.position ? eat : noPositionEat;\n\n  length = value.length;\n  prev = '';\n  queue = '';\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (WHITE_SPACE.test(character)) {\n      right = 'WhiteSpace';\n    } else if (PUNCTUATION.test(character)) {\n      right = 'Punctuation';\n    } else if (WORD.test(character)) {\n      right = 'Word';\n    } else {\n      right = 'Symbol';\n    }\n\n    tick();\n\n    prev = character;\n    character = '';\n    left = right;\n    right = null;\n\n    index++;\n  }\n\n  tick();\n\n  return tokens;\n\n  /* Check one character. */\n  function tick() {\n    if (\n      left === right &&\n      (\n        left === 'Word' ||\n        left === 'WhiteSpace' ||\n        character === prev ||\n        SURROGATES.test(character)\n      )\n    ) {\n      queue += character;\n    } else {\n      /* Flush the previous queue. */\n      if (queue) {\n        parser['tokenize' + left](queue, eater);\n      }\n\n      queue = character;\n    }\n  }\n\n  /* Remove `subvalue` from `value`.\n   * Expects `subvalue` to be at the start from\n   * `value`, and applies no validation. */\n  function eat(subvalue) {\n    var pos = position();\n\n    update(subvalue);\n\n    return apply;\n\n    /* Add the given arguments, add `position` to\n     * the returned node, and return the node. */\n    function apply() {\n      return pos(add.apply(null, arguments));\n    }\n  }\n\n  /* Remove `subvalue` from `value`. Does not patch\n   * positional information. */\n  function noPositionEat() {\n    return apply;\n\n    /* Add the given arguments and return the node. */\n    function apply() {\n      return add.apply(null, arguments);\n    }\n  }\n\n  /* Add mechanism. */\n  function add(node, parent) {\n    if (parent) {\n      parent.children.push(node);\n    } else {\n      tokens.push(node);\n    }\n\n    return node;\n  }\n\n  /* Mark position and patch `node.position`. */\n  function position() {\n    var before = now();\n\n    /* Add the position to a node. */\n    function patch(node) {\n      node.position = new Position(before);\n\n      return node;\n    }\n\n    return patch;\n  }\n\n  /* Update line and column based on `value`. */\n  function update(subvalue) {\n    var subvalueLength = subvalue.length;\n    var character = -1;\n    var lastIndex = -1;\n\n    offset += subvalueLength;\n\n    while (++character < subvalueLength) {\n      if (subvalue.charAt(character) === '\\n') {\n        lastIndex = character;\n        line++;\n      }\n    }\n\n    if (lastIndex === -1) {\n      column += subvalueLength;\n    } else {\n      column = subvalueLength - lastIndex;\n    }\n  }\n\n  /* Store position information for a node. */\n  function Position(start) {\n    this.start = start;\n    this.end = now();\n  }\n\n  /* Get the current position. */\n  function now() {\n    return {\n      line: line,\n      column: column,\n      offset: offset\n    };\n  }\n}\n\n/* Add mechanism used when text-tokenisers are called\n * directly outside of the `tokenize` function. */\nfunction noopAdd(node, parent) {\n  if (parent) {\n    parent.children.push(node);\n  }\n\n  return node;\n}\n\n/* Eat and add mechanism without adding positional\n * information, used when text-tokenisers are called\n * directly outside of the `tokenize` function. */\nfunction noopEat() {\n  return noopAdd;\n}\n","'use strict';\n\nvar tokenizer = require('./tokenizer');\n\nmodule.exports = parserFactory;\n\n/* Construct a parser based on `options`. */\nfunction parserFactory(options) {\n  var type = options.type;\n  var tokenizerProperty = options.tokenizer;\n  var delimiter = options.delimiter;\n  var tokenize = delimiter && tokenizer(options.delimiterType, delimiter);\n\n  return parser;\n\n  function parser(value) {\n    var children = this[tokenizerProperty](value);\n\n    return {\n      type: type,\n      children: tokenize ? tokenize(children) : children\n    };\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\nvar expressions = require('../expressions');\n\nmodule.exports = modifyChildren(breakImplicitSentences);\n\n/* Two or more new line characters. */\nvar MULTI_NEW_LINE = expressions.newLineMulti;\n\n/* Break a sentence if a white space with more\n * than one new-line is found. */\nfunction breakImplicitSentences(child, index, parent) {\n  var children;\n  var position;\n  var length;\n  var tail;\n  var head;\n  var end;\n  var insertion;\n  var node;\n\n  if (child.type !== 'SentenceNode') {\n    return;\n  }\n\n  children = child.children;\n\n  /* Ignore first and last child. */\n  length = children.length - 1;\n  position = 0;\n\n  while (++position < length) {\n    node = children[position];\n\n    if (\n      node.type !== 'WhiteSpaceNode' ||\n      !MULTI_NEW_LINE.test(toString(node))\n    ) {\n      continue;\n    }\n\n    child.children = children.slice(0, position);\n\n    insertion = {\n      type: 'SentenceNode',\n      children: children.slice(position + 1)\n    };\n\n    tail = children[position - 1];\n    head = children[position + 1];\n\n    parent.children.splice(index + 1, 0, node, insertion);\n\n    if (child.position && tail.position && head.position) {\n      end = child.position.end;\n\n      child.position.end = tail.position.end;\n\n      insertion.position = {\n        start: head.position.start,\n        end: end\n      };\n    }\n\n    return index + 1;\n  }\n}\n","'use strict';\n\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(makeFinalWhiteSpaceSiblings);\n\n/* Move white space ending a paragraph up, so they are\n * the siblings of paragraphs. */\nfunction makeFinalWhiteSpaceSiblings(child, index, parent) {\n  var children = child.children;\n  var prev;\n\n  if (\n    children &&\n    children.length !== 0 &&\n    children[children.length - 1].type === 'WhiteSpaceNode'\n  ) {\n    parent.children.splice(index + 1, 0, child.children.pop());\n    prev = children[children.length - 1];\n\n    if (prev && prev.position && child.position) {\n      child.position.end = prev.position.end;\n    }\n\n    /* Next, iterate over the current node again. */\n    return index;\n  }\n}\n","'use strict';\n\nvar visitChildren = require('unist-util-visit-children');\n\nmodule.exports = visitChildren(makeInitialWhiteSpaceSiblings);\n\n/* Move white space starting a sentence up, so they are\n * the siblings of sentences. */\nfunction makeInitialWhiteSpaceSiblings(child, index, parent) {\n  var children = child.children;\n  var next;\n\n  if (children && children.length !== 0 && children[0].type === 'WhiteSpaceNode') {\n    parent.children.splice(index, 0, children.shift());\n    next = children[0];\n\n    if (next && next.position && child.position) {\n      child.position.start = next.position.start;\n    }\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(mergeAffixExceptions);\n\n/* Merge a sentence into its previous sentence, when\n * the sentence starts with a comma. */\nfunction mergeAffixExceptions(child, index, parent) {\n  var children = child.children;\n  var node;\n  var position;\n  var value;\n  var previousChild;\n\n  if (!children || children.length === 0 || index === 0) {\n    return;\n  }\n\n  position = -1;\n\n  while (children[++position]) {\n    node = children[position];\n\n    if (node.type === 'WordNode') {\n      return;\n    }\n\n    if (node.type === 'SymbolNode' || node.type === 'PunctuationNode') {\n      value = toString(node);\n\n      if (value !== ',' && value !== ';') {\n        return;\n      }\n\n      previousChild = parent.children[index - 1];\n\n      previousChild.children = previousChild.children.concat(children);\n\n      /* Update position. */\n      if (previousChild.position && child.position) {\n        previousChild.position.end = child.position.end;\n      }\n\n      parent.children.splice(index, 1);\n\n      /* Next, iterate over the node *now* at the current\n       * position. */\n      return index;\n    }\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\nvar expressions = require('../expressions');\n\nmodule.exports = modifyChildren(mergeAffixSymbol);\n\n/* Closing or final punctuation, or terminal markers\n * that should still be included in the previous\n * sentence, even though they follow the sentence's\n * terminal marker. */\nvar AFFIX_SYMBOL = expressions.affixSymbol;\n\n/* Move certain punctuation following a terminal\n * marker (thus in the next sentence) to the\n * previous sentence. */\nfunction mergeAffixSymbol(child, index, parent) {\n  var children = child.children;\n  var first;\n  var second;\n  var prev;\n\n  if (children && children.length !== 0 && index !== 0) {\n    first = children[0];\n    second = children[1];\n    prev = parent.children[index - 1];\n\n    if (\n      (first.type === 'SymbolNode' || first.type === 'PunctuationNode') &&\n      AFFIX_SYMBOL.test(toString(first))\n    ) {\n      prev.children.push(children.shift());\n\n      /* Update position. */\n      if (first.position && prev.position) {\n        prev.position.end = first.position.end;\n      }\n\n      if (second && second.position && child.position) {\n        child.position.start = second.position.start;\n      }\n\n      /* Next, iterate over the previous node again. */\n      return index - 1;\n    }\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(mergeFinalWordSymbol);\n\n/* Merge certain punctuation marks into their\n * preceding words. */\nfunction mergeFinalWordSymbol(child, index, parent) {\n  var children;\n  var prev;\n  var next;\n\n  if (\n    index !== 0 &&\n    (child.type === 'SymbolNode' || child.type === 'PunctuationNode') &&\n    toString(child) === '-'\n  ) {\n    children = parent.children;\n\n    prev = children[index - 1];\n    next = children[index + 1];\n\n    if (\n      (!next || next.type !== 'WordNode') &&\n      (prev && prev.type === 'WordNode')\n    ) {\n      /* Remove `child` from parent. */\n      children.splice(index, 1);\n\n      /* Add the punctuation mark at the end of the\n       * previous node. */\n      prev.children.push(child);\n\n      /* Update position. */\n      if (prev.position && child.position) {\n        prev.position.end = child.position.end;\n      }\n\n      /* Next, iterate over the node *now* at the\n       * current position (which was the next node). */\n      return index;\n    }\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\nvar expressions = require('../expressions');\n\nmodule.exports = modifyChildren(mergeInitialDigitSentences);\n\n/* Initial lowercase letter. */\nvar DIGIT = expressions.digitStart;\n\n/* Merge a sentence into its previous sentence, when\n * the sentence starts with a lower case letter. */\nfunction mergeInitialDigitSentences(child, index, parent) {\n  var children = child.children;\n  var siblings = parent.children;\n  var prev = siblings[index - 1];\n  var head = children[0];\n\n  if (prev && head && head.type === 'WordNode' && DIGIT.test(toString(head))) {\n    prev.children = prev.children.concat(children);\n    siblings.splice(index, 1);\n\n    /* Update position. */\n    if (prev.position && child.position) {\n      prev.position.end = child.position.end;\n    }\n\n    /* Next, iterate over the node *now* at\n     * the current position. */\n    return index;\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\nvar expressions = require('../expressions');\n\nmodule.exports = modifyChildren(mergeInitialLowerCaseLetterSentences);\n\n/* Initial lowercase letter. */\nvar LOWER_INITIAL = expressions.lowerInitial;\n\n/* Merge a sentence into its previous sentence, when\n * the sentence starts with a lower case letter. */\nfunction mergeInitialLowerCaseLetterSentences(child, index, parent) {\n  var children = child.children;\n  var position;\n  var node;\n  var siblings;\n  var prev;\n\n  if (children && children.length !== 0 && index !== 0) {\n    position = -1;\n\n    while (children[++position]) {\n      node = children[position];\n\n      if (node.type === 'WordNode') {\n        if (!LOWER_INITIAL.test(toString(node))) {\n          return;\n        }\n\n        siblings = parent.children;\n\n        prev = siblings[index - 1];\n\n        prev.children = prev.children.concat(children);\n\n        siblings.splice(index, 1);\n\n        /* Update position. */\n        if (prev.position && child.position) {\n          prev.position.end = child.position.end;\n        }\n\n        /* Next, iterate over the node *now* at\n         * the current position. */\n        return index;\n      }\n\n      if (node.type === 'SymbolNode' || node.type === 'PunctuationNode') {\n        return;\n      }\n    }\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(mergeInitialWordSymbol);\n\n/* Merge certain punctuation marks into their\n * following words. */\nfunction mergeInitialWordSymbol(child, index, parent) {\n  var children;\n  var next;\n\n  if (\n    (child.type !== 'SymbolNode' && child.type !== 'PunctuationNode') ||\n    toString(child) !== '&'\n  ) {\n    return;\n  }\n\n  children = parent.children;\n\n  next = children[index + 1];\n\n  /* If either a previous word, or no following word,\n   * exists, exit early. */\n  if (\n    (index !== 0 && children[index - 1].type === 'WordNode') ||\n    !(next && next.type === 'WordNode')\n  ) {\n    return;\n  }\n\n  /* Remove `child` from parent. */\n  children.splice(index, 1);\n\n  /* Add the punctuation mark at the start of the\n   * next node. */\n  next.children.unshift(child);\n\n  /* Update position. */\n  if (next.position && child.position) {\n    next.position.start = child.position.start;\n  }\n\n  /* Next, iterate over the node at the previous\n   * position, as it's now adjacent to a following\n   * word. */\n  return index - 1;\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\nvar expressions = require('../expressions');\n\nmodule.exports = modifyChildren(mergeInitialisms);\n\nvar NUMERICAL = expressions.numerical;\n\n/* Merge initialisms. */\nfunction mergeInitialisms(child, index, parent) {\n  var siblings;\n  var prev;\n  var children;\n  var length;\n  var position;\n  var otherChild;\n  var isAllDigits;\n  var value;\n\n  if (index !== 0 && toString(child) === '.') {\n    siblings = parent.children;\n\n    prev = siblings[index - 1];\n    children = prev.children;\n\n    length = children && children.length;\n\n    if (\n      prev.type === 'WordNode' &&\n      length !== 1 &&\n      length % 2 !== 0\n    ) {\n      position = length;\n\n      isAllDigits = true;\n\n      while (children[--position]) {\n        otherChild = children[position];\n\n        value = toString(otherChild);\n\n        if (position % 2 === 0) {\n          /* Initialisms consist of one\n           * character values. */\n          if (value.length > 1) {\n            return;\n          }\n\n          if (!NUMERICAL.test(value)) {\n            isAllDigits = false;\n          }\n        } else if (value !== '.') {\n          if (position < length - 2) {\n            break;\n          } else {\n            return;\n          }\n        }\n      }\n\n      if (!isAllDigits) {\n        /* Remove `child` from parent. */\n        siblings.splice(index, 1);\n\n        /* Add child to the previous children. */\n        children.push(child);\n\n        /* Update position. */\n        if (prev.position && child.position) {\n          prev.position.end = child.position.end;\n        }\n\n        /* Next, iterate over the node *now* at the current\n         * position. */\n        return index;\n      }\n    }\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(mergeInnerWordSlash);\n\nvar C_SLASH = '/';\n\n/* Merge words joined by certain punctuation marks. */\nfunction mergeInnerWordSlash(child, index, parent) {\n  var siblings = parent.children;\n  var prev;\n  var next;\n  var prevValue;\n  var nextValue;\n  var queue;\n  var tail;\n  var count;\n\n  prev = siblings[index - 1];\n  next = siblings[index + 1];\n\n  if (\n    prev &&\n    prev.type === 'WordNode' &&\n    (child.type === 'SymbolNode' || child.type === 'PunctuationNode') &&\n    toString(child) === C_SLASH\n  ) {\n    prevValue = toString(prev);\n    tail = child;\n    queue = [child];\n    count = 1;\n\n    if (next && next.type === 'WordNode') {\n      nextValue = toString(next);\n      tail = next;\n      queue = queue.concat(next.children);\n      count++;\n    }\n\n    if (\n      prevValue.length < 3 &&\n      (!nextValue || nextValue.length < 3)\n    ) {\n      /* Add all found tokens to `prev`s children. */\n      prev.children = prev.children.concat(queue);\n\n      siblings.splice(index, count);\n\n      /* Update position. */\n      if (prev.position && tail.position) {\n        prev.position.end = tail.position.end;\n      }\n\n      /* Next, iterate over the node *now* at the current\n       * position. */\n      return index;\n    }\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\nvar expressions = require('../expressions');\n\nmodule.exports = modifyChildren(mergeInnerWordSymbol);\n\n/* Symbols part of surrounding words. */\nvar INNER_WORD_SYMBOL = expressions.wordSymbolInner;\n\n/* Merge words joined by certain punctuation marks. */\nfunction mergeInnerWordSymbol(child, index, parent) {\n  var siblings;\n  var sibling;\n  var prev;\n  var last;\n  var position;\n  var tokens;\n  var queue;\n\n  if (index !== 0 && (child.type === 'SymbolNode' || child.type === 'PunctuationNode')) {\n    siblings = parent.children;\n    prev = siblings[index - 1];\n\n    if (prev && prev.type === 'WordNode') {\n      position = index - 1;\n\n      tokens = [];\n      queue = [];\n\n      /* - If a token which is neither word nor\n       *   inner word symbol is found, the loop\n       *   is broken.\n       * - If an inner word symbol is found,\n       *   it's queued.\n       * - If a word is found, it's queued (and\n       *   the queue stored and emptied). */\n      while (siblings[++position]) {\n        sibling = siblings[position];\n\n        if (sibling.type === 'WordNode') {\n          tokens = tokens.concat(queue, sibling.children);\n\n          queue = [];\n        } else if (\n          (\n            sibling.type === 'SymbolNode' ||\n            sibling.type === 'PunctuationNode'\n          ) &&\n          INNER_WORD_SYMBOL.test(toString(sibling))\n        ) {\n          queue.push(sibling);\n        } else {\n          break;\n        }\n      }\n\n      if (tokens.length !== 0) {\n        /* If there is a queue, remove its length\n         * from `position`. */\n        if (queue.length !== 0) {\n          position -= queue.length;\n        }\n\n        /* Remove every (one or more) inner-word punctuation\n         * marks and children of words. */\n        siblings.splice(index, position - index);\n\n        /* Add all found tokens to `prev`s children. */\n        prev.children = prev.children.concat(tokens);\n\n        last = tokens[tokens.length - 1];\n\n        /* Update position. */\n        if (prev.position && last.position) {\n          prev.position.end = last.position.end;\n        }\n\n        /* Next, iterate over the node *now* at the current\n         * position. */\n        return index;\n      }\n    }\n  }\n}\n","'use strict';\n\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(mergeNonWordSentences);\n\n/* Merge a sentence into the following sentence, when\n * the sentence does not contain word tokens. */\nfunction mergeNonWordSentences(child, index, parent) {\n  var children = child.children;\n  var position = -1;\n  var prev;\n  var next;\n\n  while (children[++position]) {\n    if (children[position].type === 'WordNode') {\n      return;\n    }\n  }\n\n  prev = parent.children[index - 1];\n\n  if (prev) {\n    prev.children = prev.children.concat(children);\n\n    /* Remove the child. */\n    parent.children.splice(index, 1);\n\n    /* Patch position. */\n    if (prev.position && child.position) {\n      prev.position.end = child.position.end;\n    }\n\n    /* Next, iterate over the node *now* at\n     * the current position (which was the\n     * next node). */\n    return index;\n  }\n\n  next = parent.children[index + 1];\n\n  if (next) {\n    next.children = children.concat(next.children);\n\n    /* Patch position. */\n    if (next.position && child.position) {\n      next.position.start = child.position.start;\n    }\n\n    /* Remove the child. */\n    parent.children.splice(index, 1);\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(mergePrefixExceptions);\n\n/* Blacklist of full stop characters that should not\n * be treated as terminal sentence markers: A case-insensitive\n * abbreviation. */\nvar ABBREVIATION_PREFIX = new RegExp(\n  '^(' +\n    '[0-9]{1,3}|' +\n    '[a-z]|' +\n\n    /* Common Latin Abbreviations:\n     * Based on: http://en.wikipedia.org/wiki/List_of_Latin_abbreviations\n     * Where only the abbreviations written without joining full stops,\n     * but with a final full stop, were extracted.\n     *\n     * circa, capitulus, confer, compare, centum weight, eadem, (et) alii,\n     * et cetera, floruit, foliis, ibidem, idem, nemine && contradicente,\n     * opere && citato, (per) cent, (per) procurationem, (pro) tempore,\n     * sic erat scriptum, (et) sequentia, statim, videlicet. */\n    'al|ca|cap|cca|cent|cf|cit|con|cp|cwt|ead|etc|ff|' +\n    'fl|ibid|id|nem|op|pro|seq|sic|stat|tem|viz' +\n  ')$'\n);\n\n/* Merge a sentence into its next sentence, when the\n * sentence ends with a certain word. */\nfunction mergePrefixExceptions(child, index, parent) {\n  var children = child.children;\n  var period;\n  var node;\n  var next;\n\n  if (children && children.length > 1) {\n    period = children[children.length - 1];\n\n    if (period && toString(period) === '.') {\n      node = children[children.length - 2];\n\n      if (\n        node &&\n        node.type === 'WordNode' &&\n        ABBREVIATION_PREFIX.test(toString(node).toLowerCase())\n      ) {\n        /* Merge period into abbreviation. */\n        node.children.push(period);\n        children.pop();\n\n        /* Update position. */\n        if (period.position && node.position) {\n          node.position.end = period.position.end;\n        }\n\n        /* Merge sentences. */\n        next = parent.children[index + 1];\n\n        if (next) {\n          child.children = children.concat(next.children);\n\n          parent.children.splice(index + 1, 1);\n\n          /* Update position. */\n          if (next.position && child.position) {\n            child.position.end = next.position.end;\n          }\n\n          /* Next, iterate over the current node again. */\n          return index - 1;\n        }\n      }\n    }\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar visitChildren = require('unist-util-visit-children');\nvar expressions = require('../expressions');\n\nmodule.exports = visitChildren(mergeRemainingFullStops);\n\n/* Blacklist of full stop characters that should not\n * be treated as terminal sentence markers: A\n * case-insensitive abbreviation. */\nvar TERMINAL_MARKER = expressions.terminalMarker;\n\n/* Merge non-terminal-marker full stops into\n * the previous word (if available), or the next\n * word (if available). */\nfunction mergeRemainingFullStops(child) {\n  var children = child.children;\n  var position = children.length;\n  var hasFoundDelimiter = false;\n  var grandchild;\n  var prev;\n  var next;\n  var nextNext;\n\n  while (children[--position]) {\n    grandchild = children[position];\n\n    if (grandchild.type !== 'SymbolNode' && grandchild.type !== 'PunctuationNode') {\n      /* This is a sentence without terminal marker,\n       * so we 'fool' the code to make it think we\n       * have found one. */\n      if (grandchild.type === 'WordNode') {\n        hasFoundDelimiter = true;\n      }\n\n      continue;\n    }\n\n    /* Exit when this token is not a terminal marker. */\n    if (!TERMINAL_MARKER.test(toString(grandchild))) {\n      continue;\n    }\n\n    /* Ignore the first terminal marker found\n     * (starting at the end), as it should not\n     * be merged. */\n    if (!hasFoundDelimiter) {\n      hasFoundDelimiter = true;\n\n      continue;\n    }\n\n    /* Only merge a single full stop. */\n    if (toString(grandchild) !== '.') {\n      continue;\n    }\n\n    prev = children[position - 1];\n    next = children[position + 1];\n\n    if (prev && prev.type === 'WordNode') {\n      nextNext = children[position + 2];\n\n      /* Continue when the full stop is followed by\n       * a space and another full stop, such as:\n       * `{.} .` */\n      if (\n        next &&\n        nextNext &&\n        next.type === 'WhiteSpaceNode' &&\n        toString(nextNext) === '.'\n      ) {\n        continue;\n      }\n\n      /* Remove `child` from parent. */\n      children.splice(position, 1);\n\n      /* Add the punctuation mark at the end of the\n       * previous node. */\n      prev.children.push(grandchild);\n\n      /* Update position. */\n      if (grandchild.position && prev.position) {\n        prev.position.end = grandchild.position.end;\n      }\n\n      position--;\n    } else if (next && next.type === 'WordNode') {\n      /* Remove `child` from parent. */\n      children.splice(position, 1);\n\n      /* Add the punctuation mark at the start of\n       * the next node. */\n      next.children.unshift(grandchild);\n\n      if (grandchild.position && next.position) {\n        next.position.start = grandchild.position.start;\n      }\n    }\n  }\n}\n","'use strict';\n\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(mergeFinalWordSymbol);\n\n/* Merge multiple words. This merges the children of\n * adjacent words, something which should not occur\n * naturally by parse-latin, but might happen when\n * custom tokens were passed in. */\nfunction mergeFinalWordSymbol(child, index, parent) {\n  var siblings = parent.children;\n  var next;\n\n  if (child.type === 'WordNode') {\n    next = siblings[index + 1];\n\n    if (next && next.type === 'WordNode') {\n      /* Remove `next` from parent. */\n      siblings.splice(index + 1, 1);\n\n      /* Add the punctuation mark at the end of the\n       * previous node. */\n      child.children = child.children.concat(next.children);\n\n      /* Update position. */\n      if (next.position && child.position) {\n        child.position.end = next.position.end;\n      }\n\n      /* Next, re-iterate the current node. */\n      return index;\n    }\n  }\n}\n","'use strict';\n\nvar visitChildren = require('unist-util-visit-children');\n\nmodule.exports = visitChildren(patchPosition);\n\n/* Patch the position on a parent node based on its first\n * and last child. */\nfunction patchPosition(child, index, node) {\n  var siblings = node.children;\n\n  if (!child.position) {\n    return;\n  }\n\n  if (index === 0 && (!node.position || /* istanbul ignore next */ !node.position.start)) {\n    patch(node);\n    node.position.start = child.position.start;\n  }\n\n  if (\n    index === siblings.length - 1 &&\n    (!node.position || !node.position.end)\n  ) {\n    patch(node);\n    node.position.end = child.position.end;\n  }\n}\n\n/* Add a `position` object when it does not yet exist\n * on `node`. */\nfunction patch(node) {\n  if (!node.position) {\n    node.position = {};\n  }\n}\n","'use strict';\n\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(removeEmptyNodes);\n\n/* Remove empty children. */\nfunction removeEmptyNodes(child, index, parent) {\n  if ('children' in child && child.children.length === 0) {\n    parent.children.splice(index, 1);\n\n    /* Next, iterate over the node *now* at\n     * the current position (which was the\n     * next node). */\n    return index;\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\n\nmodule.exports = tokenizerFactory;\n\n/* Factory to create a tokenizer based on a given\n * `expression`. */\nfunction tokenizerFactory(childType, expression) {\n  return tokenizer;\n\n  /* A function that splits. */\n  function tokenizer(node) {\n    var children = [];\n    var tokens = node.children;\n    var type = node.type;\n    var length = tokens.length;\n    var index = -1;\n    var lastIndex = length - 1;\n    var start = 0;\n    var first;\n    var last;\n    var parent;\n\n    while (++index < length) {\n      if (\n        index === lastIndex ||\n        (\n          tokens[index].type === childType &&\n          expression.test(toString(tokens[index]))\n        )\n      ) {\n        first = tokens[start];\n        last = tokens[index];\n\n        parent = {\n          type: type,\n          children: tokens.slice(start, index + 1)\n        };\n\n        if (first.position && last.position) {\n          parent.position = {\n            start: first.position.start,\n            end: last.position.end\n          };\n        }\n\n        children.push(parent);\n\n        start = index + 1;\n      }\n    }\n\n    return children;\n  }\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","'use strict';\n\nvar unherit = require('unherit');\nvar English = require('parse-english');\n\nmodule.exports = parse;\nparse.Parser = English;\n\nfunction parse() {\n  this.Parser = unherit(English);\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\n\nmodule.exports = stringify;\n\nfunction stringify() {\n  this.Compiler = compiler;\n}\n\nfunction compiler(tree) {\n  return toString(tree);\n}\n","'use strict';\n\nvar buffer = require('is-buffer');\nvar vfile = require('vfile');\n\nmodule.exports = toVFile;\n\n/* Create a virtual file from a description.\n * If `options` is a string or a buffer, it’s used as the\n * path.  In all other cases, the options are passed through\n * to `vfile()`. */\nfunction toVFile(options) {\n  if (typeof options === 'string' || buffer(options)) {\n    options = {path: String(options)};\n  }\n\n  return vfile(options);\n}\n","'use strict';\n\n/* Expose. */\nmodule.exports = trough;\n\n/* Methods. */\nvar slice = [].slice;\n\n/* Create new middleware. */\nfunction trough() {\n  var fns = [];\n  var middleware = {};\n\n  middleware.run = run;\n  middleware.use = use;\n\n  return middleware;\n\n  /* Run `fns`.  Last argument must be\n   * a completion handler. */\n  function run() {\n    var index = -1;\n    var input = slice.call(arguments, 0, -1);\n    var done = arguments[arguments.length - 1];\n\n    if (typeof done !== 'function') {\n      throw new Error('Expected function as last argument, not ' + done);\n    }\n\n    next.apply(null, [null].concat(input));\n\n    /* Run the next `fn`, if any. */\n    function next(err) {\n      var fn = fns[++index];\n      var params = slice.call(arguments, 0);\n      var values = params.slice(1);\n      var length = input.length;\n      var pos = -1;\n\n      if (err) {\n        done(err);\n        return;\n      }\n\n      /* Copy non-nully input into values. */\n      while (++pos < length) {\n        if (values[pos] === null || values[pos] === undefined) {\n          values[pos] = input[pos];\n        }\n      }\n\n      input = values;\n\n      /* Next or done. */\n      if (fn) {\n        wrap(fn, next).apply(null, input);\n      } else {\n        done.apply(null, [null].concat(input));\n      }\n    }\n  }\n\n  /* Add `fn` to the list. */\n  function use(fn) {\n    if (typeof fn !== 'function') {\n      throw new Error('Expected `fn` to be a function, not ' + fn);\n    }\n\n    fns.push(fn);\n\n    return middleware;\n  }\n}\n\n/* Wrap `fn`.  Can be sync or async; return a promise,\n * receive a completion handler, return new values and\n * errors. */\nfunction wrap(fn, next) {\n  var invoked;\n\n  return wrapped;\n\n  function wrapped() {\n    var params = slice.call(arguments, 0);\n    var callback = fn.length > params.length;\n    var result;\n\n    if (callback) {\n      params.push(done);\n    }\n\n    try {\n      result = fn.apply(null, params);\n    } catch (err) {\n      /* Well, this is quite the pickle.  `fn` received\n       * a callback and invoked it (thus continuing the\n       * pipeline), but later also threw an error.\n       * We’re not about to restart the pipeline again,\n       * so the only thing left to do is to throw the\n       * thing instea. */\n      if (callback && invoked) {\n        throw err;\n      }\n\n      return done(err);\n    }\n\n    if (!callback) {\n      if (result && typeof result.then === 'function') {\n        result.then(then, done);\n      } else if (result instanceof Error) {\n        done(result);\n      } else {\n        then(result);\n      }\n    }\n  }\n\n  /* Invoke `next`, only once. */\n  function done() {\n    if (!invoked) {\n      invoked = true;\n\n      next.apply(null, arguments);\n    }\n  }\n\n  /* Invoke `done` with one value.\n   * Tracks if an error is passed, too. */\n  function then(value) {\n    done(null, value);\n  }\n}\n","/**\n * @author Titus Wormer\n * @copyright 2015 Titus Wormer\n * @license MIT\n * @module unherit\n * @fileoverview Create a custom constructor which can be modified\n *   without affecting the original class.\n */\n\n'use strict';\n\n/* Dependencies. */\nvar xtend = require('xtend');\nvar inherits = require('inherits');\n\n/* Expose. */\nmodule.exports = unherit;\n\n/**\n * Create a custom constructor which can be modified\n * without affecting the original class.\n *\n * @param {Function} Super - Super-class.\n * @return {Function} - Constructor acting like `Super`,\n *   which can be modified without affecting the original\n *   class.\n */\nfunction unherit(Super) {\n  var result;\n  var key;\n  var value;\n\n  inherits(Of, Super);\n  inherits(From, Of);\n\n  /* Clone values. */\n  result = Of.prototype;\n\n  for (key in result) {\n    value = result[key];\n\n    if (value && typeof value === 'object') {\n      result[key] = 'concat' in value ? value.concat() : xtend(value);\n    }\n  }\n\n  return Of;\n\n  /**\n   * Constructor accepting a single argument,\n   * which itself is an `arguments` object.\n   */\n  function From(parameters) {\n    return Super.apply(this, parameters);\n  }\n\n  /**\n   * Constructor accepting variadic arguments.\n   */\n  function Of() {\n    if (!(this instanceof Of)) {\n      return new From(arguments);\n    }\n\n    return Super.apply(this, arguments);\n  }\n}\n","'use strict';\n\n/* Dependencies. */\nvar extend = require('extend');\nvar bail = require('bail');\nvar vfile = require('vfile');\nvar trough = require('trough');\nvar string = require('x-is-string');\nvar func = require('x-is-function');\nvar plain = require('is-plain-obj');\n\n/* Expose a frozen processor. */\nmodule.exports = unified().freeze();\n\nvar slice = [].slice;\nvar own = {}.hasOwnProperty;\n\n/* Process pipeline. */\nvar pipeline = trough().use(pipelineParse).use(pipelineRun).use(pipelineStringify);\n\nfunction pipelineParse(p, ctx) {\n  ctx.tree = p.parse(ctx.file);\n}\n\nfunction pipelineRun(p, ctx, next) {\n  p.run(ctx.tree, ctx.file, done);\n\n  function done(err, tree, file) {\n    if (err) {\n      next(err);\n    } else {\n      ctx.tree = tree;\n      ctx.file = file;\n      next();\n    }\n  }\n}\n\nfunction pipelineStringify(p, ctx) {\n  ctx.file.contents = p.stringify(ctx.tree, ctx.file);\n}\n\n/* Function to create the first processor. */\nfunction unified() {\n  var attachers = [];\n  var transformers = trough();\n  var namespace = {};\n  var frozen = false;\n  var freezeIndex = -1;\n\n  /* Data management. */\n  processor.data = data;\n\n  /* Lock. */\n  processor.freeze = freeze;\n\n  /* Plug-ins. */\n  processor.attachers = attachers;\n  processor.use = use;\n\n  /* API. */\n  processor.parse = parse;\n  processor.stringify = stringify;\n  processor.run = run;\n  processor.runSync = runSync;\n  processor.process = process;\n  processor.processSync = processSync;\n\n  /* Expose. */\n  return processor;\n\n  /* Create a new processor based on the processor\n   * in the current scope. */\n  function processor() {\n    var destination = unified();\n    var length = attachers.length;\n    var index = -1;\n\n    while (++index < length) {\n      destination.use.apply(null, attachers[index]);\n    }\n\n    destination.data(extend(true, {}, namespace));\n\n    return destination;\n  }\n\n  /* Freeze: used to signal a processor that has finished\n   * configuration.\n   *\n   * For example, take unified itself.  It’s frozen.\n   * Plug-ins should not be added to it.  Rather, it should\n   * be extended, by invoking it, before modifying it.\n   *\n   * In essence, always invoke this when exporting a\n   * processor. */\n  function freeze() {\n    var values;\n    var plugin;\n    var options;\n    var transformer;\n\n    if (frozen) {\n      return processor;\n    }\n\n    while (++freezeIndex < attachers.length) {\n      values = attachers[freezeIndex];\n      plugin = values[0];\n      options = values[1];\n      transformer = null;\n\n      if (options === false) {\n        continue;\n      }\n\n      if (options === true) {\n        values[1] = undefined;\n      }\n\n      transformer = plugin.apply(processor, values.slice(1));\n\n      if (func(transformer)) {\n        transformers.use(transformer);\n      }\n    }\n\n    frozen = true;\n    freezeIndex = Infinity;\n\n    return processor;\n  }\n\n  /* Data management.\n   * Getter / setter for processor-specific informtion. */\n  function data(key, value) {\n    if (string(key)) {\n      /* Set `key`. */\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen);\n\n        namespace[key] = value;\n\n        return processor;\n      }\n\n      /* Get `key`. */\n      return (own.call(namespace, key) && namespace[key]) || null;\n    }\n\n    /* Set space. */\n    if (key) {\n      assertUnfrozen('data', frozen);\n      namespace = key;\n      return processor;\n    }\n\n    /* Get space. */\n    return namespace;\n  }\n\n  /* Plug-in management.\n   *\n   * Pass it:\n   * *   an attacher and options,\n   * *   a preset,\n   * *   a list of presets, attachers, and arguments (list\n   *     of attachers and options). */\n  function use(value) {\n    var settings;\n\n    assertUnfrozen('use', frozen);\n\n    if (value === null || value === undefined) {\n      /* Empty */\n    } else if (func(value)) {\n      addPlugin.apply(null, arguments);\n    } else if (typeof value === 'object') {\n      if ('length' in value) {\n        addList(value);\n      } else {\n        addPreset(value);\n      }\n    } else {\n      throw new Error('Expected usable value, not `' + value + '`');\n    }\n\n    if (settings) {\n      namespace.settings = extend(namespace.settings || {}, settings);\n    }\n\n    return processor;\n\n    function addPreset(result) {\n      addList(result.plugins);\n\n      if (result.settings) {\n        settings = extend(settings || {}, result.settings);\n      }\n    }\n\n    function add(value) {\n      if (func(value)) {\n        addPlugin(value);\n      } else if (typeof value === 'object') {\n        if ('length' in value) {\n          addPlugin.apply(null, value);\n        } else {\n          addPreset(value);\n        }\n      } else {\n        throw new Error('Expected usable value, not `' + value + '`');\n      }\n    }\n\n    function addList(plugins) {\n      var length;\n      var index;\n\n      if (plugins === null || plugins === undefined) {\n        /* Empty */\n      } else if (typeof plugins === 'object' && 'length' in plugins) {\n        length = plugins.length;\n        index = -1;\n\n        while (++index < length) {\n          add(plugins[index]);\n        }\n      } else {\n        throw new Error('Expected a list of plugins, not `' + plugins + '`');\n      }\n    }\n\n    function addPlugin(plugin, value) {\n      var entry = find(plugin);\n\n      if (entry) {\n        if (plain(entry[1]) && plain(value)) {\n          value = extend(entry[1], value);\n        }\n\n        entry[1] = value;\n      } else {\n        attachers.push(slice.call(arguments));\n      }\n    }\n  }\n\n  function find(plugin) {\n    var length = attachers.length;\n    var index = -1;\n    var entry;\n\n    while (++index < length) {\n      entry = attachers[index];\n\n      if (entry[0] === plugin) {\n        return entry;\n      }\n    }\n  }\n\n  /* Parse a file (in string or VFile representation)\n   * into a Unist node using the `Parser` on the\n   * processor. */\n  function parse(doc) {\n    var file = vfile(doc);\n    var Parser;\n\n    freeze();\n    Parser = processor.Parser;\n    assertParser('parse', Parser);\n\n    if (newable(Parser)) {\n      return new Parser(String(file), file).parse();\n    }\n\n    return Parser(String(file), file); // eslint-disable-line new-cap\n  }\n\n  /* Run transforms on a Unist node representation of a file\n   * (in string or VFile representation), async. */\n  function run(node, file, cb) {\n    assertNode(node);\n    freeze();\n\n    if (!cb && func(file)) {\n      cb = file;\n      file = null;\n    }\n\n    if (!cb) {\n      return new Promise(executor);\n    }\n\n    executor(null, cb);\n\n    function executor(resolve, reject) {\n      transformers.run(node, vfile(file), done);\n\n      function done(err, tree, file) {\n        tree = tree || node;\n        if (err) {\n          reject(err);\n        } else if (resolve) {\n          resolve(tree);\n        } else {\n          cb(null, tree, file);\n        }\n      }\n    }\n  }\n\n  /* Run transforms on a Unist node representation of a file\n   * (in string or VFile representation), sync. */\n  function runSync(node, file) {\n    var complete = false;\n    var result;\n\n    run(node, file, done);\n\n    assertDone('runSync', 'run', complete);\n\n    return result;\n\n    function done(err, tree) {\n      complete = true;\n      bail(err);\n      result = tree;\n    }\n  }\n\n  /* Stringify a Unist node representation of a file\n   * (in string or VFile representation) into a string\n   * using the `Compiler` on the processor. */\n  function stringify(node, doc) {\n    var file = vfile(doc);\n    var Compiler;\n\n    freeze();\n    Compiler = processor.Compiler;\n    assertCompiler('stringify', Compiler);\n    assertNode(node);\n\n    if (newable(Compiler)) {\n      return new Compiler(node, file).compile();\n    }\n\n    return Compiler(node, file); // eslint-disable-line new-cap\n  }\n\n  /* Parse a file (in string or VFile representation)\n   * into a Unist node using the `Parser` on the processor,\n   * then run transforms on that node, and compile the\n   * resulting node using the `Compiler` on the processor,\n   * and store that result on the VFile. */\n  function process(doc, cb) {\n    freeze();\n    assertParser('process', processor.Parser);\n    assertCompiler('process', processor.Compiler);\n\n    if (!cb) {\n      return new Promise(executor);\n    }\n\n    executor(null, cb);\n\n    function executor(resolve, reject) {\n      var file = vfile(doc);\n\n      pipeline.run(processor, {file: file}, done);\n\n      function done(err) {\n        if (err) {\n          reject(err);\n        } else if (resolve) {\n          resolve(file);\n        } else {\n          cb(null, file);\n        }\n      }\n    }\n  }\n\n  /* Process the given document (in string or VFile\n   * representation), sync. */\n  function processSync(doc) {\n    var complete = false;\n    var file;\n\n    freeze();\n    assertParser('processSync', processor.Parser);\n    assertCompiler('processSync', processor.Compiler);\n    file = vfile(doc);\n\n    process(file, done);\n\n    assertDone('processSync', 'process', complete);\n\n    return file;\n\n    function done(err) {\n      complete = true;\n      bail(err);\n    }\n  }\n}\n\n/* Check if `func` is a constructor. */\nfunction newable(value) {\n  return func(value) && keys(value.prototype);\n}\n\n/* Check if `value` is an object with keys. */\nfunction keys(value) {\n  var key;\n  for (key in value) {\n    return true;\n  }\n  return false;\n}\n\n/* Assert a parser is available. */\nfunction assertParser(name, Parser) {\n  if (!func(Parser)) {\n    throw new Error('Cannot `' + name + '` without `Parser`');\n  }\n}\n\n/* Assert a compiler is available. */\nfunction assertCompiler(name, Compiler) {\n  if (!func(Compiler)) {\n    throw new Error('Cannot `' + name + '` without `Compiler`');\n  }\n}\n\n/* Assert the processor is not frozen. */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot invoke `' + name + '` on a frozen processor.\\n' +\n      'Create a new processor first, by invoking it: ' +\n      'use `processor()` instead of `processor`.'\n    );\n  }\n}\n\n/* Assert `node` is a Unist node. */\nfunction assertNode(node) {\n  if (!node || !string(node.type)) {\n    throw new Error('Expected node, got `' + node + '`');\n  }\n}\n\n/* Assert that `complete` is `true`. */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error('`' + name + '` finished async. Use `' + asyncName + '` instead');\n  }\n}\n","'use strict';\n\nvar iterate = require('array-iterate');\n\nmodule.exports = modifierFactory;\n\n/* Turn `callback` into a child-modifier accepting a parent.\n * See `array-iterate` for more info. */\nfunction modifierFactory(callback) {\n  return iteratorFactory(wrapperFactory(callback));\n}\n\n/* Turn `callback` into a `iterator' accepting a parent. */\nfunction iteratorFactory(callback) {\n  return iterator;\n\n  function iterator(parent) {\n    var children = parent && parent.children;\n\n    if (!children) {\n      throw new Error('Missing children in `parent` for `modifier`');\n    }\n\n    return iterate(children, callback, parent);\n  }\n}\n\n/* Pass the context as the third argument to `callback`. */\nfunction wrapperFactory(callback) {\n  return wrapper;\n\n  function wrapper(value, index) {\n    return callback(value, index, this);\n  }\n}\n","'use strict';\n\nvar own = {}.hasOwnProperty;\n\nmodule.exports = stringify;\n\nfunction stringify(value) {\n  /* Nothing. */\n  if (!value || typeof value !== 'object') {\n    return null;\n  }\n\n  /* Node. */\n  if (own.call(value, 'position') || own.call(value, 'type')) {\n    return location(value.position);\n  }\n\n  /* Location. */\n  if (own.call(value, 'start') || own.call(value, 'end')) {\n    return location(value);\n  }\n\n  /* Position. */\n  if (own.call(value, 'line') || own.call(value, 'column')) {\n    return position(value);\n  }\n\n  /* ? */\n  return null;\n}\n\nfunction position(pos) {\n  if (!pos || typeof pos !== 'object') {\n    pos = {};\n  }\n\n  return index(pos.line) + ':' + index(pos.column);\n}\n\nfunction location(loc) {\n  if (!loc || typeof loc !== 'object') {\n    loc = {};\n  }\n\n  return position(loc.start) + '-' + position(loc.end);\n}\n\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1;\n}\n","'use strict';\n\n/* Expose. */\nmodule.exports = visitorFactory;\n\n/* Turns `callback` into a child-visitor accepting a parent. */\nfunction visitorFactory(callback) {\n  return visitor;\n\n  /* Visit `parent`, invoking `callback` for each child. */\n  function visitor(parent) {\n    var index = -1;\n    var children = parent && parent.children;\n\n    if (!children) {\n      throw new Error('Missing children in `parent` for `visitor`');\n    }\n\n    while (++index in children) {\n      callback(children[index], index, parent);\n    }\n  }\n}\n","'use strict';\n\nvar stringify = require('unist-util-stringify-position');\n\nmodule.exports = VMessage;\n\n/* Inherit from `Error#`. */\nfunction VMessagePrototype() {}\nVMessagePrototype.prototype = Error.prototype;\nVMessage.prototype = new VMessagePrototype();\n\n/* Message properties. */\nvar proto = VMessage.prototype;\n\nproto.file = '';\nproto.name = '';\nproto.reason = '';\nproto.message = '';\nproto.stack = '';\nproto.fatal = null;\nproto.column = null;\nproto.line = null;\n\n/* Construct a new VMessage.\n *\n * Note: We cannot invoke `Error` on the created context,\n * as that adds readonly `line` and `column` attributes on\n * Safari 9, thus throwing and failing the data. */\nfunction VMessage(reason, position, origin) {\n  var parts;\n  var range;\n  var location;\n\n  if (typeof position === 'string') {\n    origin = position;\n    position = null;\n  }\n\n  parts = parseOrigin(origin);\n  range = stringify(position) || '1:1';\n\n  location = {\n    start: {line: null, column: null},\n    end: {line: null, column: null}\n  };\n\n  /* Node. */\n  if (position && position.position) {\n    position = position.position;\n  }\n\n  if (position) {\n    /* Position. */\n    if (position.start) {\n      location = position;\n      position = position.start;\n    } else {\n      /* Point. */\n      location.start = position;\n    }\n  }\n\n  if (reason.stack) {\n    this.stack = reason.stack;\n    reason = reason.message;\n  }\n\n  this.message = reason;\n  this.name = range;\n  this.reason = reason;\n  this.line = position ? position.line : null;\n  this.column = position ? position.column : null;\n  this.location = location;\n  this.source = parts[0];\n  this.ruleId = parts[1];\n}\n\nfunction parseOrigin(origin) {\n  var result = [null, null];\n  var index;\n\n  if (typeof origin === 'string') {\n    index = origin.indexOf(':');\n\n    if (index === -1) {\n      result[1] = origin;\n    } else {\n      result[0] = origin.slice(0, index);\n      result[1] = origin.slice(index + 1);\n    }\n  }\n\n  return result;\n}\n","'use strict';\n\nvar path = require('path');\nvar replace = require('replace-ext');\nvar buffer = require('is-buffer');\n\nmodule.exports = VFile;\n\nvar own = {}.hasOwnProperty;\nvar proto = VFile.prototype;\n\nproto.toString = toString;\n\n/* Order of setting (least specific to most), we need this because\n * otherwise `{stem: 'a', path: '~/b.js'}` would throw, as a path\n * is needed before a stem can be set. */\nvar order = [\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n];\n\n/* Construct a new file. */\nfunction VFile(options) {\n  var prop;\n  var index;\n  var length;\n\n  if (!options) {\n    options = {};\n  } else if (typeof options === 'string' || buffer(options)) {\n    options = {contents: options};\n  } else if ('message' in options && 'messages' in options) {\n    return options;\n  }\n\n  if (!(this instanceof VFile)) {\n    return new VFile(options);\n  }\n\n  this.data = {};\n  this.messages = [];\n  this.history = [];\n  this.cwd = process.cwd();\n\n  /* Set path related properties in the correct order. */\n  index = -1;\n  length = order.length;\n\n  while (++index < length) {\n    prop = order[index];\n\n    if (own.call(options, prop)) {\n      this[prop] = options[prop];\n    }\n  }\n\n  /* Set non-path related properties. */\n  for (prop in options) {\n    if (order.indexOf(prop) === -1) {\n      this[prop] = options[prop];\n    }\n  }\n}\n\n/* Access full path (`~/index.min.js`). */\nObject.defineProperty(proto, 'path', {\n  get: function () {\n    return this.history[this.history.length - 1];\n  },\n  set: function (path) {\n    assertNonEmpty(path, 'path');\n\n    if (path !== this.path) {\n      this.history.push(path);\n    }\n  }\n});\n\n/* Access parent path (`~`). */\nObject.defineProperty(proto, 'dirname', {\n  get: function () {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined;\n  },\n  set: function (dirname) {\n    assertPath(this.path, 'dirname');\n    this.path = path.join(dirname || '', this.basename);\n  }\n});\n\n/* Access basename (`index.min.js`). */\nObject.defineProperty(proto, 'basename', {\n  get: function () {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined;\n  },\n  set: function (basename) {\n    assertNonEmpty(basename, 'basename');\n    assertPart(basename, 'basename');\n    this.path = path.join(this.dirname || '', basename);\n  }\n});\n\n/* Access extname (`.js`). */\nObject.defineProperty(proto, 'extname', {\n  get: function () {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined;\n  },\n  set: function (extname) {\n    var ext = extname || '';\n\n    assertPart(ext, 'extname');\n    assertPath(this.path, 'extname');\n\n    if (ext) {\n      if (ext.charAt(0) !== '.') {\n        throw new Error('`extname` must start with `.`');\n      }\n\n      if (ext.indexOf('.', 1) !== -1) {\n        throw new Error('`extname` cannot contain multiple dots');\n      }\n    }\n\n    this.path = replace(this.path, ext);\n  }\n});\n\n/* Access stem (`index.min`). */\nObject.defineProperty(proto, 'stem', {\n  get: function () {\n    return typeof this.path === 'string' ? path.basename(this.path, this.extname) : undefined;\n  },\n  set: function (stem) {\n    assertNonEmpty(stem, 'stem');\n    assertPart(stem, 'stem');\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''));\n  }\n});\n\n/* Get the value of the file. */\nfunction toString(encoding) {\n  var value = this.contents || '';\n  return buffer(value) ? value.toString(encoding) : String(value);\n}\n\n/* Assert that `part` is not a path (i.e., does\n * not contain `path.sep`). */\nfunction assertPart(part, name) {\n  if (part.indexOf(path.sep) !== -1) {\n    throw new Error('`' + name + '` cannot be a path: did not expect `' + path.sep + '`');\n  }\n}\n\n/* Assert that `part` is not empty. */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty');\n  }\n}\n\n/* Assert `path` exists. */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too');\n  }\n}\n","'use strict';\n\nvar VMessage = require('vfile-message');\nvar VFile = require('./core.js');\n\nmodule.exports = VFile;\n\nvar proto = VFile.prototype;\n\nproto.message = message;\nproto.info = info;\nproto.fail = fail;\n\n/* Slight backwards compatibility.  Remove in the future. */\nproto.warn = message;\n\n/* Create a message with `reason` at `position`.\n * When an error is passed in as `reason`, copies the stack. */\nfunction message(reason, position, origin) {\n  var filePath = this.path;\n  var message = new VMessage(reason, position, origin);\n\n  if (filePath) {\n    message.name = filePath + ':' + message.name;\n    message.file = filePath;\n  }\n\n  message.fatal = false;\n\n  this.messages.push(message);\n\n  return message;\n}\n\n/* Fail. Creates a vmessage, associates it with the file,\n * and throws it. */\nfunction fail() {\n  var message = this.message.apply(this, arguments);\n\n  message.fatal = true;\n\n  throw message;\n}\n\n/* Info. Creates a vmessage, associates it with the file,\n * and marks the fatality as null. */\nfunction info() {\n  var message = this.message.apply(this, arguments);\n\n  message.fatal = null;\n\n  return message;\n}\n","'use strict';\n\nvar path = require('path');\n\nfunction replaceExt(npath, ext) {\n  if (typeof npath !== 'string') {\n    return npath;\n  }\n\n  if (npath.length === 0) {\n    return npath;\n  }\n\n  var nFileName = path.basename(npath, path.extname(npath)) + ext;\n  return path.join(path.dirname(npath), nFileName);\n}\n\nmodule.exports = replaceExt;\n","module.exports = function isFunction (fn) {\n  return Object.prototype.toString.call(fn) === '[object Function]'\n}\n","var toString = Object.prototype.toString\n\nmodule.exports = isString\n\nfunction isString(obj) {\n    return toString.call(obj) === \"[object String]\"\n}\n","module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n","'use strict';\n\nconst vfile = require('to-vfile');\nconst unified = require('unified');\nconst english = require('retext-english');\nconst stringify = require('retext-stringify');\n\n\nmodule.exports = {vfile, unified, english, stringify};\n"]}