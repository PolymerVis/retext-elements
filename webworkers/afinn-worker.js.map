{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/array-iterate/index.js","node_modules/bail/index.js","node_modules/extend/index.js","node_modules/inherits/inherits_browser.js","node_modules/is-buffer/index.js","node_modules/is-plain-obj/index.js","node_modules/nlcst-to-string/index.js","node_modules/parse-english/index.js","node_modules/parse-latin/index.js","node_modules/parse-latin/lib/expressions.js","node_modules/parse-latin/lib/index.js","node_modules/parse-latin/lib/parser.js","node_modules/parse-latin/lib/plugin/break-implicit-sentences.js","node_modules/parse-latin/lib/plugin/make-final-white-space-siblings.js","node_modules/parse-latin/lib/plugin/make-initial-white-space-siblings.js","node_modules/parse-latin/lib/plugin/merge-affix-exceptions.js","node_modules/parse-latin/lib/plugin/merge-affix-symbol.js","node_modules/parse-latin/lib/plugin/merge-final-word-symbol.js","node_modules/parse-latin/lib/plugin/merge-initial-digit-sentences.js","node_modules/parse-latin/lib/plugin/merge-initial-lower-case-letter-sentences.js","node_modules/parse-latin/lib/plugin/merge-initial-word-symbol.js","node_modules/parse-latin/lib/plugin/merge-initialisms.js","node_modules/parse-latin/lib/plugin/merge-inner-word-slash.js","node_modules/parse-latin/lib/plugin/merge-inner-word-symbol.js","node_modules/parse-latin/lib/plugin/merge-non-word-sentences.js","node_modules/parse-latin/lib/plugin/merge-prefix-exceptions.js","node_modules/parse-latin/lib/plugin/merge-remaining-full-stops.js","node_modules/parse-latin/lib/plugin/merge-words.js","node_modules/parse-latin/lib/plugin/patch-position.js","node_modules/parse-latin/lib/plugin/remove-empty-nodes.js","node_modules/parse-latin/lib/tokenizer.js","node_modules/path-browserify/index.js","node_modules/process/browser.js","node_modules/retext-english/index.js","node_modules/retext-sentiment/index.json","node_modules/retext-sentiment/index.js","node_modules/to-vfile/lib/core.js","node_modules/trough/index.js","node_modules/unherit/index.js","node_modules/unified/index.js","node_modules/unist-util-is/index.js","node_modules/unist-util-modify-children/index.js","node_modules/unist-util-stringify-position/index.js","node_modules/unist-util-visit-children/index.js","node_modules/unist-util-visit/index.js","node_modules/vfile-message/index.js","node_modules/vfile/core.js","node_modules/vfile/index.js","node_modules/vfile/node_modules/replace-ext/index.js","node_modules/x-is-function/index.js","node_modules/x-is-string/index.js","node_modules/xtend/immutable.js","src/afinn-worker.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","values","callback","context","result","index","own","hasOwnProperty","err","hasOwn","Object","prototype","toStr","toString","isArray","arr","Array","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","constructor","key","extend","options","name","src","copy","copyIsArray","clone","target","arguments","deep","create","ctor","superCtor","super_","value","enumerable","writable","configurable","TempCtor","isBuffer","readFloatLE","slice","isSlowBuffer","_isBuffer","x","getPrototypeOf","nlcstToString","node","separator","children","sep","type","join","ParseEnglish","doc","file","this","Parser","apply","ParserPrototype","lower","toLowerCase","visitChildren","modifyChildren","proto","tokenizeSentencePlugins","child","sentence","siblings","sibling","other","splice","push","position","end","APOSTROPHE","test","ELISION_PREFIX","ELISION_AFFIX","concat","start","tokenizeParagraphPlugins","paragraph","next","period","word","ABBREVIATION","ABBREVIATION_SENSITIVE","pop","RegExp","affixSymbol","newLine","newLineMulti","terminalMarker","wordSymbolInner","numerical","digitStart","lowerInitial","surrogates","punctuation","whiteSpace","ParseLatin","String","createTextFactory","eat","parent","undefined","noopEat","pluggable","Constructor","run","useFactory","plugins","wareKey","tokenize","parser","tick","left","right","character","prev","SURROGATES","queue","eater","add","tokens","now","line","column","offset","subvalue","pos","before","subvalueLength","lastIndex","charAt","update","WHITE_SPACE","PUNCTUATION","WORD","noopAdd","createParser","expressions","tokenizeSymbol","tokenizeWhiteSpace","tokenizePunctuation","tokenizeSource","tokenizeText","nodes","use","useFirst","parse","tokenizeRoot","tokenizer","delimiter","delimiterType","tokenizerProperty","tail","head","insertion","MULTI_NEW_LINE","shift","previousChild","first","second","AFFIX_SYMBOL","DIGIT","LOWER_INITIAL","unshift","otherChild","isAllDigits","NUMERICAL","prevValue","nextValue","count","C_SLASH","last","INNER_WORD_SYMBOL","ABBREVIATION_PREFIX","grandchild","nextNext","hasFoundDelimiter","TERMINAL_MARKER","patch","childType","expression","normalizeArray","parts","allowAboveRoot","up","filter","xs","res","splitPathRe","splitPath","filename","exec","resolve","resolvedPath","resolvedAbsolute","path","process","cwd","TypeError","split","p","normalize","isAbsolute","trailingSlash","substr","paths","relative","from","to","trim","fromParts","toParts","Math","min","samePartsLength","outputParts","dirname","root","dir","basename","ext","extname","str","len","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","setTimeout","cleanUpNextTick","draining","currentQueue","queueIndex","drainQueue","timeout","marker","cachedClearTimeout","clearTimeout","runClearTimeout","Item","array","noop","nextTick","args","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","chdir","umask","unherit","English","abandon","abandoned","abandons","abducted","abduction","abductions","abhor","abhorred","abhorrent","abhors","abilities","ability","aboard","aborted","aborts","absentee","absentees","absolve","absolved","absolves","absolving","absorbed","abuse","abused","abuses","abusing","abusive","accept","acceptable","acceptance","accepted","accepting","accepts","accessible","accident","accidental","accidentally","accidents","acclaim","acclaimed","accolade","accomplish","accomplished","accomplishes","accomplishment","accomplishments","accusation","accusations","accuse","accused","accuses","accusing","ache","achievable","aching","acquit","acquits","acquitted","acquitting","acrimonious","active","adequate","admire","admired","admires","admiring","admit","admits","admitted","admonish","admonished","adopt","adopts","adorable","adoration","adore","adored","adores","adoring","adoringly","advanced","advantage","advantageous","advantageously","advantages","adventure","adventures","adventurous","adversary","advisable","affected","affection","affectionate","affectionateness","afflicted","affordable","affronted","aficionados","afraid","aggravate","aggravated","aggravates","aggravating","aggression","aggressions","aggressive","aggressiveness","aghast","agog","agonise","agonised","agonises","agonising","agonize","agonized","agonizes","agonizing","agree","agreeable","agreed","agreement","agrees","alarm","alarmed","alarmist","alarmists","alas","alert","alienation","alive","allegation","allegations","allergic","allow","ally","alone","altruistic","amaze","amazed","amazes","amazing","ambitious","ambivalent","amicable","amuse","amused","amusement","amusements","anger","angered","angers","angry","anguish","anguished","animosity","annoy","annoyance","annoyed","annoying","annoys","antagonistic","anti","anticipation","anxiety","anxious","apathetic","apathy","apeshit","apocalyptic","apologise","apologised","apologises","apologising","apologize","apologized","apologizes","apologizing","apology","appalled","appalling","appealing","appease","appeased","appeases","appeasing","applaud","applauded","applauding","applauds","applause","appreciate","appreciated","appreciates","appreciating","appreciation","apprehensive","appropriate","appropriately","approval","approved","approves","ardent","arrest","arrested","arrests","arrogant","arsehole","ashame","ashamed","ass","assassination","assassinations","assault","assaults","asset","assets","assfucking","asshole","astonished","astound","astounded","astounding","astoundingly","astounds","atrocious","atrocity","attack","attacked","attacking","attacks","attract","attracted","attracting","attraction","attractions","attractive","attractively","attractiveness","attracts","audacious","aura","authority","avenge","avenged","avenger","avengers","avenges","avenging","avert","averted","averts","avid","avoid","avoided","avoids","await","awaited","awaits","award","awarded","awards","awesome","awful","awkward","axe","axed","backed","backing","backs","bad","bad luck","badass","badly","badness","bailout","balanced","bamboozle","bamboozled","bamboozles","ban","banish","bankrupt","bankruptcy","bankster","banned","barbarian","barbaric","barbarous","bargain","barrier","bastard","bastards","battle","battled","battles","battling","beaten","beatific","beating","beauties","beautiful","beautifully","beautify","beauty","befit","befitting","belittle","belittled","beloved","benefactor","benefactors","benefit","benefits","benefitted","benefitting","benevolent","bereave","bereaved","bereaves","bereaving","best","best damn","betray","betrayal","betrayed","betraying","betrays","better","bias","biased","big","bitch","bitches","bitter","bitterest","bitterly","bizarre","blackmail","blackmailed","blackmailing","blackmails","blah","blame","blamed","blames","blaming","bless","blesses","blessing","blessings","blind","bliss","blissful","blithe","bloated","block","blockade","blockbuster","blocked","blocking","blocks","bloody","blurry","boastful","bold","boldly","bomb","boost","boosted","boosting","boosts","bore","bored","boring","bother","bothered","bothers","bothersome","boycott","boycotted","boycotting","boycotts","brainwashing","brave","braveness","bravery","bravura","breach","breached","breaches","breaching","breakthrough","breathtaking","bribe","bribed","bribes","bribing","bright","brightest","brightness","brilliance","brilliances","brilliant","brisk","broke","broken","brooding","brutal","brutally","bullied","bullshit","bully","bullying","bummer","buoyant","burden","burdened","burdening","burdens","burglar","burglary","calm","calmed","calming","calms","can't stand","cancel","cancelled","cancelling","cancels","cancer","capabilities","capability","capable","captivated","care","carefree","careful","carefully","carefulness","careless","cares","caring","cashing in","casualty","catastrophe","catastrophic","cautious","celebrate","celebrated","celebrates","celebrating","celebration","celebrations","censor","censored","censors","certain","chagrin","chagrined","challenge","champion","championed","champions","chance","chances","chaos","chaotic","charged","charges","charisma","charitable","charm","charming","charmingly","charmless","chastise","chastised","chastises","chastising","cheat","cheated","cheater","cheaters","cheating","cheats","cheer","cheered","cheerful","cheerfully","cheering","cheerless","cheers","cheery","cherish","cherished","cherishes","cherishing","chic","chide","chided","chides","chiding","childish","chilling","choke","choked","chokes","choking","clarifies","clarity","clash","classy","clean","cleaner","clear","cleared","clearly","clears","clever","clouded","clueless","cock","cocksucker","cocksuckers","cocky","coerced","coercion","collapse","collapsed","collapses","collapsing","collide","collides","colliding","collision","collisions","colluding","combat","combats","comedy","comfort","comfortable","comfortably","comforting","comforts","comic","commend","commended","commit","commitment","commits","committed","committing","compassion","compassionate","compelled","competencies","competent","competitive","complacent","complain","complained","complaining","complains","complaint","complaints","complicating","compliment","complimented","compliments","comprehensive","concerned","conciliate","conciliated","conciliates","conciliating","condemn","condemnation","condemned","condemns","confidence","confident","confidently","conflict","conflicting","conflictive","conflicts","confuse","confused","confusing","congrats","congratulate","congratulation","congratulations","consent","consents","consolable","conspiracy","constipation","constrained","contagion","contagions","contagious","contaminant","contaminants","contaminate","contaminated","contaminates","contaminating","contamination","contaminations","contempt","contemptible","contemptuous","contemptuously","contend","contender","contending","contentious","contestable","controversial","controversially","controversies","controversy","convicted","convince","convinced","convinces","convivial","cool","cool stuff","cornered","corpse","corrupt","corrupted","corrupting","corruption","corrupts","costly","courage","courageous","courageously","courageousness","courteous","courtesy","cover-up","coward","cowardly","coziness","cramp","crap","crappy","crash","crazier","craziest","crazy","creative","crestfallen","cried","cries","crime","crimes","criminal","criminals","criminate","criminated","criminates","crisis","critic","criticise","criticised","criticises","criticising","criticism","criticize","criticized","criticizes","criticizing","critics","critique","crowding","crude","cruel","cruelty","crush","crushed","crushes","crushing","cry","crying","cunning","cunt","curious","curse","cut","cutback","cutbacks","cute","cuts","cutting","cynic","cynical","cynicism","damage","damaged","damages","damaging","damn","damn cute","damn good","damned","damnit","danger","dangerous","dangerously","daredevil","daring","darkest","darkness","dauntless","dazzling","dead","deadening","deadlock","deadly","deafening","dear","dearly","death","deaths","debonair","debt","deceit","deceitful","deceive","deceived","deceives","deceiving","deception","deceptive","decisive","dedicated","dedication","defeat","defeated","defect","defective","defects","defender","defenders","defenseless","defer","deferring","defiant","deficiencies","deficiency","deficient","deficit","deformed","deformities","deformity","defraud","defrauds","deft","defunct","degrade","degraded","degrades","dehumanize","dehumanized","dehumanizes","dehumanizing","deject","dejected","dejecting","dejects","delay","delayed","delectable","delicious","delight","delighted","delightful","delightfully","delighting","delights","demand","demanded","demanding","demands","demonstration","demoralize","demoralized","demoralizes","demoralizing","denial","denials","denied","denier","deniers","denies","denounce","denounces","dent","deny","denying","deplore","deplored","deplores","deploring","deport","deportation","deportations","deported","deporting","deports","depressed","depressing","deprivation","derail","derailed","derails","derelict","deride","derided","derides","deriding","derision","desirable","desire","desired","desirous","despair","despairing","despairs","desperate","desperately","despondent","destroy","destroyed","destroying","destroys","destruction","destructive","detached","detain","detained","detention","deteriorate","deteriorated","deteriorates","deteriorating","determined","deterrent","detract","detracted","detracts","devastate","devastated","devastating","devastation","devastations","devoted","devotion","devotional","diamond","dick","dickhead","die","died","difficult","diffident","dignity","dilemma","dilligence","dipshit","dire","direful","dirt","dirtier","dirtiest","dirty","disabilities","disability","disabling","disadvantage","disadvantaged","disagree","disagreeable","disagreement","disappear","disappeared","disappears","disappoint","disappointed","disappointing","disappointment","disappointments","disappoints","disapproval","disapprovals","disapprove","disapproved","disapproves","disapproving","disaster","disasters","disastrous","disbelieve","discard","discarded","discarding","discards","discernment","discomfort","disconsolate","disconsolation","discontented","discord","discounted","discouraged","discredited","discriminate","discriminated","discriminates","discriminating","discriminatory","disdain","disease","diseases","disgrace","disgraced","disguise","disguised","disguises","disguising","disgust","disgusted","disgustful","disgusting","disheartened","dishonest","disillusioned","disinclined","disjointed","dislike","disliked","dislikes","dismal","dismayed","dismissed","disorder","disorders","disorganized","disoriented","disparage","disparaged","disparages","disparaging","displeased","displeasure","disproportionate","dispute","disputed","disputes","disputing","disqualified","disquiet","disregard","disregarded","disregarding","disregards","disrespect","disrespected","disrupt","disrupted","disrupting","disruption","disruptions","disruptive","disrupts","dissatisfied","distasteful","distinguished","distort","distorted","distorting","distorts","distract","distracted","distraction","distracts","distress","distressed","distresses","distressing","distrust","distrustful","disturb","disturbed","disturbing","disturbs","dithering","diverting","dizzy","dodging","dodgy","does not work","dolorous","donate","donated","donates","donating","donation","dont like","doom","doomed","doubt","doubted","doubtful","doubting","doubts","douche","douchebag","dour","downcast","downer","downhearted","downside","drag","dragged","drags","drained","dread","dreaded","dreadful","dreading","dream","dreams","dreary","droopy","drop","dropped","drown","drowned","drowns","drudgery","drunk","dubious","dud","dull","dumb","dumbass","dump","dumped","dumps","dupe","duped","dupery","durable","dying","dysfunction","eager","earnest","ease","easy","ecstatic","eerie","eery","effective","effectively","effectiveness","effortlessly","elated","elation","elegant","elegantly","embarrass","embarrassed","embarrasses","embarrassing","embarrassment","embezzlement","embittered","embrace","emergency","empathetic","empower","empowerment","emptiness","empty","enchanted","encourage","encouraged","encouragement","encourages","encouraging","endorse","endorsed","endorsement","endorses","enemies","enemy","energetic","engage","engages","engrossed","engrossing","enjoy","enjoyable","enjoyed","enjoying","enjoys","enlighten","enlightened","enlightening","enlightens","ennui","enrage","enraged","enrages","enraging","enrapture","enslave","enslaved","enslaves","ensure","ensuring","enterprising","entertaining","enthral","enthusiastic","entitled","entrusted","envies","envious","environment-friendly","envy","envying","erroneous","error","errors","escape","escapes","escaping","esteem","esteemed","ethical","euphoria","euphoric","evacuate","evacuated","evacuates","evacuating","evacuation","evergreen","evergreening","evergreens","eviction","evil","exacerbate","exacerbated","exacerbates","exacerbating","exaggerate","exaggerated","exaggerates","exaggerating","exasparate","exasperated","exasperates","exasperating","excellence","excellent","excite","excited","excitement","exciting","exclude","excluded","exclusion","exclusive","excruciatingly","excuse","exempt","exhausted","exhilarated","exhilarates","exhilarating","exonerate","exonerated","exonerates","exonerating","expand","expands","expel","expelled","expelling","expels","expertly","exploit","exploited","exploiting","exploits","exploration","explorations","expose","exposed","exposes","exposing","exquisite","extends","extremist","extremists","exuberant","exultant","exultantly","fabulous","fabulously","fad","fag","faggot","faggots","fail","failed","failing","fails","failure","failures","fainthearted","fair","fairness","faith","faithful","fake","faker","fakes","faking","fallen","falling","false","falsely","falsified","falsify","fame","famine","famous","fan","fantastic","farce","fascinate","fascinated","fascinates","fascinating","fascination","fascist","fascists","fatal","fatalities","fatality","fatigue","fatigued","fatigues","fatiguing","favor","favorable","favorably","favored","favorite","favorited","favorites","favors","favour","favourable","favourably","favoured","favourite","favourited","favourites","favours","fear","fearful","fearfully","fearing","fearless","fearlessness","fearsome","fed up","feeble","feeling","felonies","felony","fertile","fervent","fervid","festive","fever","fiasco","fidgety","fight","fighting","filth","filthy","fine","fines","finest","fire","fired","firing","fit","fitness","flagship","flaw","flawed","flawless","flawlessly","flaws","flees","flop","flops","flu","flustered","focused","fond","fondness","fool","foolish","fools","forbid","forbidden","forbidding","forced","foreclosure","foreclosures","forefront","forget","forgetful","forgettable","forgive","forgiving","forgot","forgotten","fortunate","fortunately","fortune","foul","frantic","fraud","frauds","fraudster","fraudsters","fraudulence","fraudulent","freak","free","freedom","freedoms","frenzy","fresh","friend","friendliness","friendly","friendship","fright","frightened","frightening","frikin","frisky","frowning","fruitless","frustrate","frustrated","frustrates","frustrating","frustration","ftw","fuck","fucked","fucker","fuckers","fuckface","fuckhead","fuckin","fucking","fucking amazing","fucking beautiful","fucking cute","fucking fantastic","fucking good","fucking great","fucking hot","fucking love","fucking loves","fucking perfect","fucktard","fud","fuked","fuking","fulfill","fulfilled","fulfillment","fulfills","fuming","funeral","funerals","funky","funnier","funny","furious","futile","gag","gagged","gain","gained","gaining","gains","gallant","gallantly","gallantry","game-changing","garbage","gem","generous","generously","genial","ghastly","ghost","giddy","gift","glad","glamorous","glamourous","glee","gleeful","gloom","gloomy","glorious","glory","glum","god","goddamn","godsend","gold","good","goodlooking","goodmorning","goodness","goodwill","goofiness","goofy","gr8","grace","graceful","gracious","grand","grant","granted","granting","grants","grateful","gratification","grave","gray","great","greater","greatest","greed","greedy","green wash","green washing","greenwash","greenwasher","greenwashers","greenwashing","greet","greeted","greeting","greetings","greets","grey","grief","grieved","grim","gripping","grisly","groan","groaned","groaning","groans","gross","growing","growth","growths","gruesome","guarantee","guilt","guilty","gullibility","gullible","gun","ha","hacked","haha","hahaha","hahahah","hail","hailed","hallelujah","handpicked","handsome","hapless","haplessness","happiest","happiness","happy","harass","harassed","harasses","harassing","harassment","hard","hardier","hardship","hardy","harm","harmed","harmful","harming","harmonious","harmoniously","harmony","harms","harried","harsh","harsher","harshest","harshly","hate","hated","hater","haters","hates","hating","hatred","haunt","haunted","haunting","haunts","havoc","hazardous","headache","healthy","heartbreaking","heartbroken","heartfelt","heartless","heartwarming","heaven","heavenly","heavyhearted","hehe","hell","hellish","help","helpful","helping","helpless","helps","hero","heroes","heroic","hesitant","hesitate","hid","hide","hideous","hides","hiding","highlight","hilarious","hinder","hindrance","hoax","hollow","homeless","homesick","homicide","homicides","honest","honor","honored","honoring","honour","honoured","honouring","hooligan","hooliganism","hooligans","hope","hopeful","hopefully","hopeless","hopelessness","hopes","hoping","horrendous","horrible","horrid","horrific","horrified","hospitalized","hostile","huckster","hug","huge","hugs","humane","humble","humbug","humerous","humiliated","humiliation","humor","humorous","humour","humourous","hunger","hurrah","hurt","hurting","hurts","hypocritical","hysteria","hysterical","hysterics","icky","idiocy","idiot","idiotic","ignorance","ignorant","ignore","ignored","ignores","ill","ill-fated","illegal","illegally","illegitimate","illiteracy","illness","illnesses","illogical","imaginative","imbecile","immobilized","immortal","immune","impair","impaired","impairing","impairment","impairs","impatient","impeachment","impeachments","impede","impeded","impedes","impeding","impedingly","imperfect","importance","important","impose","imposed","imposes","imposing","imposter","impotent","impress","impressed","impresses","impressive","imprisoned","imprisonment","improper","improperly","improve","improved","improvement","improves","improving","inability","inaction","inadequate","inadvertently","inappropriate","incapable","incapacitated","incapacitates","incapacitating","incense","incensed","incenses","incensing","incoherent","incompetence","incompetent","incomplete","incomprehensible","inconsiderate","inconvenience","inconvenient","increase","increased","indecisive","indestructible","indicted","indifference","indifferent","indignant","indignation","indoctrinate","indoctrinated","indoctrinates","indoctrinating","inediable","ineffective","ineffectively","ineffectual","inefficiency","inefficient","inefficiently","inept","ineptitude","inexcusable","inexorable","infantile","infantilized","infatuated","infatuation","infect","infected","infecting","infection","infections","infectious","infects","inferior","infest","infested","infesting","infests","inflamed","inflict","inflicted","inflicting","inflicts","influential","infract","infracted","infracting","infracts","infringement","infuriate","infuriated","infuriates","infuriating","inhibit","inhuman","injured","injuries","injury","injustice","innovate","innovates","innovation","innovative","inoperative","inquisition","inquisitive","insane","insanity","insecure","insensitive","insensitivity","insignificant","insipid","insolvent","insomnia","inspiration","inspirational","inspire","inspired","inspires","inspiring","insufficiency","insufficient","insufficiently","insult","insulted","insulting","insults","intact","integrity","intelligent","intense","interest","interested","interesting","interests","interrogated","interrupt","interrupted","interrupting","interruption","interrupts","intimacy","intimidate","intimidated","intimidates","intimidating","intimidation","intransigence","intransigency","intricate","intrigues","invasion","invincible","invite","inviting","invulnerable","irate","ironic","irony","irrational","irreparable","irreproducible","irresistible","irresistibly","irresolute","irresponsible","irresponsibly","irreversible","irreversibly","irritate","irritated","irritates","irritating","isolated","itchy","jackass","jackasses","jailed","jaunty","jealous","jealousy","jeopardy","jerk","jesus","jewel","jewels","jocular","joke","jokes","jolly","jovial","joy","joyful","joyfully","joyless","joyous","jubilant","jumpy","justice","justifiably","justified","keen","kickback","kickbacks","kidnap","kidnapped","kidnapping","kidnappings","kidnaps","kill","killed","killing","kills","kind","kind of","kinder","kindness","kiss","kudos","lack","lackadaisical","lag","lagged","lagging","lags","lame","landmark","lapse","lapsed","laugh","laughed","laughing","laughs","laughting","launched","lawl","lawsuit","lawsuits","lazy","leadership","leading","leak","leaked","leave","legal","legally","lenient","lethal","lethality","lethargic","lethargy","liar","liars","libelous","lied","lifeless","lifesaver","lighthearted","likable","like","likeable","liked","likers","likes","liking","limitation","limited","limits","litigation","litigious","lively","livid","lmao","lmfao","loathe","loathed","loathes","loathing","loathsome","lobbied","lobby","lobbying","lobbyist","lobbyists","lol","lolol","lololol","lolololol","lonely","lonesome","longing","lool","loom","loomed","looming","looms","loool","looool","loose","looses","loser","losing","loss","losses","lost","lousy","lovable","love","loved","lovelies","lovely","loves","loving","loving-kindness","lowest","loyal","loyalty","luck","luckily","lucky","lucrative","ludicrous","lugubrious","lunatic","lunatics","lurk","lurking","lurks","luxury","macabre","mad","maddening","made-up","madly","madness","magnificent","maladaption","maldevelopment","maltreatment","mandatory","manipulated","manipulating","manipulation","manslaughter","marvel","marvelous","marvels","masterpiece","masterpieces","matter","matters","mature","meaningful","meaningless","medal","mediocrity","meditative","melancholy","memorable","memoriam","menace","menaced","menaces","mercy","merry","mesmerizing","mess","messed","messing up","methodical","methodically","mindless","miracle","mirth","mirthful","mirthfully","misbehave","misbehaved","misbehaves","misbehaving","misbranding","miscast","mischief","mischiefs","misclassified","misclassifies","misclassify","misconduct","misconducted","misconducting","misconducts","miserable","miserably","misery","misfire","misfortune","misgiving","misinformation","misinformed","misinterpreted","mislead","misleaded","misleading","misleads","misplace","misplaced","misplaces","misplacing","mispricing","misread","misreport","misreported","misreporting","misreports","misrepresent","misrepresentation","misrepresentations","misrepresented","misrepresenting","misrepresents","miss","missed","missing","mistake","mistaken","mistakes","mistaking","misunderstand","misunderstanding","misunderstands","misunderstood","misuse","misused","misuses","misusing","moan","moaned","moaning","moans","mock","mocked","mocking","mocks","modernize","modernized","modernizes","modernizing","mongering","monopolize","monopolized","monopolizes","monopolizing","monotone","moody","mope","moping","moron","motherfucker","motherfucking","motivate","motivated","motivating","motivation","mourn","mourned","mournful","mourning","mourns","muddy","mumpish","murder","murderer","murdering","murderous","murders","murky","myth","n00b","naive","narcissism","nasty","natural","naïve","needy","negative","negativity","neglect","neglected","neglecting","neglects","nerves","nervous","nervously","nice","nifty","niggas","nigger","no","no fun","noble","noblest","noisy","non-approved","nonsense","noob","nosey","not good","not working","notable","noticeable","notorious","novel","numb","nurturing","nuts","obliterate","obliterated","obnoxious","obscene","obscenity","obsessed","obsolete","obstacle","obstacles","obstinate","obstruct","obstructed","obstructing","obstruction","obstructs","odd","offence","offences","offend","offended","offender","offending","offends","offense","offenses","offensive","offensively","offline","oks","ominous","once-in-a-lifetime","oops","opportunities","opportunity","oppressed","oppression","oppressions","oppressive","optimism","optimistic","optionless","ostracize","ostracized","ostracizes","ouch","outage","outages","outbreak","outbreaks","outcry","outmaneuvered","outnumbered","outrage","outraged","outrageous","outreach","outstanding","overjoyed","overload","overlooked","overprotective","overran","overreact","overreacted","overreacting","overreaction","overreacts","oversell","overselling","oversells","oversight","oversimplification","oversimplified","oversimplifies","oversimplify","oversold","overstatement","overstatements","overweight","overwrought","oxymoron","pain","pained","painful","panic","panicked","panics","paradise","paradox","pardon","pardoned","pardoning","pardons","parley","passion","passionate","passive","passively","pathetic","pay","peace","peaceful","peacefully","penalize","penalized","penalizes","penalizing","penalty","pensive","perfect","perfected","perfection","perfectly","perfects","peril","perjury","perpetrated","perpetrator","perpetrators","perplexed","persecute","persecuted","persecutes","persecuting","perturbed","pervert","pesky","pessimism","pessimistic","petrified","philanthropy","phobic","picturesque","pileup","pillage","pique","piqued","piss","pissed","pissing","piteous","pitied","pity","plague","plagued","plagues","plaguing","playful","pleasant","please","pleased","pleasurable","pleasure","plodding","poignant","pointless","poised","poison","poisoned","poisons","polished","polite","politeness","pollutant","pollute","polluted","polluter","polluters","pollutes","pollution","poor","poorer","poorest","poorly","popular","popularity","positive","positively","possessive","post-traumatic","postpone","postponed","postpones","postponing","poverty","powerful","powerless","praise","praised","praises","praising","pray","praying","prays","prblm","prblms","predatory","prepared","pressure","pressured","pretend","pretending","pretends","pretty","prevent","prevented","preventing","prevents","prick","prison","prisoner","prisoners","privileged","proactive","problem","problems","profit","profitable","profiteer","profits","progress","prohibit","prohibits","prominent","promise","promised","promises","promote","promoted","promotes","promoting","promptly","propaganda","prosecute","prosecuted","prosecutes","prosecution","prospect","prospects","prosperity","prosperous","protect","protected","protects","protest","protesters","protesting","protests","proud","proudly","provoke","provoked","provokes","provoking","prudence","pseudoscience","psychopathic","punish","punished","punishes","punishing","punitive","pure","purest","purposeful","pushy","puzzled","quaking","qualities","quality","questionable","questioned","questioning","racism","racist","racists","rage","rageful","rainy","rant","ranter","ranters","rants","rape","raped","rapist","rapture","raptured","raptures","rapturous","rash","ratified","reach","reached","reaches","reaching","reassure","reassured","reassures","reassuring","rebel","rebellion","rebels","recession","reckless","recognition","recommend","recommended","recommends","redeemed","refine","refined","refines","refreshingly","refuse","refused","refuses","refusing","regret","regretful","regrets","regretted","regretting","reigning","reject","rejected","rejecting","rejection","rejects","rejoice","rejoiced","rejoices","rejoicing","relaxed","relentless","reliability","reliable","reliably","reliant","relieve","relieved","relieves","relieving","relishing","remarkable","remorse","repellent","repercussion","repercussions","reprimand","reprimanded","reprimanding","reprimands","repulse","repulsed","repulsive","rescue","rescued","rescues","resentful","resign","resigned","resigning","resigns","resolute","resolution","resolved","resolves","resolving","respect","respected","respects","responsibility","responsible","responsive","restful","restless","restore","restored","restores","restoring","restrict","restricted","restricting","restriction","restrictive","restricts","retained","retard","retarded","retreat","revenge","revengeful","revered","revive","revives","revolting","reward","rewarded","rewarding","rewards","rich","richly","ridiculous","rig","rigged","right direction","righteousness","rightful","rightfully","rigorous","rigorously","riot","riots","rise","rises","risk","risks","risky","riveting","rob","robber","robed","robing","robs","robust","rofl","roflcopter","roflmao","romance","romantical","romantically","rose","rotfl","rotflmfao","rotflol","rotten","rude","ruin","ruined","ruining","ruins","sabotage","sad","sadden","saddened","sadly","safe","safely","safer","safety","salient","salute","saluted","salutes","saluting","salvation","sappy","sarcastic","satisfied","savange","savanges","save","saved","savings","scam","scams","scandal","scandalous","scandals","scapegoat","scapegoats","scar","scare","scared","scars","scary","sceptical","scold","scoop","scorn","scornful","scream","screamed","screaming","screams","screwed","screwed up","scum","scumbag","seamless","seamlessly","secure","secured","secures","sedition","seditious","seduced","self-abuse","self-confident","self-contradictory","self-deluded","selfish","selfishness","sentenced","sentences","sentencing","serene","settlement","settlements","severe","severely","sexist","sexistic","sexy","shaky","shame","shamed","shameful","share","shared","shares","shattered","shit","shithead","shitty","shock","shocked","shocking","shocks","shoody","shoot","short-sighted","short-sightedness","shortage","shortages","shrew","shy","sick","sickness","side-effect","side-effects","sigh","significance","significant","silencing","silly","simplicity","sin","sincere","sincerely","sincerest","sincerity","sinful","singleminded","sinister","sins","skeptic","skeptical","skepticism","skeptics","slam","slash","slashed","slashes","slashing","slave","slavery","slaves","sleeplessness","slick","slicker","slickest","slip","sloppy","sluggish","slumping","slut","smart","smarter","smartest","smear","smile","smiled","smiles","smiling","smog","smuggle","smuggled","smuggles","smuggling","sneaky","sneeze","sneezed","sneezes","sneezing","snub","snubbed","snubbing","snubs","sobering","solemn","solid","solidarity","solidified","solidifies","solidify","solidifying","solution","solutions","solve","solved","solves","solving","somber","some kind","son-of-a-bitch","soothe","soothed","soothing","sophisticated","sore","sorrow","sorrowful","sorry","spacious","spam","spammer","spammers","spamming","spark","sparkle","sparkles","sparkling","spearhead","speculative","spirit","spirited","spiritless","spiteful","splendid","spoiled","spoilt","spotless","sprightly","squander","squandered","squandering","squanders","squelched","stab","stabbed","stable","stabs","stall","stalled","stalling","stamina","stampede","stank","startled","startling","starve","starved","starves","starving","steadfast","steal","stealing","steals","stereotype","stereotyped","stifled","stimulate","stimulated","stimulates","stimulating","stingy","stink","stinked","stinker","stinking","stinks","stinky","stole","stolen","stop","stopped","stopping","stops","stout","straight","strange","strangely","strangled","strength","strengthen","strengthened","strengthening","strengthens","strengths","stress","stressed","stressor","stressors","stricken","strike","strikers","strikes","strong","stronger","strongest","struck","struggle","struggled","struggles","struggling","stubborn","stuck","stunned","stunning","stupid","stupidity","stupidly","suave","subpoena","substantial","substantially","subversive","succeed","succeeded","succeeding","succeeds","success","successful","successfully","suck","sucks","sue","sued","sueing","sues","suffer","suffered","sufferer","sufferers","suffering","suffers","suicidal","suicide","suicides","suing","suitable","suited","sulking","sulky","sullen","sunshine","super","superb","superior","support","supported","supporter","supporters","supporting","supportive","supports","supreme","survived","surviving","survivor","suspect","suspected","suspecting","suspects","suspend","suspended","suspicious","sustainability","sustainable","sustainably","swear","swearing","swears","sweet","sweeter","sweetest","swift","swiftly","swindle","swindles","swindling","sympathetic","sympathy","taint","tainted","talent","tard","tarnish","tarnished","tarnishes","tears","tender","tenderness","tense","tension","terrible","terribly","terrific","terrifically","terrified","terror","terrorist","terrorists","terrorize","terrorized","terrorizes","thank","thankful","thanks","thorny","thoughtful","thoughtless","threat","threaten","threatened","threatening","threatens","threats","thrilled","thwart","thwarted","thwarting","thwarts","timid","timorous","tired","tits","tolerance","tolerant","toothless","top","tops","torn","torture","tortured","tortures","torturing","totalitarian","totalitarianism","tout","touted","touting","touts","toxic","tragedies","tragedy","tragic","tranquil","transgress","transgressed","transgresses","transgressing","trap","trapped","traps","trauma","traumatic","travesty","treason","treasonous","treasure","treasures","trembling","tremor","tremors","tremulous","tribulation","tribute","tricked","trickery","triumph","triumphant","troll","trouble","troubled","troubles","troubling","true","trust","trusted","trusts","tumor","twat","tyran","tyrannic","tyrannical","tyrannically","tyrans","ubiquitous","ugh","ugliness","ugly","unable","unacceptable","unappeasable","unappreciated","unapproved","unattractive","unavailable","unavailing","unaware","unbearable","unbelievable","unbelieving","unbiased","uncertain","unclear","uncomfortable","unconcerned","unconfirmed","unconvinced","uncredited","undecided","undercooked","underestimate","underestimated","underestimates","underestimating","undermine","undermined","undermines","undermining","underperform","underperformed","underperforming","underperforms","undeserving","undesirable","uneasy","unemployed","unemployment","unequal","unequaled","unethical","uneventful","unfair","unfavorable","unfit","unfitted","unfocused","unforgivable","unforgiving","unfulfilled","unfunny","ungenerous","ungrateful","unhappiness","unhappy","unhealthy","unhygienic","unified","unimaginative","unimpressed","uninspired","unintelligent","unintentional","uninvolving","united","unjust","unlikely","unlovable","unloved","unmatched","unmotivated","unoriginal","unparliamentary","unpleasant","unpleasantness","unprofessional","unravel","unreleting","unresearched","unsafe","unsatisfied","unscientific","unsecured","unselfish","unsettled","unsold","unsophisticated","unsound","unstable","unstoppable","unsuccessful","unsuccessfully","unsupported","unsure","untarnished","untrue","unwanted","unworthy","uplifting","uproar","upset","upsets","upsetting","uptight","urgent","useful","usefulness","useless","uselessness","vague","validate","validated","validates","validating","vapid","verdict","verdicts","vested","vexation","vexing","vibrant","vicious","victim","victimization","victimize","victimized","victimizes","victimizing","victims","victor","victories","victors","victory","vigilant","vigor","vile","vindicate","vindicated","vindicates","vindicating","violate","violated","violates","violating","violation","violations","violence","violence-related","violent","violently","virtuous","virulent","vision","visionary","visioning","visions","vitality","vitamin","vitriolic","vivacious","vividly","vociferous","vomit","vomited","vomiting","vomits","vulnerability","vulnerable","walkout","walkouts","wanker","want","war","warfare","warm","warmhearted","warmness","warmth","warn","warned","warning","warnings","warns","waste","wasted","wasting","wavering","weak","weakened","weakness","weaknesses","wealth","wealthier","wealthy","weary","weep","weeping","weird","welcome","welcomed","welcomes","well-being","well-championed","well-developed","well-established","well-focused","well-groomed","well-proportioned","whimsical","whitewash","whore","wicked","widowed","willingness","win","winner","winning","wins","winwin","wisdom","wish","wishes","wishing","withdrawal","wits","woebegone","woeful","won","wonderful","wonderfully","woo","woohoo","wooo","woow","worn","worried","worries","worry","worrying","worse","worsen","worsened","worsening","worsens","worshiped","worst","worth","worthless","worthy","wow","wowow","wowww","wrathful","wreck","wrenching","wrong","wrongdoing","wrongdoings","wronged","wrongful","wrongfully","wrongly","wtf","wtff","wtfff","xo","xoxo","xoxoxo","xoxoxoxo","yeah","yearning","yeees","yes","youthful","yucky","yummy","zealot","zealots","zealous","💯","😠","😧","😲","🖤","💙","😊","💔","👏","🤡","😰","😖","😕","🤠","🤞","😢","😿","💘","😞","😥","😵","🤤","😑","🤕","🤒","😨","😳","😦","☹️","🖕","👻","💝","💚","😬","😁","😀","🤝","❤️","😍","😻","💓","💗","🤗","😯","👿","😇","😂","😹","💋","😗","😽","😚","😘","😙","😆","👄","🤥","😷","🤑","🤢","🤓","😐","😶","👌","😮","😔","😣","😾","🙏","👊","💜","😡","🙌","☺️","😌","💞","🤣","🙄","😱","🙀","💩","💀","☠️","😴","😪","🙁","🙂","😄","😸","😃","😺","😈","😏","😼","🤧","😭","💖","😛","😝","😜","😎","😓","😅","🤔","👎","👍","😫","😤","💕","😒","🙃","✌️","😩","😉","😟","💛","😋","🤐",":100:",":angry:",":anguished:",":astonished:",":black_heart:",":blue_heart:",":blush:",":broken_heart:",":clap:",":clown_face:",":cold_sweat:",":confounded:",":confused:",":cowboy_hat_face:",":crossed_fingers:",":cry:",":crying_cat_face:",":cupid:",":disappointed:",":disappointed_relieved:",":dizzy_face:",":drooling_face:",":expressionless:",":face_with_head_bandage:",":face_with_thermometer:",":fearful:",":flushed:",":frowning:",":frowning_face:",":middle_finger:",":ghost:",":gift_heart:",":green_heart:",":grimacing:",":grin:",":grinning:",":handshake:",":heart:",":heart_eyes:",":heart_eyes_cat:",":heartbeat:",":heartpulse:",":hugs:",":hushed:",":imp:",":innocent:",":joy:",":joy_cat:",":kiss:",":kissing:",":kissing_cat:",":kissing_closed_eyes:",":kissing_heart:",":kissing_smiling_eyes:",":laughing:",":lips:",":lying_face:",":mask:",":money_mouth_face:",":nauseated_face:",":nerd_face:",":neutral_face:",":no_mouth:",":ok_hand:",":open_mouth:",":pensive:",":persevere:",":pouting_cat:",":pray:",":fist_oncoming:",":purple_heart:",":rage:",":raised_hands:",":relaxed:",":relieved:",":revolving_hearts:",":rofl:",":roll_eyes:",":scream:",":scream_cat:",":hankey:",":skull:",":skull_and_crossbones:",":sleeping:",":sleepy:",":slightly_frowning_face:",":slightly_smiling_face:",":smile:",":smile_cat:",":smiley:",":smiley_cat:",":smiling_imp:",":smirk:",":smirk_cat:",":sneezing_face:",":sob:",":sparkling_heart:",":stuck_out_tongue:",":stuck_out_tongue_closed_eyes:",":stuck_out_tongue_winking_eye:",":sunglasses:",":sweat:",":sweat_smile:",":thinking:",":-1:",":+1:",":tired_face:",":triumph:",":two_hearts:",":unamused:",":upside_down_face:",":v:",":weary:",":wink:",":worried:",":yellow_heart:",":yum:",":zipper_mouth_face:",">:(",">:[",">:-(",">:-[",">=(",">=[",">=-(",">=-[",":\")",":\"]",":\"D",":-\")",":-\"]",":-\"D","=\")","=\"]","=\"D","=-\")","=-\"]","=-\"D","<\\3","</3",":/",":\\",":-/",":-\\","=/","=\\","=-/","=-\\",":,(",":,[",":,|",":,-(",":,-[",":,-|",":'(",":'[",":'|",":'-(",":'-[",":'-|","=,(","=,[","=,|","=,-(","=,-[","=,-|","='(","='[","='|","='-(","='-[","='-|",":(",":[",":-(",":-[","=(","=[","=-(","=-[","<3","]:(","]:[","]:-(","]:-[","]=(","]=[","]=-(","]=-[","o:)","o:]","o:D","o:-)","o:-]","o:-D","o=)","o=]","o=D","o=-)","o=-]","o=-D","O:)","O:]","O:D","O:-)","O:-]","O:-D","O=)","O=]","O=D","O=-)","O=-]","O=-D","0:)","0:]","0:D","0:-)","0:-]","0:-D","0=)","0=]","0=D","0=-)","0=-]","0=-D",":,)",":,]",":,D",":,-)",":,-]",":,-D",":')",":']",":'D",":'-)",":'-]",":'-D","=,)","=,]","=,D","=,-)","=,-]","=,-D","=')","=']","='D","='-)","='-]","='-D",":*",":-*","=*","=-*","x)","x]","xD","x-)","x-]","x-D","X)","X]","X-)","X-]","X-D",":|",":-|","=|","=-|",":-",":o",":O",":0",":-o",":-O",":-0","=o","=O","=0","=-o","=-O","=-0",":@",":-@","=@","=-@",":D",":-D","=D","=-D",":)",":]",":-)",":-]","=)","=]","=-)","=-]","]:)","]:]","]:D","]:-)","]:-]","]:-D","]=)","]=]","]=D","]=-)","]=-]","]=-D",":,'(",":,'[",":,'-(",":,'-[",":',(",":',[",":',-(",":',-[","=,'(","=,'[","=,'-(","=,'-[","=',(","=',[","=',-(","=',-[",":p",":P",":d",":-p",":-P",":-d","=p","=P","=d","=-p","=-P","=-d","xP","x-p","x-P","x-d","Xp","Xd","X-p","X-P","X-d",";p",";P",";d",";-p",";-P",";-d","8)","8]","8D","8-)","8-]","8-D","B)","B]","B-)","B-]","B-D",",:(",",:[",",:-(",",:-[",",=(",",=[",",=-(",",=-[","':(","':[","':-(","':-[","'=(","'=[","'=-(","'=-[",",:)",",:]",",:D",",:-)",",:-]",",:-D",",=)",",=]",",=D",",=-)",",=-]",",=-D","':)","':]","':D","':-)","':-]","':-D","'=)","'=]","'=D","'=-)","'=-]","'=-D",":$",":s",":z",":S",":Z",":-$",":-s",":-z",":-S",":-Z","=$","=s","=z","=S","=Z","=-$","=-s","=-z","=-S","=-Z",";)",";]",";D",";-)",";-]",";-D","polarity","data","valence","POSITIVE","NEGATIVE","NEUTRAL","classify","visit","polarities","concatenate","indexOf","one","hasNegation","isNegation","done","reverse","concatenateFactory","config","any","buffer","vfile","fns","middleware","fn","input","invoked","then","params","wrap","xtend","inherits","Super","From","parameters","Of","processor","destination","attachers","namespace","freeze","plugin","transformer","frozen","freezeIndex","func","transformers","Infinity","cb","executor","tree","assertNode","Promise","pipeline","assertParser","assertCompiler","Compiler","trough","string","assertUnfrozen","addPreset","addList","settings","addPlugin","entry","find","plain","newable","stringify","compile","runSync","complete","bail","assertDone","processSync","keys","asyncName","ctx","contents","is","hasParent","hasIndex","check","convert","Boolean","typeFactory","ok","tests","checks","results","convertAll","iterate","iteratorFactory","wrapperFactory","location","loc","visitor","step","max","all","VMessagePrototype","VMessage","reason","origin","range","parseOrigin","stack","message","source","ruleId","VFile","prop","messages","history","order","assertPart","part","assertNonEmpty","assertPath","replace","encoding","defineProperty","get","set","stem","filePath","info","npath","nFileName","getData","map","forEach","d","english","sentiment","self","onmessage","text","postMessage","analyze"],"mappings":"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","file":"afinn-worker.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nmodule.exports = iterate;\n\nvar own = {}.hasOwnProperty;\n\nfunction iterate(values, callback, context) {\n  var index = -1;\n  var result;\n\n  if (!values) {\n    throw new Error('Iterate requires that |this| not be ' + values);\n  }\n\n  if (!own.call(values, 'length')) {\n    throw new Error('Iterate requires that |this| has a `length`');\n  }\n\n  if (typeof callback !== 'function') {\n    throw new Error('`callback` must be a function');\n  }\n\n  /* The length might change, so we do not cache it. */\n  while (++index < values.length) {\n    /* Skip missing values. */\n    if (!(index in values)) {\n      continue;\n    }\n\n    result = callback.call(context, values[index], index, values);\n\n    /* If `callback` returns a `number`, move `index` over to\n     * `number`. */\n    if (typeof result === 'number') {\n      /* Make sure that negative numbers do not break the loop. */\n      if (result < 0) {\n        index = 0;\n      }\n\n      index = result - 1;\n    }\n  }\n}\n","'use strict';\n\nmodule.exports = bail;\n\nfunction bail(err) {\n  if (err) {\n    throw err;\n  }\n}\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","'use strict';\nvar toString = Object.prototype.toString;\n\nmodule.exports = function (x) {\n\tvar prototype;\n\treturn toString.call(x) === '[object Object]' && (prototype = Object.getPrototypeOf(x), prototype === null || prototype === Object.getPrototypeOf({}));\n};\n","'use strict';\n\nmodule.exports = nlcstToString;\n\n/* Stringify a NLCST node or list of nodes. */\nfunction nlcstToString(node, separator) {\n  var sep = separator || '';\n  var values;\n  var length;\n  var children;\n\n  if (!node || (!('length' in node) && !node.type)) {\n    throw new Error('Expected node, not `' + node + '`');\n  }\n\n  if (typeof node.value === 'string') {\n    return node.value;\n  }\n\n  children = 'length' in node ? node : node.children;\n  length = children.length;\n\n  /* Shortcut: This is pretty common, and a small performance win. */\n  if (length === 1 && 'value' in children[0]) {\n    return children[0].value;\n  }\n\n  values = [];\n\n  while (length--) {\n    values[length] = nlcstToString(children[length], sep);\n  }\n\n  return values.join(sep);\n}\n","'use strict';\n\nvar Parser = require('parse-latin');\nvar toString = require('nlcst-to-string');\nvar visitChildren = require('unist-util-visit-children');\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = ParseEnglish;\n\n/* Inherit from `ParseLatin`. */\nParserPrototype.prototype = Parser.prototype;\n\nvar proto = new ParserPrototype();\n\nParseEnglish.prototype = proto;\n\n/* Add modifiers to `parser`. */\nproto.tokenizeSentencePlugins = [\n  visitChildren(mergeEnglishElisionExceptions)\n].concat(proto.tokenizeSentencePlugins);\n\nproto.tokenizeParagraphPlugins = [\n  modifyChildren(mergeEnglishPrefixExceptions)\n].concat(proto.tokenizeParagraphPlugins);\n\n/* Transform English natural language into an NLCST-tree. */\nfunction ParseEnglish(doc, file) {\n  if (!(this instanceof ParseEnglish)) {\n    return new ParseEnglish(doc, file);\n  }\n\n  Parser.apply(this, arguments);\n}\n\n/* Constructor to create a `ParseEnglish` prototype. */\nfunction ParserPrototype() {}\n\n/* Match a blacklisted (case-insensitive) abbreviation\n * which when followed by a full-stop does not depict\n * a sentence terminal marker. */\nvar ABBREVIATION = new RegExp(\n  '^(' +\n    /* Business Abbreviations:\n     * Incorporation, Limited company. */\n    'inc|ltd|' +\n\n    /* English unit abbreviations:\n     * - Note that *Metric abbreviations* do not use\n     *   full stops.\n     * - Note that some common plurals are included,\n     *   although units should not be pluralised.\n     *\n     * barrel, cubic, dozen, fluid (ounce), foot, gallon, grain, gross,\n     * inch, karat / knot, pound, mile, ounce, pint, quart, square,\n     * tablespoon, teaspoon, yard. */\n    'bbls?|cu|doz|fl|ft|gal|gr|gro|in|kt|lbs?|mi|oz|pt|qt|sq|tbsp|' +\n    'tsp|yds?|' +\n\n    /* Abbreviations of time references:\n     * seconds, minutes, hours, Monday, Tuesday, *, Wednesday,\n     * Thursday, *, Friday, Saturday, Sunday, January, Februari, March,\n     * April, June, July, August, September, *, October, November,\n     * December. */\n\n    'sec|min|hr|mon|tue|tues|wed|thu|thurs|fri|sat|sun|jan|feb|mar|' +\n    'apr|jun|jul|aug|sep|sept|oct|nov|dec' +\n  ')$'\n  /*\n   * NOTE! There's no `i` flag here because the value to\n   * test against should be all lowercase!\n   */\n);\n\n/* Match a blacklisted (case-sensitive) abbreviation\n * which when followed by a full-stop does not depict\n * a sentence terminal marker. */\nvar ABBREVIATION_SENSITIVE = new RegExp(\n  '^(' +\n    /* Social:\n     * Mister, Mistress, Mistress, woman, Mademoiselle, Madame, Monsieur,\n     * Misters, Mesdames, Junior, Senior, *. */\n    'Mr|Mrs|Miss|Ms|Mss|Mses|Mlle|Mme|M|Messrs|Mmes|Jr|Sr|Snr|' +\n\n    /* Rank and academic:\n     * Doctor, Magister, Attorney, Profesor, Honourable, Reverend,\n     * Father, Monsignor, Sister, Brother, Saint, President,\n     * Superintendent, Representative, Senator. */\n    'Dr|Mgr|Atty|Prof|Hon|Rev|Fr|Msgr|Sr|Br|St|Pres|Supt|Rep|Sen|' +\n\n    /* Rank and military:\n     * Governor, Ambassador, Treasurer, Secretary, Admiral, Brigadier,\n     * General, Commander, Colonel, Captain, Lieutenant, Major,\n     * Sergeant, Petty Officer, Warrant Officer, Purple Heart. */\n    'Gov|Amb|Treas|Sec|Amd|Brig|Gen|Cdr|Col|Capt|Lt|Maj|Sgt|Po|Wo|Ph|' +\n\n    /* Common geographical abbreviations:\n     *\n     * Avenue, Boulevard, Mountain, Road, Building, National, *, Route, *,\n     * County, Park, Square, Drive, Port or Point, Street or State, Fort,\n     * Peninsula, Territory, Highway, Freeway, Parkway. */\n    'Ave|Blvd|Mt|Rd|Bldgs?|Nat|Natl|Rt|Rte|Co|Pk|Sq|Dr|Pt|St|' +\n    'Ft|Pen|Terr|Hwy|Fwy|Pkwy|' +\n\n    /* American state abbreviations:\n     * Alabama, Arizona, Arkansas, California, *, Colorado, *,\n     * Connecticut, Delaware, Florida, Georgia, Idaho, *, Illinois,\n     * Indiana, Iowa, Kansas, *, Kentucky, *, Louisiana, Maine, Maryland,\n     * Massachusetts, Michigan, Minnesota, Mississippi, Missouri, Montana,\n     * Nebraska, *, Nevada, Mexico, Dakota, Oklahoma, *, Oregon,\n     * Pennsylvania, *, *, Tennessee, Texas, Utah, Vermont, Virginia,\n     * Washington, Wisconsin, *, Wyoming. */\n    'Ala|Ariz|Ark|Cal|Calif|Col|Colo|Conn|Del|Fla|Ga|Ida|Id|Ill|Ind|' +\n    'Ia|Kan|Kans|Ken|Ky|La|Me|Md|Mass|Mich|Minn|Miss|Mo|Mont|Neb|' +\n    'Nebr|Nev|Mex|Dak|Okla|Ok|Ore|Penna|Penn|Pa|Tenn|Tex|Ut|Vt|Va|' +\n    'Wash|Wis|Wisc|Wyo|' +\n\n    /* Canadian province abbreviations:\n     * Alberta, Manitoba, Ontario, Quebec, *, Saskatchewan,\n     * Yukon Territory. */\n    'Alta|Man|Ont|Qu\\u00E9|Que|Sask|Yuk|' +\n\n    /* English county abbreviations:\n     * Bedfordshire, Berkshire, Buckinghamshire, Cambridgeshire,\n     * Cheshire, Cornwall, Cumberland, Derbyshire, *, Devon, Dorset,\n     * Durham, Gloucestershire, Hampshire, Herefordshire, *,\n     * Hertfordshire, Huntingdonshire, Lancashire, Leicestershire,\n     * Lincolnshire, Middlesex, *, *, Norfolk, Northamptonshire,\n     * Northumberland, *, Nottinghamshire, Oxfordshire, Rutland,\n     * Shropshire, Somerset, Staffordshire, *, Suffolk, Surrey,\n     * Sussex, *, Warwickshire, *, *, Westmorland, Wiltshire,\n     * Worcestershire, Yorkshire. */\n    'Beds|Berks|Bucks|Cambs|Ches|Corn|Cumb|Derbys|Derbs|Dev|Dor|Dur|' +\n    'Glos|Hants|Here|Heref|Herts|Hunts|Lancs|Leics|Lincs|Mx|Middx|Mddx|' +\n    'Norf|Northants|Northumb|Northd|Notts|Oxon|Rut|Shrops|Salop|Som|' +\n    'Staffs|Staf|Suff|Sy|Sx|Ssx|Warks|War|Warw|Westm|Wilts|Worcs|Yorks' +\n  ')$'\n);\n\n/* Match a blacklisted word which when followed by\n * an apostrophe depicts elision. */\nvar ELISION_PREFIX = new RegExp(\n  '^(' +\n    /* Includes:\n     * - o' > of;\n     * - ol' > old. */\n    'o|ol' +\n  ')$'\n);\n\n/* Match a blacklisted word which when preceded by\n * an apostrophe depicts elision. */\nvar ELISION_AFFIX = new RegExp(\n  '^(' +\n    /* Includes:\n     * - 'im > him;\n     * - 'er > her;\n     * - 'em > them.\n     * - 'cause > because. */\n    'im|er|em|cause|' +\n\n    /* Includes:\n     * - 'twas > it was;\n     * - 'tis > it is;\n     * - 'twere > it were. */\n    'twas|tis|twere|' +\n\n    /* Matches groups of year, optionally followed\n     * by an `s`. */\n    '\\\\d\\\\ds?' +\n  ')$'\n);\n\n/* Match one apostrophe. */\nvar APOSTROPHE = /^['\\u2019]$/;\n\n/* Merge a sentence into its next sentence,\n * when the sentence ends with a certain word. */\nfunction mergeEnglishPrefixExceptions(sentence, index, paragraph) {\n  var children = sentence.children;\n  var period = children[children.length - 1];\n  var word = children[children.length - 2];\n  var value;\n  var next;\n\n  if (period && toString(period) === '.' && word && word.type === 'WordNode') {\n    value = toString(word);\n\n    if (ABBREVIATION.test(lower(value)) || ABBREVIATION_SENSITIVE.test(value)) {\n      /* Merge period into abbreviation. */\n      word.children.push(period);\n      children.pop();\n\n      if (period.position && word.position) {\n        word.position.end = period.position.end;\n      }\n\n      /* Merge sentences. */\n      next = paragraph.children[index + 1];\n\n      if (next) {\n        sentence.children = children.concat(next.children);\n\n        paragraph.children.splice(index + 1, 1);\n\n        /* Update position. */\n        if (next.position && sentence.position) {\n          sentence.position.end = next.position.end;\n        }\n\n        /* Next, iterate over the current node again. */\n        return index - 1;\n      }\n    }\n  }\n}\n\n/* Merge an apostrophe depicting elision into\n * its surrounding word. */\nfunction mergeEnglishElisionExceptions(child, index, sentence) {\n  var siblings;\n  var sibling;\n  var other;\n  var length;\n  var value;\n\n  if (child.type !== 'PunctuationNode' && child.type !== 'SymbolNode') {\n    return;\n  }\n\n  siblings = sentence.children;\n  length = siblings.length;\n  value = toString(child);\n\n  /* Match abbreviation of `with`, `w/` */\n  if (value === '/') {\n    sibling = siblings[index - 1];\n\n    if (sibling && lower(toString(sibling)) === 'w') {\n      /* Remove the slash from the sentence. */\n      siblings.splice(index, 1);\n\n      /* Append the slash into the children of the\n       * previous node. */\n      sibling.children.push(child);\n\n      /* Update position. */\n      if (sibling.position && child.position) {\n        sibling.position.end = child.position.end;\n      }\n    }\n  } else if (APOSTROPHE.test(value)) {\n    /* If two preceding (the first white space and the\n     * second a word), and one following (white space)\n     * nodes exist... */\n    sibling = siblings[index - 1];\n\n    if (\n      index > 2 &&\n      index < length - 1 &&\n      sibling.type === 'WordNode' &&\n      siblings[index - 2].type === 'WhiteSpaceNode' &&\n      siblings[index + 1].type === 'WhiteSpaceNode' &&\n      ELISION_PREFIX.test(lower(toString(sibling)))\n    ) {\n      /* Remove the apostrophe from the sentence. */\n      siblings.splice(index, 1);\n\n      /* Append the apostrophe into the children of\n       * node. */\n      sibling.children.push(child);\n\n      /* Update position. */\n      if (sibling.position && child.position) {\n        sibling.position.end = child.position.end;\n      }\n\n      return;\n    }\n\n    /* If a following word exists, and the preceding node\n     * is not a word... */\n    if (\n      index !== length - 1 &&\n      siblings[index + 1].type === 'WordNode' &&\n      (index === 0 || siblings[index - 1].type !== 'WordNode')\n    ) {\n      sibling = siblings[index + 1];\n      value = lower(toString(sibling));\n\n      if (ELISION_AFFIX.test(value)) {\n        /* Remove the apostrophe from the sentence. */\n        siblings.splice(index, 1);\n\n        /* Prepend the apostrophe into the children of\n         * node. */\n        sibling.children = [child].concat(sibling.children);\n\n        /* Update position. */\n        if (sibling.position && child.position) {\n          sibling.position.start = child.position.start;\n        }\n      /* If both preceded and followed by an apostrophe,\n       * and the word is `n`... */\n      } else if (\n        value === 'n' &&\n        index < length - 2 &&\n        APOSTROPHE.test(toString(siblings[index + 2]))\n      ) {\n        other = siblings[index + 2];\n\n        /* Remove the apostrophe from the sentence. */\n        siblings.splice(index, 1);\n        siblings.splice(index + 1, 1);\n\n        /* Prepend the preceding apostrophe and append\n         * the into the following apostrophe into\n         * the children of node. */\n        sibling.children = [child].concat(sibling.children, other);\n\n        /* Update position. */\n        if (sibling.position) {\n          /* istanbul ignore else */\n          if (child.position) {\n            sibling.position.start = child.position.start;\n          }\n\n          /* istanbul ignore else */\n          if (other.position) {\n            sibling.position.end = other.position.end;\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction lower(value) {\n  return value.toLowerCase();\n}\n","'use strict';\nmodule.exports = require('./lib/index.js');\n","/* This module is generated by `script/build-expressions.js` */\n'use strict';\n\nmodule.exports = {\n  affixSymbol: /^([\\)\\]\\}\\u0F3B\\u0F3D\\u169C\\u2046\\u207E\\u208E\\u2309\\u230B\\u232A\\u2769\\u276B\\u276D\\u276F\\u2771\\u2773\\u2775\\u27C6\\u27E7\\u27E9\\u27EB\\u27ED\\u27EF\\u2984\\u2986\\u2988\\u298A\\u298C\\u298E\\u2990\\u2992\\u2994\\u2996\\u2998\\u29D9\\u29DB\\u29FD\\u2E23\\u2E25\\u2E27\\u2E29\\u3009\\u300B\\u300D\\u300F\\u3011\\u3015\\u3017\\u3019\\u301B\\u301E\\u301F\\uFD3E\\uFE18\\uFE36\\uFE38\\uFE3A\\uFE3C\\uFE3E\\uFE40\\uFE42\\uFE44\\uFE48\\uFE5A\\uFE5C\\uFE5E\\uFF09\\uFF3D\\uFF5D\\uFF60\\uFF63]|[\"'\\xBB\\u2019\\u201D\\u203A\\u2E03\\u2E05\\u2E0A\\u2E0D\\u2E1D\\u2E21]|[!\\.\\?\\u2026\\u203D])\\1*$/,\n  newLine: /^[ \\t]*((\\r?\\n|\\r)[\\t ]*)+$/,\n  newLineMulti: /^[ \\t]*((\\r?\\n|\\r)[\\t ]*){2,}$/,\n  terminalMarker: /^((?:[!\\.\\?\\u2026\\u203D])+)$/,\n  wordSymbolInner: /^((?:[&'\\-\\.:=\\?@\\xAD\\xB7\\u2010\\u2011\\u2019\\u2027])|(?:_)+)$/,\n  numerical: /^(?:[0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19]|\\uD800[\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDEE1-\\uDEFB\\uDF20-\\uDF23\\uDF41\\uDF4A\\uDFD1-\\uDFD5]|\\uD801[\\uDCA0-\\uDCA9]|\\uD802[\\uDC58-\\uDC5F\\uDC79-\\uDC7F\\uDCA7-\\uDCAF\\uDCFB-\\uDCFF\\uDD16-\\uDD1B\\uDDBC\\uDDBD\\uDDC0-\\uDDCF\\uDDD2-\\uDDFF\\uDE40-\\uDE47\\uDE7D\\uDE7E\\uDE9D-\\uDE9F\\uDEEB-\\uDEEF\\uDF58-\\uDF5F\\uDF78-\\uDF7F\\uDFA9-\\uDFAF]|\\uD803[\\uDCFA-\\uDCFF\\uDE60-\\uDE7E]|\\uD804[\\uDC52-\\uDC6F\\uDCF0-\\uDCF9\\uDD36-\\uDD3F\\uDDD0-\\uDDD9\\uDDE1-\\uDDF4\\uDEF0-\\uDEF9]|\\uD805[\\uDCD0-\\uDCD9\\uDE50-\\uDE59\\uDEC0-\\uDEC9\\uDF30-\\uDF3B]|\\uD806[\\uDCE0-\\uDCF2]|\\uD809[\\uDC00-\\uDC6E]|\\uD81A[\\uDE60-\\uDE69\\uDF50-\\uDF59\\uDF5B-\\uDF61]|\\uD834[\\uDF60-\\uDF71]|\\uD835[\\uDFCE-\\uDFFF]|\\uD83A[\\uDCC7-\\uDCCF]|\\uD83C[\\uDD00-\\uDD0C])+$/,\n  digitStart: /^[0-9]/,\n  lowerInitial: /^(?:[a-z\\xB5\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0561-\\u0587\\u13F8-\\u13FD\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7B\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7B5\\uA7B7\\uA7FA\\uAB30-\\uAB5A\\uAB60-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A]|\\uD801[\\uDC28-\\uDC4F]|\\uD803[\\uDCC0-\\uDCF2]|\\uD806[\\uDCC0-\\uDCDF]|\\uD835[\\uDC1A-\\uDC33\\uDC4E-\\uDC54\\uDC56-\\uDC67\\uDC82-\\uDC9B\\uDCB6-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDCEA-\\uDD03\\uDD1E-\\uDD37\\uDD52-\\uDD6B\\uDD86-\\uDD9F\\uDDBA-\\uDDD3\\uDDEE-\\uDE07\\uDE22-\\uDE3B\\uDE56-\\uDE6F\\uDE8A-\\uDEA5\\uDEC2-\\uDEDA\\uDEDC-\\uDEE1\\uDEFC-\\uDF14\\uDF16-\\uDF1B\\uDF36-\\uDF4E\\uDF50-\\uDF55\\uDF70-\\uDF88\\uDF8A-\\uDF8F\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9\\uDFCB])/,\n  surrogates: /[\\uD800-\\uDFFF]/,\n  punctuation: /[!\"'-\\),-\\/:;\\?\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u201F\\u2022-\\u2027\\u2032-\\u203A\\u203C-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E42\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDF3C-\\uDF3E]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]/,\n  word: /[0-9A-Za-z\\xAA\\xB2\\xB3\\xB5\\xB9\\xBA\\xBC-\\xBE\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u09F4-\\u09F9\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71-\\u0B77\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BF2\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D75\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F33\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u137C\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u17F0-\\u17F9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABE\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2070\\u2071\\u2074-\\u2079\\u207F-\\u2089\\u2090-\\u209C\\u20D0-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2CFD\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u3192-\\u3195\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA672\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA830-\\uA835\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0-\\uDEFB\\uDF00-\\uDF23\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC58-\\uDC76\\uDC79-\\uDC9E\\uDCA7-\\uDCAF\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDCFB-\\uDD1B\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBC-\\uDDCF\\uDDD2-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F-\\uDE47\\uDE60-\\uDE7E\\uDE80-\\uDE9F\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDEEB-\\uDEEF\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF58-\\uDF72\\uDF78-\\uDF91\\uDFA9-\\uDFAF]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDCFA-\\uDCFF\\uDE60-\\uDE7E]|\\uD804[\\uDC00-\\uDC46\\uDC52-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDDE1-\\uDDF4\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF3B]|\\uD806[\\uDCA0-\\uDCF2\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF5B-\\uDF61\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44\\uDF60-\\uDF71]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCC7-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD83C[\\uDD00-\\uDD0C]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/,\n  whiteSpace: /[\\t-\\r \\x85\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/\n};\n","'use strict';\n\nvar createParser = require('./parser');\nvar expressions = require('./expressions');\n\nmodule.exports = ParseLatin;\n\n/* == PARSE LATIN ================================================== */\n\n/* Transform Latin-script natural language into\n * an NLCST-tree. */\nfunction ParseLatin(doc, file) {\n  var value = file || doc;\n\n  if (!(this instanceof ParseLatin)) {\n    return new ParseLatin(doc, file);\n  }\n\n  this.doc = value ? String(value) : null;\n}\n\n/* Quick access to the prototype. */\nvar proto = ParseLatin.prototype;\n\n/* Default position. */\nproto.position = true;\n\n/* Create text nodes. */\nproto.tokenizeSymbol = createTextFactory('Symbol');\nproto.tokenizeWhiteSpace = createTextFactory('WhiteSpace');\nproto.tokenizePunctuation = createTextFactory('Punctuation');\nproto.tokenizeSource = createTextFactory('Source');\nproto.tokenizeText = createTextFactory('Text');\n\n/* Expose `run`. */\nproto.run = run;\n\n/* Inject `plugins` to modifiy the result of the method\n * at `key` on the operated on context. */\nproto.use = useFactory(function (context, key, plugins) {\n  context[key] = context[key].concat(plugins);\n});\n\n/* Inject `plugins` to modifiy the result of the method\n * at `key` on the operated on context, before any other. */\nproto.useFirst = useFactory(function (context, key, plugins) {\n  context[key] = plugins.concat(context[key]);\n});\n\n/* Easy access to the document parser. This additionally\n * supports retext-style invocation: where an instance is\n * created for each file, and the file is given on\n * construction. */\nproto.parse = function (value) {\n  return this.tokenizeRoot(value || this.doc);\n};\n\n/* Transform a `value` into a list of `NLCSTNode`s. */\nproto.tokenize = function (value) {\n  return tokenize(this, value);\n};\n\n/* == PARENT NODES =================================================\n *\n * All these nodes are `pluggable`: they come with a\n * `use` method which accepts a plugin\n * (`function(NLCSTNode)`). Every time one of these\n * methods are called, the plugin is invoked with the\n * node, allowing for easy modification.\n *\n * In fact, the internal transformation from `tokenize`\n * (a list of words, white space, punctuation, and\n * symbols) to `tokenizeRoot` (an NLCST tree), is also\n * implemented through this mechanism. */\n\n/* Create a `WordNode` with its children set to a single\n * `TextNode`, its value set to the given `value`. */\npluggable(ParseLatin, 'tokenizeWord', function (value, eat) {\n  var add = (eat || noopEat)('');\n  var parent = {type: 'WordNode', children: []};\n\n  this.tokenizeText(value, eat, parent);\n\n  return add(parent);\n});\n\n/* Create a `SentenceNode` with its children set to\n * `Node`s, their values set to the tokenized given\n * `value`.\n *\n * Unless plugins add new nodes, the sentence is\n * populated by `WordNode`s, `SymbolNode`s,\n * `PunctuationNode`s, and `WhiteSpaceNode`s. */\npluggable(ParseLatin, 'tokenizeSentence', createParser({\n  type: 'SentenceNode',\n  tokenizer: 'tokenize'\n}));\n\n/* Create a `ParagraphNode` with its children set to\n * `Node`s, their values set to the tokenized given\n * `value`.\n *\n * Unless plugins add new nodes, the paragraph is\n * populated by `SentenceNode`s and `WhiteSpaceNode`s. */\npluggable(ParseLatin, 'tokenizeParagraph', createParser({\n  type: 'ParagraphNode',\n  delimiter: expressions.terminalMarker,\n  delimiterType: 'PunctuationNode',\n  tokenizer: 'tokenizeSentence'\n}));\n\n/* Create a `RootNode` with its children set to `Node`s,\n * their values set to the tokenized given `value`. */\npluggable(ParseLatin, 'tokenizeRoot', createParser({\n  type: 'RootNode',\n  delimiter: expressions.newLine,\n  delimiterType: 'WhiteSpaceNode',\n  tokenizer: 'tokenizeParagraph'\n}));\n\n/* == PLUGINS ====================================================== */\n\nproto.use('tokenizeSentence', [\n  require('./plugin/merge-initial-word-symbol'),\n  require('./plugin/merge-final-word-symbol'),\n  require('./plugin/merge-inner-word-symbol'),\n  require('./plugin/merge-inner-word-slash'),\n  require('./plugin/merge-initialisms'),\n  require('./plugin/merge-words'),\n  require('./plugin/patch-position')\n]);\n\nproto.use('tokenizeParagraph', [\n  require('./plugin/merge-non-word-sentences'),\n  require('./plugin/merge-affix-symbol'),\n  require('./plugin/merge-initial-lower-case-letter-sentences'),\n  require('./plugin/merge-initial-digit-sentences'),\n  require('./plugin/merge-prefix-exceptions'),\n  require('./plugin/merge-affix-exceptions'),\n  require('./plugin/merge-remaining-full-stops'),\n  require('./plugin/make-initial-white-space-siblings'),\n  require('./plugin/make-final-white-space-siblings'),\n  require('./plugin/break-implicit-sentences'),\n  require('./plugin/remove-empty-nodes'),\n  require('./plugin/patch-position')\n]);\n\nproto.use('tokenizeRoot', [\n  require('./plugin/make-initial-white-space-siblings'),\n  require('./plugin/make-final-white-space-siblings'),\n  require('./plugin/remove-empty-nodes'),\n  require('./plugin/patch-position')\n]);\n\n/* == TEXT NODES =================================================== */\n\n/* Factory to create a `Text`. */\nfunction createTextFactory(type) {\n  type += 'Node';\n\n  return createText;\n\n  /* Construct a `Text` from a bound `type` */\n  function createText(value, eat, parent) {\n    if (value === null || value === undefined) {\n      value = '';\n    }\n\n    return (eat || noopEat)(value)({\n      type: type,\n      value: String(value)\n    }, parent);\n  }\n}\n\n/* Run transform plug-ins for `key` on `nodes`. */\nfunction run(key, nodes) {\n  var wareKey = key + 'Plugins';\n  var plugins = this[wareKey];\n  var index = -1;\n\n  if (plugins) {\n    while (plugins[++index]) {\n      plugins[index](nodes);\n    }\n  }\n\n  return nodes;\n}\n\n/* Make a method “pluggable”. */\nfunction pluggable(Constructor, key, callback) {\n  /* Set a pluggable version of `callback`\n   * on `Constructor`. */\n  Constructor.prototype[key] = function () {\n    return this.run(key, callback.apply(this, arguments));\n  };\n}\n\n/* Factory to inject `plugins`. Takes `callback` for\n * the actual inserting. */\nfunction useFactory(callback) {\n  return use;\n\n  /* Validate if `plugins` can be inserted. Invokes\n   * the bound `callback` to do the actual inserting. */\n  function use(key, plugins) {\n    var self = this;\n    var wareKey;\n\n    /* Throw if the method is not pluggable. */\n    if (!(key in self)) {\n      throw new Error(\n        'Illegal Invocation: Unsupported `key` for ' +\n        '`use(key, plugins)`. Make sure `key` is a ' +\n        'supported function'\n      );\n    }\n\n    /* Fail silently when no plugins are given. */\n    if (!plugins) {\n      return;\n    }\n\n    wareKey = key + 'Plugins';\n\n    /* Make sure `plugins` is a list. */\n    if (typeof plugins === 'function') {\n      plugins = [plugins];\n    } else {\n      plugins = plugins.concat();\n    }\n\n    /* Make sure `wareKey` exists. */\n    if (!self[wareKey]) {\n      self[wareKey] = [];\n    }\n\n    /* Invoke callback with the ware key and plugins. */\n    callback(self, wareKey, plugins);\n  }\n}\n\n/* == CLASSIFY ===================================================== */\n\n/* Match a word character. */\nvar WORD = expressions.word;\n\n/* Match a surrogate character. */\nvar SURROGATES = expressions.surrogates;\n\n/* Match a punctuation character. */\nvar PUNCTUATION = expressions.punctuation;\n\n/* Match a white space character. */\nvar WHITE_SPACE = expressions.whiteSpace;\n\n/* Transform a `value` into a list of `NLCSTNode`s. */\nfunction tokenize(parser, value) {\n  var tokens;\n  var offset;\n  var line;\n  var column;\n  var index;\n  var length;\n  var character;\n  var queue;\n  var prev;\n  var left;\n  var right;\n  var eater;\n\n  if (value === null || value === undefined) {\n    value = '';\n  } else if (value instanceof String) {\n    value = value.toString();\n  }\n\n  if (typeof value !== 'string') {\n    /* Return the given nodes if this is either an\n     * empty array, or an array with a node as a first\n     * child. */\n    if ('length' in value && (!value[0] || value[0].type)) {\n      return value;\n    }\n\n    throw new Error(\n      'Illegal invocation: \\'' + value + '\\'' +\n      ' is not a valid argument for \\'ParseLatin\\''\n    );\n  }\n\n  tokens = [];\n\n  if (!value) {\n    return tokens;\n  }\n\n  index = 0;\n  offset = 0;\n  line = 1;\n  column = 1;\n\n  /* Eat mechanism to use. */\n  eater = parser.position ? eat : noPositionEat;\n\n  length = value.length;\n  prev = '';\n  queue = '';\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (WHITE_SPACE.test(character)) {\n      right = 'WhiteSpace';\n    } else if (PUNCTUATION.test(character)) {\n      right = 'Punctuation';\n    } else if (WORD.test(character)) {\n      right = 'Word';\n    } else {\n      right = 'Symbol';\n    }\n\n    tick();\n\n    prev = character;\n    character = '';\n    left = right;\n    right = null;\n\n    index++;\n  }\n\n  tick();\n\n  return tokens;\n\n  /* Check one character. */\n  function tick() {\n    if (\n      left === right &&\n      (\n        left === 'Word' ||\n        left === 'WhiteSpace' ||\n        character === prev ||\n        SURROGATES.test(character)\n      )\n    ) {\n      queue += character;\n    } else {\n      /* Flush the previous queue. */\n      if (queue) {\n        parser['tokenize' + left](queue, eater);\n      }\n\n      queue = character;\n    }\n  }\n\n  /* Remove `subvalue` from `value`.\n   * Expects `subvalue` to be at the start from\n   * `value`, and applies no validation. */\n  function eat(subvalue) {\n    var pos = position();\n\n    update(subvalue);\n\n    return apply;\n\n    /* Add the given arguments, add `position` to\n     * the returned node, and return the node. */\n    function apply() {\n      return pos(add.apply(null, arguments));\n    }\n  }\n\n  /* Remove `subvalue` from `value`. Does not patch\n   * positional information. */\n  function noPositionEat() {\n    return apply;\n\n    /* Add the given arguments and return the node. */\n    function apply() {\n      return add.apply(null, arguments);\n    }\n  }\n\n  /* Add mechanism. */\n  function add(node, parent) {\n    if (parent) {\n      parent.children.push(node);\n    } else {\n      tokens.push(node);\n    }\n\n    return node;\n  }\n\n  /* Mark position and patch `node.position`. */\n  function position() {\n    var before = now();\n\n    /* Add the position to a node. */\n    function patch(node) {\n      node.position = new Position(before);\n\n      return node;\n    }\n\n    return patch;\n  }\n\n  /* Update line and column based on `value`. */\n  function update(subvalue) {\n    var subvalueLength = subvalue.length;\n    var character = -1;\n    var lastIndex = -1;\n\n    offset += subvalueLength;\n\n    while (++character < subvalueLength) {\n      if (subvalue.charAt(character) === '\\n') {\n        lastIndex = character;\n        line++;\n      }\n    }\n\n    if (lastIndex === -1) {\n      column += subvalueLength;\n    } else {\n      column = subvalueLength - lastIndex;\n    }\n  }\n\n  /* Store position information for a node. */\n  function Position(start) {\n    this.start = start;\n    this.end = now();\n  }\n\n  /* Get the current position. */\n  function now() {\n    return {\n      line: line,\n      column: column,\n      offset: offset\n    };\n  }\n}\n\n/* Add mechanism used when text-tokenisers are called\n * directly outside of the `tokenize` function. */\nfunction noopAdd(node, parent) {\n  if (parent) {\n    parent.children.push(node);\n  }\n\n  return node;\n}\n\n/* Eat and add mechanism without adding positional\n * information, used when text-tokenisers are called\n * directly outside of the `tokenize` function. */\nfunction noopEat() {\n  return noopAdd;\n}\n","'use strict';\n\nvar tokenizer = require('./tokenizer');\n\nmodule.exports = parserFactory;\n\n/* Construct a parser based on `options`. */\nfunction parserFactory(options) {\n  var type = options.type;\n  var tokenizerProperty = options.tokenizer;\n  var delimiter = options.delimiter;\n  var tokenize = delimiter && tokenizer(options.delimiterType, delimiter);\n\n  return parser;\n\n  function parser(value) {\n    var children = this[tokenizerProperty](value);\n\n    return {\n      type: type,\n      children: tokenize ? tokenize(children) : children\n    };\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\nvar expressions = require('../expressions');\n\nmodule.exports = modifyChildren(breakImplicitSentences);\n\n/* Two or more new line characters. */\nvar MULTI_NEW_LINE = expressions.newLineMulti;\n\n/* Break a sentence if a white space with more\n * than one new-line is found. */\nfunction breakImplicitSentences(child, index, parent) {\n  var children;\n  var position;\n  var length;\n  var tail;\n  var head;\n  var end;\n  var insertion;\n  var node;\n\n  if (child.type !== 'SentenceNode') {\n    return;\n  }\n\n  children = child.children;\n\n  /* Ignore first and last child. */\n  length = children.length - 1;\n  position = 0;\n\n  while (++position < length) {\n    node = children[position];\n\n    if (\n      node.type !== 'WhiteSpaceNode' ||\n      !MULTI_NEW_LINE.test(toString(node))\n    ) {\n      continue;\n    }\n\n    child.children = children.slice(0, position);\n\n    insertion = {\n      type: 'SentenceNode',\n      children: children.slice(position + 1)\n    };\n\n    tail = children[position - 1];\n    head = children[position + 1];\n\n    parent.children.splice(index + 1, 0, node, insertion);\n\n    if (child.position && tail.position && head.position) {\n      end = child.position.end;\n\n      child.position.end = tail.position.end;\n\n      insertion.position = {\n        start: head.position.start,\n        end: end\n      };\n    }\n\n    return index + 1;\n  }\n}\n","'use strict';\n\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(makeFinalWhiteSpaceSiblings);\n\n/* Move white space ending a paragraph up, so they are\n * the siblings of paragraphs. */\nfunction makeFinalWhiteSpaceSiblings(child, index, parent) {\n  var children = child.children;\n  var prev;\n\n  if (\n    children &&\n    children.length !== 0 &&\n    children[children.length - 1].type === 'WhiteSpaceNode'\n  ) {\n    parent.children.splice(index + 1, 0, child.children.pop());\n    prev = children[children.length - 1];\n\n    if (prev && prev.position && child.position) {\n      child.position.end = prev.position.end;\n    }\n\n    /* Next, iterate over the current node again. */\n    return index;\n  }\n}\n","'use strict';\n\nvar visitChildren = require('unist-util-visit-children');\n\nmodule.exports = visitChildren(makeInitialWhiteSpaceSiblings);\n\n/* Move white space starting a sentence up, so they are\n * the siblings of sentences. */\nfunction makeInitialWhiteSpaceSiblings(child, index, parent) {\n  var children = child.children;\n  var next;\n\n  if (children && children.length !== 0 && children[0].type === 'WhiteSpaceNode') {\n    parent.children.splice(index, 0, children.shift());\n    next = children[0];\n\n    if (next && next.position && child.position) {\n      child.position.start = next.position.start;\n    }\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(mergeAffixExceptions);\n\n/* Merge a sentence into its previous sentence, when\n * the sentence starts with a comma. */\nfunction mergeAffixExceptions(child, index, parent) {\n  var children = child.children;\n  var node;\n  var position;\n  var value;\n  var previousChild;\n\n  if (!children || children.length === 0 || index === 0) {\n    return;\n  }\n\n  position = -1;\n\n  while (children[++position]) {\n    node = children[position];\n\n    if (node.type === 'WordNode') {\n      return;\n    }\n\n    if (node.type === 'SymbolNode' || node.type === 'PunctuationNode') {\n      value = toString(node);\n\n      if (value !== ',' && value !== ';') {\n        return;\n      }\n\n      previousChild = parent.children[index - 1];\n\n      previousChild.children = previousChild.children.concat(children);\n\n      /* Update position. */\n      if (previousChild.position && child.position) {\n        previousChild.position.end = child.position.end;\n      }\n\n      parent.children.splice(index, 1);\n\n      /* Next, iterate over the node *now* at the current\n       * position. */\n      return index;\n    }\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\nvar expressions = require('../expressions');\n\nmodule.exports = modifyChildren(mergeAffixSymbol);\n\n/* Closing or final punctuation, or terminal markers\n * that should still be included in the previous\n * sentence, even though they follow the sentence's\n * terminal marker. */\nvar AFFIX_SYMBOL = expressions.affixSymbol;\n\n/* Move certain punctuation following a terminal\n * marker (thus in the next sentence) to the\n * previous sentence. */\nfunction mergeAffixSymbol(child, index, parent) {\n  var children = child.children;\n  var first;\n  var second;\n  var prev;\n\n  if (children && children.length !== 0 && index !== 0) {\n    first = children[0];\n    second = children[1];\n    prev = parent.children[index - 1];\n\n    if (\n      (first.type === 'SymbolNode' || first.type === 'PunctuationNode') &&\n      AFFIX_SYMBOL.test(toString(first))\n    ) {\n      prev.children.push(children.shift());\n\n      /* Update position. */\n      if (first.position && prev.position) {\n        prev.position.end = first.position.end;\n      }\n\n      if (second && second.position && child.position) {\n        child.position.start = second.position.start;\n      }\n\n      /* Next, iterate over the previous node again. */\n      return index - 1;\n    }\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(mergeFinalWordSymbol);\n\n/* Merge certain punctuation marks into their\n * preceding words. */\nfunction mergeFinalWordSymbol(child, index, parent) {\n  var children;\n  var prev;\n  var next;\n\n  if (\n    index !== 0 &&\n    (child.type === 'SymbolNode' || child.type === 'PunctuationNode') &&\n    toString(child) === '-'\n  ) {\n    children = parent.children;\n\n    prev = children[index - 1];\n    next = children[index + 1];\n\n    if (\n      (!next || next.type !== 'WordNode') &&\n      (prev && prev.type === 'WordNode')\n    ) {\n      /* Remove `child` from parent. */\n      children.splice(index, 1);\n\n      /* Add the punctuation mark at the end of the\n       * previous node. */\n      prev.children.push(child);\n\n      /* Update position. */\n      if (prev.position && child.position) {\n        prev.position.end = child.position.end;\n      }\n\n      /* Next, iterate over the node *now* at the\n       * current position (which was the next node). */\n      return index;\n    }\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\nvar expressions = require('../expressions');\n\nmodule.exports = modifyChildren(mergeInitialDigitSentences);\n\n/* Initial lowercase letter. */\nvar DIGIT = expressions.digitStart;\n\n/* Merge a sentence into its previous sentence, when\n * the sentence starts with a lower case letter. */\nfunction mergeInitialDigitSentences(child, index, parent) {\n  var children = child.children;\n  var siblings = parent.children;\n  var prev = siblings[index - 1];\n  var head = children[0];\n\n  if (prev && head && head.type === 'WordNode' && DIGIT.test(toString(head))) {\n    prev.children = prev.children.concat(children);\n    siblings.splice(index, 1);\n\n    /* Update position. */\n    if (prev.position && child.position) {\n      prev.position.end = child.position.end;\n    }\n\n    /* Next, iterate over the node *now* at\n     * the current position. */\n    return index;\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\nvar expressions = require('../expressions');\n\nmodule.exports = modifyChildren(mergeInitialLowerCaseLetterSentences);\n\n/* Initial lowercase letter. */\nvar LOWER_INITIAL = expressions.lowerInitial;\n\n/* Merge a sentence into its previous sentence, when\n * the sentence starts with a lower case letter. */\nfunction mergeInitialLowerCaseLetterSentences(child, index, parent) {\n  var children = child.children;\n  var position;\n  var node;\n  var siblings;\n  var prev;\n\n  if (children && children.length !== 0 && index !== 0) {\n    position = -1;\n\n    while (children[++position]) {\n      node = children[position];\n\n      if (node.type === 'WordNode') {\n        if (!LOWER_INITIAL.test(toString(node))) {\n          return;\n        }\n\n        siblings = parent.children;\n\n        prev = siblings[index - 1];\n\n        prev.children = prev.children.concat(children);\n\n        siblings.splice(index, 1);\n\n        /* Update position. */\n        if (prev.position && child.position) {\n          prev.position.end = child.position.end;\n        }\n\n        /* Next, iterate over the node *now* at\n         * the current position. */\n        return index;\n      }\n\n      if (node.type === 'SymbolNode' || node.type === 'PunctuationNode') {\n        return;\n      }\n    }\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(mergeInitialWordSymbol);\n\n/* Merge certain punctuation marks into their\n * following words. */\nfunction mergeInitialWordSymbol(child, index, parent) {\n  var children;\n  var next;\n\n  if (\n    (child.type !== 'SymbolNode' && child.type !== 'PunctuationNode') ||\n    toString(child) !== '&'\n  ) {\n    return;\n  }\n\n  children = parent.children;\n\n  next = children[index + 1];\n\n  /* If either a previous word, or no following word,\n   * exists, exit early. */\n  if (\n    (index !== 0 && children[index - 1].type === 'WordNode') ||\n    !(next && next.type === 'WordNode')\n  ) {\n    return;\n  }\n\n  /* Remove `child` from parent. */\n  children.splice(index, 1);\n\n  /* Add the punctuation mark at the start of the\n   * next node. */\n  next.children.unshift(child);\n\n  /* Update position. */\n  if (next.position && child.position) {\n    next.position.start = child.position.start;\n  }\n\n  /* Next, iterate over the node at the previous\n   * position, as it's now adjacent to a following\n   * word. */\n  return index - 1;\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\nvar expressions = require('../expressions');\n\nmodule.exports = modifyChildren(mergeInitialisms);\n\nvar NUMERICAL = expressions.numerical;\n\n/* Merge initialisms. */\nfunction mergeInitialisms(child, index, parent) {\n  var siblings;\n  var prev;\n  var children;\n  var length;\n  var position;\n  var otherChild;\n  var isAllDigits;\n  var value;\n\n  if (index !== 0 && toString(child) === '.') {\n    siblings = parent.children;\n\n    prev = siblings[index - 1];\n    children = prev.children;\n\n    length = children && children.length;\n\n    if (\n      prev.type === 'WordNode' &&\n      length !== 1 &&\n      length % 2 !== 0\n    ) {\n      position = length;\n\n      isAllDigits = true;\n\n      while (children[--position]) {\n        otherChild = children[position];\n\n        value = toString(otherChild);\n\n        if (position % 2 === 0) {\n          /* Initialisms consist of one\n           * character values. */\n          if (value.length > 1) {\n            return;\n          }\n\n          if (!NUMERICAL.test(value)) {\n            isAllDigits = false;\n          }\n        } else if (value !== '.') {\n          if (position < length - 2) {\n            break;\n          } else {\n            return;\n          }\n        }\n      }\n\n      if (!isAllDigits) {\n        /* Remove `child` from parent. */\n        siblings.splice(index, 1);\n\n        /* Add child to the previous children. */\n        children.push(child);\n\n        /* Update position. */\n        if (prev.position && child.position) {\n          prev.position.end = child.position.end;\n        }\n\n        /* Next, iterate over the node *now* at the current\n         * position. */\n        return index;\n      }\n    }\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(mergeInnerWordSlash);\n\nvar C_SLASH = '/';\n\n/* Merge words joined by certain punctuation marks. */\nfunction mergeInnerWordSlash(child, index, parent) {\n  var siblings = parent.children;\n  var prev;\n  var next;\n  var prevValue;\n  var nextValue;\n  var queue;\n  var tail;\n  var count;\n\n  prev = siblings[index - 1];\n  next = siblings[index + 1];\n\n  if (\n    prev &&\n    prev.type === 'WordNode' &&\n    (child.type === 'SymbolNode' || child.type === 'PunctuationNode') &&\n    toString(child) === C_SLASH\n  ) {\n    prevValue = toString(prev);\n    tail = child;\n    queue = [child];\n    count = 1;\n\n    if (next && next.type === 'WordNode') {\n      nextValue = toString(next);\n      tail = next;\n      queue = queue.concat(next.children);\n      count++;\n    }\n\n    if (\n      prevValue.length < 3 &&\n      (!nextValue || nextValue.length < 3)\n    ) {\n      /* Add all found tokens to `prev`s children. */\n      prev.children = prev.children.concat(queue);\n\n      siblings.splice(index, count);\n\n      /* Update position. */\n      if (prev.position && tail.position) {\n        prev.position.end = tail.position.end;\n      }\n\n      /* Next, iterate over the node *now* at the current\n       * position. */\n      return index;\n    }\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\nvar expressions = require('../expressions');\n\nmodule.exports = modifyChildren(mergeInnerWordSymbol);\n\n/* Symbols part of surrounding words. */\nvar INNER_WORD_SYMBOL = expressions.wordSymbolInner;\n\n/* Merge words joined by certain punctuation marks. */\nfunction mergeInnerWordSymbol(child, index, parent) {\n  var siblings;\n  var sibling;\n  var prev;\n  var last;\n  var position;\n  var tokens;\n  var queue;\n\n  if (index !== 0 && (child.type === 'SymbolNode' || child.type === 'PunctuationNode')) {\n    siblings = parent.children;\n    prev = siblings[index - 1];\n\n    if (prev && prev.type === 'WordNode') {\n      position = index - 1;\n\n      tokens = [];\n      queue = [];\n\n      /* - If a token which is neither word nor\n       *   inner word symbol is found, the loop\n       *   is broken.\n       * - If an inner word symbol is found,\n       *   it's queued.\n       * - If a word is found, it's queued (and\n       *   the queue stored and emptied). */\n      while (siblings[++position]) {\n        sibling = siblings[position];\n\n        if (sibling.type === 'WordNode') {\n          tokens = tokens.concat(queue, sibling.children);\n\n          queue = [];\n        } else if (\n          (\n            sibling.type === 'SymbolNode' ||\n            sibling.type === 'PunctuationNode'\n          ) &&\n          INNER_WORD_SYMBOL.test(toString(sibling))\n        ) {\n          queue.push(sibling);\n        } else {\n          break;\n        }\n      }\n\n      if (tokens.length !== 0) {\n        /* If there is a queue, remove its length\n         * from `position`. */\n        if (queue.length !== 0) {\n          position -= queue.length;\n        }\n\n        /* Remove every (one or more) inner-word punctuation\n         * marks and children of words. */\n        siblings.splice(index, position - index);\n\n        /* Add all found tokens to `prev`s children. */\n        prev.children = prev.children.concat(tokens);\n\n        last = tokens[tokens.length - 1];\n\n        /* Update position. */\n        if (prev.position && last.position) {\n          prev.position.end = last.position.end;\n        }\n\n        /* Next, iterate over the node *now* at the current\n         * position. */\n        return index;\n      }\n    }\n  }\n}\n","'use strict';\n\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(mergeNonWordSentences);\n\n/* Merge a sentence into the following sentence, when\n * the sentence does not contain word tokens. */\nfunction mergeNonWordSentences(child, index, parent) {\n  var children = child.children;\n  var position = -1;\n  var prev;\n  var next;\n\n  while (children[++position]) {\n    if (children[position].type === 'WordNode') {\n      return;\n    }\n  }\n\n  prev = parent.children[index - 1];\n\n  if (prev) {\n    prev.children = prev.children.concat(children);\n\n    /* Remove the child. */\n    parent.children.splice(index, 1);\n\n    /* Patch position. */\n    if (prev.position && child.position) {\n      prev.position.end = child.position.end;\n    }\n\n    /* Next, iterate over the node *now* at\n     * the current position (which was the\n     * next node). */\n    return index;\n  }\n\n  next = parent.children[index + 1];\n\n  if (next) {\n    next.children = children.concat(next.children);\n\n    /* Patch position. */\n    if (next.position && child.position) {\n      next.position.start = child.position.start;\n    }\n\n    /* Remove the child. */\n    parent.children.splice(index, 1);\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(mergePrefixExceptions);\n\n/* Blacklist of full stop characters that should not\n * be treated as terminal sentence markers: A case-insensitive\n * abbreviation. */\nvar ABBREVIATION_PREFIX = new RegExp(\n  '^(' +\n    '[0-9]{1,3}|' +\n    '[a-z]|' +\n\n    /* Common Latin Abbreviations:\n     * Based on: http://en.wikipedia.org/wiki/List_of_Latin_abbreviations\n     * Where only the abbreviations written without joining full stops,\n     * but with a final full stop, were extracted.\n     *\n     * circa, capitulus, confer, compare, centum weight, eadem, (et) alii,\n     * et cetera, floruit, foliis, ibidem, idem, nemine && contradicente,\n     * opere && citato, (per) cent, (per) procurationem, (pro) tempore,\n     * sic erat scriptum, (et) sequentia, statim, videlicet. */\n    'al|ca|cap|cca|cent|cf|cit|con|cp|cwt|ead|etc|ff|' +\n    'fl|ibid|id|nem|op|pro|seq|sic|stat|tem|viz' +\n  ')$'\n);\n\n/* Merge a sentence into its next sentence, when the\n * sentence ends with a certain word. */\nfunction mergePrefixExceptions(child, index, parent) {\n  var children = child.children;\n  var period;\n  var node;\n  var next;\n\n  if (children && children.length > 1) {\n    period = children[children.length - 1];\n\n    if (period && toString(period) === '.') {\n      node = children[children.length - 2];\n\n      if (\n        node &&\n        node.type === 'WordNode' &&\n        ABBREVIATION_PREFIX.test(toString(node).toLowerCase())\n      ) {\n        /* Merge period into abbreviation. */\n        node.children.push(period);\n        children.pop();\n\n        /* Update position. */\n        if (period.position && node.position) {\n          node.position.end = period.position.end;\n        }\n\n        /* Merge sentences. */\n        next = parent.children[index + 1];\n\n        if (next) {\n          child.children = children.concat(next.children);\n\n          parent.children.splice(index + 1, 1);\n\n          /* Update position. */\n          if (next.position && child.position) {\n            child.position.end = next.position.end;\n          }\n\n          /* Next, iterate over the current node again. */\n          return index - 1;\n        }\n      }\n    }\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar visitChildren = require('unist-util-visit-children');\nvar expressions = require('../expressions');\n\nmodule.exports = visitChildren(mergeRemainingFullStops);\n\n/* Blacklist of full stop characters that should not\n * be treated as terminal sentence markers: A\n * case-insensitive abbreviation. */\nvar TERMINAL_MARKER = expressions.terminalMarker;\n\n/* Merge non-terminal-marker full stops into\n * the previous word (if available), or the next\n * word (if available). */\nfunction mergeRemainingFullStops(child) {\n  var children = child.children;\n  var position = children.length;\n  var hasFoundDelimiter = false;\n  var grandchild;\n  var prev;\n  var next;\n  var nextNext;\n\n  while (children[--position]) {\n    grandchild = children[position];\n\n    if (grandchild.type !== 'SymbolNode' && grandchild.type !== 'PunctuationNode') {\n      /* This is a sentence without terminal marker,\n       * so we 'fool' the code to make it think we\n       * have found one. */\n      if (grandchild.type === 'WordNode') {\n        hasFoundDelimiter = true;\n      }\n\n      continue;\n    }\n\n    /* Exit when this token is not a terminal marker. */\n    if (!TERMINAL_MARKER.test(toString(grandchild))) {\n      continue;\n    }\n\n    /* Ignore the first terminal marker found\n     * (starting at the end), as it should not\n     * be merged. */\n    if (!hasFoundDelimiter) {\n      hasFoundDelimiter = true;\n\n      continue;\n    }\n\n    /* Only merge a single full stop. */\n    if (toString(grandchild) !== '.') {\n      continue;\n    }\n\n    prev = children[position - 1];\n    next = children[position + 1];\n\n    if (prev && prev.type === 'WordNode') {\n      nextNext = children[position + 2];\n\n      /* Continue when the full stop is followed by\n       * a space and another full stop, such as:\n       * `{.} .` */\n      if (\n        next &&\n        nextNext &&\n        next.type === 'WhiteSpaceNode' &&\n        toString(nextNext) === '.'\n      ) {\n        continue;\n      }\n\n      /* Remove `child` from parent. */\n      children.splice(position, 1);\n\n      /* Add the punctuation mark at the end of the\n       * previous node. */\n      prev.children.push(grandchild);\n\n      /* Update position. */\n      if (grandchild.position && prev.position) {\n        prev.position.end = grandchild.position.end;\n      }\n\n      position--;\n    } else if (next && next.type === 'WordNode') {\n      /* Remove `child` from parent. */\n      children.splice(position, 1);\n\n      /* Add the punctuation mark at the start of\n       * the next node. */\n      next.children.unshift(grandchild);\n\n      if (grandchild.position && next.position) {\n        next.position.start = grandchild.position.start;\n      }\n    }\n  }\n}\n","'use strict';\n\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(mergeFinalWordSymbol);\n\n/* Merge multiple words. This merges the children of\n * adjacent words, something which should not occur\n * naturally by parse-latin, but might happen when\n * custom tokens were passed in. */\nfunction mergeFinalWordSymbol(child, index, parent) {\n  var siblings = parent.children;\n  var next;\n\n  if (child.type === 'WordNode') {\n    next = siblings[index + 1];\n\n    if (next && next.type === 'WordNode') {\n      /* Remove `next` from parent. */\n      siblings.splice(index + 1, 1);\n\n      /* Add the punctuation mark at the end of the\n       * previous node. */\n      child.children = child.children.concat(next.children);\n\n      /* Update position. */\n      if (next.position && child.position) {\n        child.position.end = next.position.end;\n      }\n\n      /* Next, re-iterate the current node. */\n      return index;\n    }\n  }\n}\n","'use strict';\n\nvar visitChildren = require('unist-util-visit-children');\n\nmodule.exports = visitChildren(patchPosition);\n\n/* Patch the position on a parent node based on its first\n * and last child. */\nfunction patchPosition(child, index, node) {\n  var siblings = node.children;\n\n  if (!child.position) {\n    return;\n  }\n\n  if (index === 0 && (!node.position || /* istanbul ignore next */ !node.position.start)) {\n    patch(node);\n    node.position.start = child.position.start;\n  }\n\n  if (\n    index === siblings.length - 1 &&\n    (!node.position || !node.position.end)\n  ) {\n    patch(node);\n    node.position.end = child.position.end;\n  }\n}\n\n/* Add a `position` object when it does not yet exist\n * on `node`. */\nfunction patch(node) {\n  if (!node.position) {\n    node.position = {};\n  }\n}\n","'use strict';\n\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(removeEmptyNodes);\n\n/* Remove empty children. */\nfunction removeEmptyNodes(child, index, parent) {\n  if ('children' in child && child.children.length === 0) {\n    parent.children.splice(index, 1);\n\n    /* Next, iterate over the node *now* at\n     * the current position (which was the\n     * next node). */\n    return index;\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\n\nmodule.exports = tokenizerFactory;\n\n/* Factory to create a tokenizer based on a given\n * `expression`. */\nfunction tokenizerFactory(childType, expression) {\n  return tokenizer;\n\n  /* A function that splits. */\n  function tokenizer(node) {\n    var children = [];\n    var tokens = node.children;\n    var type = node.type;\n    var length = tokens.length;\n    var index = -1;\n    var lastIndex = length - 1;\n    var start = 0;\n    var first;\n    var last;\n    var parent;\n\n    while (++index < length) {\n      if (\n        index === lastIndex ||\n        (\n          tokens[index].type === childType &&\n          expression.test(toString(tokens[index]))\n        )\n      ) {\n        first = tokens[start];\n        last = tokens[index];\n\n        parent = {\n          type: type,\n          children: tokens.slice(start, index + 1)\n        };\n\n        if (first.position && last.position) {\n          parent.position = {\n            start: first.position.start,\n            end: last.position.end\n          };\n        }\n\n        children.push(parent);\n\n        start = index + 1;\n      }\n    }\n\n    return children;\n  }\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","'use strict';\n\nvar unherit = require('unherit');\nvar English = require('parse-english');\n\nmodule.exports = parse;\nparse.Parser = English;\n\nfunction parse() {\n  this.Parser = unherit(English);\n}\n","module.exports={\n  \"abandon\": -2,\n  \"abandoned\": -2,\n  \"abandons\": -2,\n  \"abducted\": -2,\n  \"abduction\": -2,\n  \"abductions\": -2,\n  \"abhor\": -3,\n  \"abhorred\": -3,\n  \"abhorrent\": -3,\n  \"abhors\": -3,\n  \"abilities\": 2,\n  \"ability\": 2,\n  \"aboard\": 1,\n  \"aborted\": -1,\n  \"aborts\": -1,\n  \"absentee\": -1,\n  \"absentees\": -1,\n  \"absolve\": 2,\n  \"absolved\": 2,\n  \"absolves\": 2,\n  \"absolving\": 2,\n  \"absorbed\": 1,\n  \"abuse\": -3,\n  \"abused\": -3,\n  \"abuses\": -3,\n  \"abusing\": -3,\n  \"abusive\": -3,\n  \"accept\": 1,\n  \"acceptable\": 1,\n  \"acceptance\": 1,\n  \"accepted\": 1,\n  \"accepting\": 1,\n  \"accepts\": 1,\n  \"accessible\": 1,\n  \"accident\": -2,\n  \"accidental\": -2,\n  \"accidentally\": -2,\n  \"accidents\": -2,\n  \"acclaim\": 2,\n  \"acclaimed\": 2,\n  \"accolade\": 2,\n  \"accomplish\": 2,\n  \"accomplished\": 2,\n  \"accomplishes\": 2,\n  \"accomplishment\": 2,\n  \"accomplishments\": 2,\n  \"accusation\": -2,\n  \"accusations\": -2,\n  \"accuse\": -2,\n  \"accused\": -2,\n  \"accuses\": -2,\n  \"accusing\": -2,\n  \"ache\": -2,\n  \"achievable\": 1,\n  \"aching\": -2,\n  \"acquit\": 2,\n  \"acquits\": 2,\n  \"acquitted\": 2,\n  \"acquitting\": 2,\n  \"acrimonious\": -3,\n  \"active\": 1,\n  \"adequate\": 1,\n  \"admire\": 3,\n  \"admired\": 3,\n  \"admires\": 3,\n  \"admiring\": 3,\n  \"admit\": -1,\n  \"admits\": -1,\n  \"admitted\": -1,\n  \"admonish\": -2,\n  \"admonished\": -2,\n  \"adopt\": 1,\n  \"adopts\": 1,\n  \"adorable\": 3,\n  \"adoration\": 3,\n  \"adore\": 3,\n  \"adored\": 3,\n  \"adores\": 3,\n  \"adoring\": 3,\n  \"adoringly\": 3,\n  \"advanced\": 1,\n  \"advantage\": 2,\n  \"advantageous\": 2,\n  \"advantageously\": 2,\n  \"advantages\": 2,\n  \"adventure\": 2,\n  \"adventures\": 2,\n  \"adventurous\": 2,\n  \"adversary\": -1,\n  \"advisable\": 1,\n  \"affected\": -1,\n  \"affection\": 3,\n  \"affectionate\": 3,\n  \"affectionateness\": 3,\n  \"afflicted\": -1,\n  \"affordable\": 2,\n  \"affronted\": -1,\n  \"aficionados\": 2,\n  \"afraid\": -2,\n  \"aggravate\": -2,\n  \"aggravated\": -2,\n  \"aggravates\": -2,\n  \"aggravating\": -2,\n  \"aggression\": -2,\n  \"aggressions\": -2,\n  \"aggressive\": -2,\n  \"aggressiveness\": -2,\n  \"aghast\": -2,\n  \"agog\": 2,\n  \"agonise\": -3,\n  \"agonised\": -3,\n  \"agonises\": -3,\n  \"agonising\": -3,\n  \"agonize\": -3,\n  \"agonized\": -3,\n  \"agonizes\": -3,\n  \"agonizing\": -3,\n  \"agree\": 1,\n  \"agreeable\": 2,\n  \"agreed\": 1,\n  \"agreement\": 1,\n  \"agrees\": 1,\n  \"alarm\": -2,\n  \"alarmed\": -2,\n  \"alarmist\": -2,\n  \"alarmists\": -2,\n  \"alas\": -1,\n  \"alert\": -1,\n  \"alienation\": -2,\n  \"alive\": 1,\n  \"allegation\": -2,\n  \"allegations\": -2,\n  \"allergic\": -2,\n  \"allow\": 1,\n  \"ally\": 2,\n  \"alone\": -2,\n  \"altruistic\": 2,\n  \"amaze\": 2,\n  \"amazed\": 2,\n  \"amazes\": 2,\n  \"amazing\": 4,\n  \"ambitious\": 2,\n  \"ambivalent\": -1,\n  \"amicable\": 2,\n  \"amuse\": 3,\n  \"amused\": 3,\n  \"amusement\": 3,\n  \"amusements\": 3,\n  \"anger\": -3,\n  \"angered\": -3,\n  \"angers\": -3,\n  \"angry\": -3,\n  \"anguish\": -3,\n  \"anguished\": -3,\n  \"animosity\": -2,\n  \"annoy\": -2,\n  \"annoyance\": -2,\n  \"annoyed\": -2,\n  \"annoying\": -2,\n  \"annoys\": -2,\n  \"antagonistic\": -2,\n  \"anti\": -1,\n  \"anticipation\": 1,\n  \"anxiety\": -2,\n  \"anxious\": -2,\n  \"apathetic\": -3,\n  \"apathy\": -3,\n  \"apeshit\": -3,\n  \"apocalyptic\": -2,\n  \"apologise\": -1,\n  \"apologised\": -1,\n  \"apologises\": -1,\n  \"apologising\": -1,\n  \"apologize\": -1,\n  \"apologized\": -1,\n  \"apologizes\": -1,\n  \"apologizing\": -1,\n  \"apology\": -1,\n  \"appalled\": -2,\n  \"appalling\": -2,\n  \"appealing\": 2,\n  \"appease\": 2,\n  \"appeased\": 2,\n  \"appeases\": 2,\n  \"appeasing\": 2,\n  \"applaud\": 2,\n  \"applauded\": 2,\n  \"applauding\": 2,\n  \"applauds\": 2,\n  \"applause\": 2,\n  \"appreciate\": 2,\n  \"appreciated\": 2,\n  \"appreciates\": 2,\n  \"appreciating\": 2,\n  \"appreciation\": 2,\n  \"apprehensive\": -2,\n  \"appropriate\": 2,\n  \"appropriately\": 2,\n  \"approval\": 2,\n  \"approved\": 2,\n  \"approves\": 2,\n  \"ardent\": 1,\n  \"arrest\": -2,\n  \"arrested\": -3,\n  \"arrests\": -2,\n  \"arrogant\": -2,\n  \"arsehole\": -4,\n  \"ashame\": -2,\n  \"ashamed\": -2,\n  \"ass\": -4,\n  \"assassination\": -3,\n  \"assassinations\": -3,\n  \"assault\": -2,\n  \"assaults\": -2,\n  \"asset\": 2,\n  \"assets\": 2,\n  \"assfucking\": -4,\n  \"asshole\": -4,\n  \"astonished\": 2,\n  \"astound\": 3,\n  \"astounded\": 3,\n  \"astounding\": 3,\n  \"astoundingly\": 3,\n  \"astounds\": 3,\n  \"atrocious\": -3,\n  \"atrocity\": -3,\n  \"attack\": -1,\n  \"attacked\": -1,\n  \"attacking\": -1,\n  \"attacks\": -1,\n  \"attract\": 1,\n  \"attracted\": 1,\n  \"attracting\": 2,\n  \"attraction\": 2,\n  \"attractions\": 2,\n  \"attractive\": 2,\n  \"attractively\": 2,\n  \"attractiveness\": 2,\n  \"attracts\": 1,\n  \"audacious\": 3,\n  \"aura\": 1,\n  \"authority\": 1,\n  \"avenge\": -2,\n  \"avenged\": -2,\n  \"avenger\": -2,\n  \"avengers\": -2,\n  \"avenges\": -2,\n  \"avenging\": -2,\n  \"avert\": -1,\n  \"averted\": -1,\n  \"averts\": -1,\n  \"avid\": 2,\n  \"avoid\": -1,\n  \"avoided\": -1,\n  \"avoids\": -1,\n  \"await\": -1,\n  \"awaited\": -1,\n  \"awaits\": -1,\n  \"award\": 3,\n  \"awarded\": 3,\n  \"awards\": 3,\n  \"awesome\": 4,\n  \"awful\": -3,\n  \"awkward\": -2,\n  \"axe\": -1,\n  \"axed\": -1,\n  \"backed\": 1,\n  \"backing\": 2,\n  \"backs\": 1,\n  \"bad\": -3,\n  \"bad luck\": -2,\n  \"badass\": -3,\n  \"badly\": -3,\n  \"badness\": -3,\n  \"bailout\": -2,\n  \"balanced\": 1,\n  \"bamboozle\": -2,\n  \"bamboozled\": -2,\n  \"bamboozles\": -2,\n  \"ban\": -2,\n  \"banish\": -1,\n  \"bankrupt\": -3,\n  \"bankruptcy\": -3,\n  \"bankster\": -3,\n  \"banned\": -2,\n  \"barbarian\": -2,\n  \"barbaric\": -2,\n  \"barbarous\": -2,\n  \"bargain\": 2,\n  \"barrier\": -2,\n  \"bastard\": -5,\n  \"bastards\": -5,\n  \"battle\": -1,\n  \"battled\": -1,\n  \"battles\": -1,\n  \"battling\": -2,\n  \"beaten\": -2,\n  \"beatific\": 3,\n  \"beating\": -1,\n  \"beauties\": 3,\n  \"beautiful\": 3,\n  \"beautifully\": 3,\n  \"beautify\": 3,\n  \"beauty\": 3,\n  \"befit\": 2,\n  \"befitting\": 2,\n  \"belittle\": -2,\n  \"belittled\": -2,\n  \"beloved\": 3,\n  \"benefactor\": 2,\n  \"benefactors\": 2,\n  \"benefit\": 2,\n  \"benefits\": 2,\n  \"benefitted\": 2,\n  \"benefitting\": 2,\n  \"benevolent\": 3,\n  \"bereave\": -2,\n  \"bereaved\": -2,\n  \"bereaves\": -2,\n  \"bereaving\": -2,\n  \"best\": 3,\n  \"best damn\": 4,\n  \"betray\": -3,\n  \"betrayal\": -3,\n  \"betrayed\": -3,\n  \"betraying\": -3,\n  \"betrays\": -3,\n  \"better\": 2,\n  \"bias\": -1,\n  \"biased\": -2,\n  \"big\": 1,\n  \"bitch\": -5,\n  \"bitches\": -5,\n  \"bitter\": -2,\n  \"bitterest\": -2,\n  \"bitterly\": -2,\n  \"bizarre\": -2,\n  \"blackmail\": -3,\n  \"blackmailed\": -3,\n  \"blackmailing\": -3,\n  \"blackmails\": -3,\n  \"blah\": -2,\n  \"blame\": -2,\n  \"blamed\": -2,\n  \"blames\": -2,\n  \"blaming\": -2,\n  \"bless\": 2,\n  \"blesses\": 2,\n  \"blessing\": 3,\n  \"blessings\": 3,\n  \"blind\": -1,\n  \"bliss\": 3,\n  \"blissful\": 3,\n  \"blithe\": 2,\n  \"bloated\": -1,\n  \"block\": -1,\n  \"blockade\": -2,\n  \"blockbuster\": 3,\n  \"blocked\": -1,\n  \"blocking\": -1,\n  \"blocks\": -1,\n  \"bloody\": -3,\n  \"blurry\": -2,\n  \"boastful\": -2,\n  \"bold\": 2,\n  \"boldly\": 2,\n  \"bomb\": -1,\n  \"boost\": 1,\n  \"boosted\": 1,\n  \"boosting\": 1,\n  \"boosts\": 1,\n  \"bore\": -2,\n  \"bored\": -2,\n  \"boring\": -3,\n  \"bother\": -2,\n  \"bothered\": -2,\n  \"bothers\": -2,\n  \"bothersome\": -2,\n  \"boycott\": -2,\n  \"boycotted\": -2,\n  \"boycotting\": -2,\n  \"boycotts\": -2,\n  \"brainwashing\": -3,\n  \"brave\": 2,\n  \"braveness\": 2,\n  \"bravery\": 2,\n  \"bravura\": 3,\n  \"breach\": -2,\n  \"breached\": -2,\n  \"breaches\": -2,\n  \"breaching\": -2,\n  \"breakthrough\": 3,\n  \"breathtaking\": 5,\n  \"bribe\": -3,\n  \"bribed\": -3,\n  \"bribes\": -3,\n  \"bribing\": -3,\n  \"bright\": 1,\n  \"brightest\": 2,\n  \"brightness\": 1,\n  \"brilliance\": 3,\n  \"brilliances\": 3,\n  \"brilliant\": 4,\n  \"brisk\": 2,\n  \"broke\": -1,\n  \"broken\": -1,\n  \"brooding\": -2,\n  \"brutal\": -3,\n  \"brutally\": -3,\n  \"bullied\": -2,\n  \"bullshit\": -4,\n  \"bully\": -2,\n  \"bullying\": -2,\n  \"bummer\": -2,\n  \"buoyant\": 2,\n  \"burden\": -2,\n  \"burdened\": -2,\n  \"burdening\": -2,\n  \"burdens\": -2,\n  \"burglar\": -2,\n  \"burglary\": -2,\n  \"calm\": 2,\n  \"calmed\": 2,\n  \"calming\": 2,\n  \"calms\": 2,\n  \"can't stand\": -3,\n  \"cancel\": -1,\n  \"cancelled\": -1,\n  \"cancelling\": -1,\n  \"cancels\": -1,\n  \"cancer\": -1,\n  \"capabilities\": 1,\n  \"capability\": 1,\n  \"capable\": 1,\n  \"captivated\": 3,\n  \"care\": 2,\n  \"carefree\": 1,\n  \"careful\": 2,\n  \"carefully\": 2,\n  \"carefulness\": 2,\n  \"careless\": -2,\n  \"cares\": 2,\n  \"caring\": 2,\n  \"cashing in\": -2,\n  \"casualty\": -2,\n  \"catastrophe\": -3,\n  \"catastrophic\": -4,\n  \"cautious\": -1,\n  \"celebrate\": 3,\n  \"celebrated\": 3,\n  \"celebrates\": 3,\n  \"celebrating\": 3,\n  \"celebration\": 3,\n  \"celebrations\": 3,\n  \"censor\": -2,\n  \"censored\": -2,\n  \"censors\": -2,\n  \"certain\": 1,\n  \"chagrin\": -2,\n  \"chagrined\": -2,\n  \"challenge\": -1,\n  \"champion\": 2,\n  \"championed\": 2,\n  \"champions\": 2,\n  \"chance\": 2,\n  \"chances\": 2,\n  \"chaos\": -2,\n  \"chaotic\": -2,\n  \"charged\": -3,\n  \"charges\": -2,\n  \"charisma\": 2,\n  \"charitable\": 2,\n  \"charm\": 3,\n  \"charming\": 3,\n  \"charmingly\": 3,\n  \"charmless\": -3,\n  \"chastise\": -3,\n  \"chastised\": -3,\n  \"chastises\": -3,\n  \"chastising\": -3,\n  \"cheat\": -3,\n  \"cheated\": -3,\n  \"cheater\": -3,\n  \"cheaters\": -3,\n  \"cheating\": -3,\n  \"cheats\": -3,\n  \"cheer\": 2,\n  \"cheered\": 2,\n  \"cheerful\": 2,\n  \"cheerfully\": 2,\n  \"cheering\": 2,\n  \"cheerless\": -2,\n  \"cheers\": 2,\n  \"cheery\": 3,\n  \"cherish\": 2,\n  \"cherished\": 2,\n  \"cherishes\": 2,\n  \"cherishing\": 2,\n  \"chic\": 2,\n  \"chide\": -3,\n  \"chided\": -3,\n  \"chides\": -3,\n  \"chiding\": -3,\n  \"childish\": -2,\n  \"chilling\": -1,\n  \"choke\": -2,\n  \"choked\": -2,\n  \"chokes\": -2,\n  \"choking\": -2,\n  \"clarifies\": 2,\n  \"clarity\": 2,\n  \"clash\": -2,\n  \"classy\": 3,\n  \"clean\": 2,\n  \"cleaner\": 2,\n  \"clear\": 1,\n  \"cleared\": 1,\n  \"clearly\": 1,\n  \"clears\": 1,\n  \"clever\": 2,\n  \"clouded\": -1,\n  \"clueless\": -2,\n  \"cock\": -5,\n  \"cocksucker\": -5,\n  \"cocksuckers\": -5,\n  \"cocky\": -2,\n  \"coerced\": -2,\n  \"coercion\": -2,\n  \"collapse\": -2,\n  \"collapsed\": -2,\n  \"collapses\": -2,\n  \"collapsing\": -2,\n  \"collide\": -1,\n  \"collides\": -1,\n  \"colliding\": -1,\n  \"collision\": -2,\n  \"collisions\": -2,\n  \"colluding\": -3,\n  \"combat\": -1,\n  \"combats\": -1,\n  \"comedy\": 1,\n  \"comfort\": 2,\n  \"comfortable\": 2,\n  \"comfortably\": 2,\n  \"comforting\": 2,\n  \"comforts\": 2,\n  \"comic\": 1,\n  \"commend\": 2,\n  \"commended\": 2,\n  \"commit\": 1,\n  \"commitment\": 2,\n  \"commits\": 1,\n  \"committed\": 1,\n  \"committing\": 1,\n  \"compassion\": 2,\n  \"compassionate\": 2,\n  \"compelled\": 1,\n  \"competencies\": 1,\n  \"competent\": 2,\n  \"competitive\": 2,\n  \"complacent\": -2,\n  \"complain\": -2,\n  \"complained\": -2,\n  \"complaining\": -2,\n  \"complains\": -2,\n  \"complaint\": -2,\n  \"complaints\": -2,\n  \"complicating\": -2,\n  \"compliment\": 2,\n  \"complimented\": 2,\n  \"compliments\": 2,\n  \"comprehensive\": 2,\n  \"concerned\": -2,\n  \"conciliate\": 2,\n  \"conciliated\": 2,\n  \"conciliates\": 2,\n  \"conciliating\": 2,\n  \"condemn\": -2,\n  \"condemnation\": -2,\n  \"condemned\": -2,\n  \"condemns\": -2,\n  \"confidence\": 2,\n  \"confident\": 2,\n  \"confidently\": 2,\n  \"conflict\": -2,\n  \"conflicting\": -2,\n  \"conflictive\": -2,\n  \"conflicts\": -2,\n  \"confuse\": -2,\n  \"confused\": -2,\n  \"confusing\": -2,\n  \"congrats\": 2,\n  \"congratulate\": 2,\n  \"congratulation\": 2,\n  \"congratulations\": 2,\n  \"consent\": 2,\n  \"consents\": 2,\n  \"consolable\": 2,\n  \"conspiracy\": -3,\n  \"constipation\": -2,\n  \"constrained\": -2,\n  \"contagion\": -2,\n  \"contagions\": -2,\n  \"contagious\": -1,\n  \"contaminant\": -2,\n  \"contaminants\": -2,\n  \"contaminate\": -2,\n  \"contaminated\": -2,\n  \"contaminates\": -2,\n  \"contaminating\": -2,\n  \"contamination\": -2,\n  \"contaminations\": -2,\n  \"contempt\": -2,\n  \"contemptible\": -2,\n  \"contemptuous\": -2,\n  \"contemptuously\": -2,\n  \"contend\": -1,\n  \"contender\": -1,\n  \"contending\": -1,\n  \"contentious\": -2,\n  \"contestable\": -2,\n  \"controversial\": -2,\n  \"controversially\": -2,\n  \"controversies\": -2,\n  \"controversy\": -2,\n  \"convicted\": -2,\n  \"convince\": 1,\n  \"convinced\": 1,\n  \"convinces\": 1,\n  \"convivial\": 2,\n  \"cool\": 1,\n  \"cool stuff\": 3,\n  \"cornered\": -2,\n  \"corpse\": -1,\n  \"corrupt\": -3,\n  \"corrupted\": -3,\n  \"corrupting\": -3,\n  \"corruption\": -3,\n  \"corrupts\": -3,\n  \"costly\": -2,\n  \"courage\": 2,\n  \"courageous\": 2,\n  \"courageously\": 2,\n  \"courageousness\": 2,\n  \"courteous\": 2,\n  \"courtesy\": 2,\n  \"cover-up\": -3,\n  \"coward\": -2,\n  \"cowardly\": -2,\n  \"coziness\": 2,\n  \"cramp\": -1,\n  \"crap\": -3,\n  \"crappy\": -3,\n  \"crash\": -2,\n  \"crazier\": -2,\n  \"craziest\": -2,\n  \"crazy\": -2,\n  \"creative\": 2,\n  \"crestfallen\": -2,\n  \"cried\": -2,\n  \"cries\": -2,\n  \"crime\": -3,\n  \"crimes\": -3,\n  \"criminal\": -3,\n  \"criminals\": -3,\n  \"criminate\": -3,\n  \"criminated\": -3,\n  \"criminates\": -3,\n  \"crisis\": -3,\n  \"critic\": -2,\n  \"criticise\": -2,\n  \"criticised\": -2,\n  \"criticises\": -2,\n  \"criticising\": -2,\n  \"criticism\": -2,\n  \"criticize\": -2,\n  \"criticized\": -2,\n  \"criticizes\": -2,\n  \"criticizing\": -2,\n  \"critics\": -2,\n  \"critique\": -2,\n  \"crowding\": -1,\n  \"crude\": -1,\n  \"cruel\": -3,\n  \"cruelty\": -3,\n  \"crush\": -1,\n  \"crushed\": -2,\n  \"crushes\": -1,\n  \"crushing\": -1,\n  \"cry\": -1,\n  \"crying\": -2,\n  \"cunning\": 2,\n  \"cunt\": -5,\n  \"curious\": 1,\n  \"curse\": -1,\n  \"cut\": -1,\n  \"cutback\": -2,\n  \"cutbacks\": -2,\n  \"cute\": 2,\n  \"cuts\": -1,\n  \"cutting\": -1,\n  \"cynic\": -2,\n  \"cynical\": -2,\n  \"cynicism\": -2,\n  \"damage\": -3,\n  \"damaged\": -3,\n  \"damages\": -3,\n  \"damaging\": -3,\n  \"damn\": -2,\n  \"damn cute\": 3,\n  \"damn good\": 4,\n  \"damned\": -4,\n  \"damnit\": -4,\n  \"danger\": -2,\n  \"dangerous\": -2,\n  \"dangerously\": -2,\n  \"daredevil\": 2,\n  \"daring\": 2,\n  \"darkest\": -2,\n  \"darkness\": -1,\n  \"dauntless\": 2,\n  \"dazzling\": 3,\n  \"dead\": -3,\n  \"deadening\": -2,\n  \"deadlock\": -2,\n  \"deadly\": -3,\n  \"deafening\": -1,\n  \"dear\": 2,\n  \"dearly\": 3,\n  \"death\": -2,\n  \"deaths\": -2,\n  \"debonair\": 2,\n  \"debt\": -2,\n  \"deceit\": -3,\n  \"deceitful\": -3,\n  \"deceive\": -3,\n  \"deceived\": -3,\n  \"deceives\": -3,\n  \"deceiving\": -3,\n  \"deception\": -3,\n  \"deceptive\": -3,\n  \"decisive\": 1,\n  \"dedicated\": 2,\n  \"dedication\": 2,\n  \"defeat\": -2,\n  \"defeated\": -2,\n  \"defect\": -3,\n  \"defective\": -3,\n  \"defects\": -3,\n  \"defender\": 2,\n  \"defenders\": 2,\n  \"defenseless\": -2,\n  \"defer\": -1,\n  \"deferring\": -1,\n  \"defiant\": -1,\n  \"deficiencies\": -2,\n  \"deficiency\": -2,\n  \"deficient\": -2,\n  \"deficit\": -2,\n  \"deformed\": -2,\n  \"deformities\": -2,\n  \"deformity\": -2,\n  \"defraud\": -3,\n  \"defrauds\": -3,\n  \"deft\": 2,\n  \"defunct\": -2,\n  \"degrade\": -2,\n  \"degraded\": -2,\n  \"degrades\": -2,\n  \"dehumanize\": -2,\n  \"dehumanized\": -2,\n  \"dehumanizes\": -2,\n  \"dehumanizing\": -2,\n  \"deject\": -2,\n  \"dejected\": -2,\n  \"dejecting\": -2,\n  \"dejects\": -2,\n  \"delay\": -1,\n  \"delayed\": -1,\n  \"delectable\": 3,\n  \"delicious\": 3,\n  \"delight\": 3,\n  \"delighted\": 3,\n  \"delightful\": 3,\n  \"delightfully\": 3,\n  \"delighting\": 3,\n  \"delights\": 3,\n  \"demand\": -1,\n  \"demanded\": -1,\n  \"demanding\": -1,\n  \"demands\": -1,\n  \"demonstration\": -1,\n  \"demoralize\": -2,\n  \"demoralized\": -2,\n  \"demoralizes\": -2,\n  \"demoralizing\": -2,\n  \"denial\": -2,\n  \"denials\": -2,\n  \"denied\": -2,\n  \"denier\": -2,\n  \"deniers\": -2,\n  \"denies\": -2,\n  \"denounce\": -2,\n  \"denounces\": -2,\n  \"dent\": -2,\n  \"deny\": -2,\n  \"denying\": -2,\n  \"deplore\": -3,\n  \"deplored\": -3,\n  \"deplores\": -3,\n  \"deploring\": -3,\n  \"deport\": -2,\n  \"deportation\": -2,\n  \"deportations\": -2,\n  \"deported\": -2,\n  \"deporting\": -2,\n  \"deports\": -2,\n  \"depressed\": -2,\n  \"depressing\": -2,\n  \"deprivation\": -3,\n  \"derail\": -2,\n  \"derailed\": -2,\n  \"derails\": -2,\n  \"derelict\": -2,\n  \"deride\": -2,\n  \"derided\": -2,\n  \"derides\": -2,\n  \"deriding\": -2,\n  \"derision\": -2,\n  \"desirable\": 2,\n  \"desire\": 1,\n  \"desired\": 2,\n  \"desirous\": 2,\n  \"despair\": -3,\n  \"despairing\": -3,\n  \"despairs\": -3,\n  \"desperate\": -3,\n  \"desperately\": -3,\n  \"despondent\": -3,\n  \"destroy\": -3,\n  \"destroyed\": -3,\n  \"destroying\": -3,\n  \"destroys\": -3,\n  \"destruction\": -3,\n  \"destructive\": -3,\n  \"detached\": -1,\n  \"detain\": -2,\n  \"detained\": -2,\n  \"detention\": -2,\n  \"deteriorate\": -2,\n  \"deteriorated\": -2,\n  \"deteriorates\": -2,\n  \"deteriorating\": -2,\n  \"determined\": 2,\n  \"deterrent\": -2,\n  \"detract\": -1,\n  \"detracted\": -1,\n  \"detracts\": -1,\n  \"devastate\": -2,\n  \"devastated\": -2,\n  \"devastating\": -2,\n  \"devastation\": -2,\n  \"devastations\": -2,\n  \"devoted\": 3,\n  \"devotion\": 2,\n  \"devotional\": 2,\n  \"diamond\": 1,\n  \"dick\": -4,\n  \"dickhead\": -4,\n  \"die\": -3,\n  \"died\": -3,\n  \"difficult\": -1,\n  \"diffident\": -2,\n  \"dignity\": 2,\n  \"dilemma\": -1,\n  \"dilligence\": 2,\n  \"dipshit\": -3,\n  \"dire\": -3,\n  \"direful\": -3,\n  \"dirt\": -2,\n  \"dirtier\": -2,\n  \"dirtiest\": -2,\n  \"dirty\": -2,\n  \"disabilities\": -2,\n  \"disability\": -2,\n  \"disabling\": -1,\n  \"disadvantage\": -2,\n  \"disadvantaged\": -2,\n  \"disagree\": -2,\n  \"disagreeable\": -2,\n  \"disagreement\": -2,\n  \"disappear\": -1,\n  \"disappeared\": -1,\n  \"disappears\": -1,\n  \"disappoint\": -2,\n  \"disappointed\": -2,\n  \"disappointing\": -2,\n  \"disappointment\": -2,\n  \"disappointments\": -2,\n  \"disappoints\": -2,\n  \"disapproval\": -2,\n  \"disapprovals\": -2,\n  \"disapprove\": -2,\n  \"disapproved\": -2,\n  \"disapproves\": -2,\n  \"disapproving\": -2,\n  \"disaster\": -2,\n  \"disasters\": -2,\n  \"disastrous\": -3,\n  \"disbelieve\": -2,\n  \"discard\": -1,\n  \"discarded\": -1,\n  \"discarding\": -1,\n  \"discards\": -1,\n  \"discernment\": 2,\n  \"discomfort\": -2,\n  \"disconsolate\": -2,\n  \"disconsolation\": -2,\n  \"discontented\": -2,\n  \"discord\": -2,\n  \"discounted\": -1,\n  \"discouraged\": -2,\n  \"discredited\": -2,\n  \"discriminate\": -2,\n  \"discriminated\": -2,\n  \"discriminates\": -2,\n  \"discriminating\": -2,\n  \"discriminatory\": -2,\n  \"disdain\": -2,\n  \"disease\": -1,\n  \"diseases\": -1,\n  \"disgrace\": -2,\n  \"disgraced\": -2,\n  \"disguise\": -1,\n  \"disguised\": -1,\n  \"disguises\": -1,\n  \"disguising\": -1,\n  \"disgust\": -3,\n  \"disgusted\": -3,\n  \"disgustful\": -3,\n  \"disgusting\": -3,\n  \"disheartened\": -2,\n  \"dishonest\": -2,\n  \"disillusioned\": -2,\n  \"disinclined\": -2,\n  \"disjointed\": -2,\n  \"dislike\": -2,\n  \"disliked\": -2,\n  \"dislikes\": -2,\n  \"dismal\": -2,\n  \"dismayed\": -2,\n  \"dismissed\": -2,\n  \"disorder\": -2,\n  \"disorders\": -2,\n  \"disorganized\": -2,\n  \"disoriented\": -2,\n  \"disparage\": -2,\n  \"disparaged\": -2,\n  \"disparages\": -2,\n  \"disparaging\": -2,\n  \"displeased\": -2,\n  \"displeasure\": -2,\n  \"disproportionate\": -2,\n  \"dispute\": -2,\n  \"disputed\": -2,\n  \"disputes\": -2,\n  \"disputing\": -2,\n  \"disqualified\": -2,\n  \"disquiet\": -2,\n  \"disregard\": -2,\n  \"disregarded\": -2,\n  \"disregarding\": -2,\n  \"disregards\": -2,\n  \"disrespect\": -2,\n  \"disrespected\": -2,\n  \"disrupt\": -2,\n  \"disrupted\": -2,\n  \"disrupting\": -2,\n  \"disruption\": -2,\n  \"disruptions\": -2,\n  \"disruptive\": -2,\n  \"disrupts\": -2,\n  \"dissatisfied\": -2,\n  \"distasteful\": -2,\n  \"distinguished\": 2,\n  \"distort\": -2,\n  \"distorted\": -2,\n  \"distorting\": -2,\n  \"distorts\": -2,\n  \"distract\": -2,\n  \"distracted\": -2,\n  \"distraction\": -2,\n  \"distracts\": -2,\n  \"distress\": -2,\n  \"distressed\": -2,\n  \"distresses\": -2,\n  \"distressing\": -2,\n  \"distrust\": -3,\n  \"distrustful\": -3,\n  \"disturb\": -2,\n  \"disturbed\": -2,\n  \"disturbing\": -2,\n  \"disturbs\": -2,\n  \"dithering\": -2,\n  \"diverting\": -1,\n  \"dizzy\": -1,\n  \"dodging\": -2,\n  \"dodgy\": -2,\n  \"does not work\": -3,\n  \"dolorous\": -2,\n  \"donate\": 2,\n  \"donated\": 2,\n  \"donates\": 2,\n  \"donating\": 2,\n  \"donation\": 2,\n  \"dont like\": -2,\n  \"doom\": -2,\n  \"doomed\": -2,\n  \"doubt\": -1,\n  \"doubted\": -1,\n  \"doubtful\": -1,\n  \"doubting\": -1,\n  \"doubts\": -1,\n  \"douche\": -3,\n  \"douchebag\": -3,\n  \"dour\": -2,\n  \"downcast\": -2,\n  \"downer\": -2,\n  \"downhearted\": -2,\n  \"downside\": -2,\n  \"drag\": -1,\n  \"dragged\": -1,\n  \"drags\": -1,\n  \"drained\": -2,\n  \"dread\": -2,\n  \"dreaded\": -2,\n  \"dreadful\": -3,\n  \"dreading\": -2,\n  \"dream\": 1,\n  \"dreams\": 1,\n  \"dreary\": -2,\n  \"droopy\": -2,\n  \"drop\": -1,\n  \"dropped\": -1,\n  \"drown\": -2,\n  \"drowned\": -2,\n  \"drowns\": -2,\n  \"drudgery\": -2,\n  \"drunk\": -2,\n  \"dubious\": -2,\n  \"dud\": -2,\n  \"dull\": -2,\n  \"dumb\": -3,\n  \"dumbass\": -3,\n  \"dump\": -1,\n  \"dumped\": -2,\n  \"dumps\": -1,\n  \"dupe\": -2,\n  \"duped\": -2,\n  \"dupery\": -2,\n  \"durable\": 2,\n  \"dying\": -3,\n  \"dysfunction\": -2,\n  \"eager\": 2,\n  \"earnest\": 2,\n  \"ease\": 2,\n  \"easy\": 1,\n  \"ecstatic\": 4,\n  \"eerie\": -2,\n  \"eery\": -2,\n  \"effective\": 2,\n  \"effectively\": 2,\n  \"effectiveness\": 2,\n  \"effortlessly\": 2,\n  \"elated\": 3,\n  \"elation\": 3,\n  \"elegant\": 2,\n  \"elegantly\": 2,\n  \"embarrass\": -2,\n  \"embarrassed\": -2,\n  \"embarrasses\": -2,\n  \"embarrassing\": -2,\n  \"embarrassment\": -2,\n  \"embezzlement\": -3,\n  \"embittered\": -2,\n  \"embrace\": 1,\n  \"emergency\": -2,\n  \"empathetic\": 2,\n  \"empower\": 2,\n  \"empowerment\": 2,\n  \"emptiness\": -1,\n  \"empty\": -1,\n  \"enchanted\": 2,\n  \"encourage\": 2,\n  \"encouraged\": 2,\n  \"encouragement\": 2,\n  \"encourages\": 2,\n  \"encouraging\": 2,\n  \"endorse\": 2,\n  \"endorsed\": 2,\n  \"endorsement\": 2,\n  \"endorses\": 2,\n  \"enemies\": -2,\n  \"enemy\": -2,\n  \"energetic\": 2,\n  \"engage\": 1,\n  \"engages\": 1,\n  \"engrossed\": 1,\n  \"engrossing\": 3,\n  \"enjoy\": 2,\n  \"enjoyable\": 2,\n  \"enjoyed\": 2,\n  \"enjoying\": 2,\n  \"enjoys\": 2,\n  \"enlighten\": 2,\n  \"enlightened\": 2,\n  \"enlightening\": 2,\n  \"enlightens\": 2,\n  \"ennui\": -2,\n  \"enrage\": -2,\n  \"enraged\": -2,\n  \"enrages\": -2,\n  \"enraging\": -2,\n  \"enrapture\": 3,\n  \"enslave\": -2,\n  \"enslaved\": -2,\n  \"enslaves\": -2,\n  \"ensure\": 1,\n  \"ensuring\": 1,\n  \"enterprising\": 1,\n  \"entertaining\": 2,\n  \"enthral\": 3,\n  \"enthusiastic\": 3,\n  \"entitled\": 1,\n  \"entrusted\": 2,\n  \"envies\": -1,\n  \"envious\": -2,\n  \"environment-friendly\": 2,\n  \"envy\": -1,\n  \"envying\": -1,\n  \"erroneous\": -2,\n  \"error\": -2,\n  \"errors\": -2,\n  \"escape\": -1,\n  \"escapes\": -1,\n  \"escaping\": -1,\n  \"esteem\": 2,\n  \"esteemed\": 2,\n  \"ethical\": 2,\n  \"euphoria\": 3,\n  \"euphoric\": 4,\n  \"evacuate\": -1,\n  \"evacuated\": -1,\n  \"evacuates\": -1,\n  \"evacuating\": -1,\n  \"evacuation\": -1,\n  \"evergreen\": 2,\n  \"evergreening\": -3,\n  \"evergreens\": 2,\n  \"eviction\": -1,\n  \"evil\": -3,\n  \"exacerbate\": -2,\n  \"exacerbated\": -2,\n  \"exacerbates\": -2,\n  \"exacerbating\": -2,\n  \"exaggerate\": -2,\n  \"exaggerated\": -2,\n  \"exaggerates\": -2,\n  \"exaggerating\": -2,\n  \"exasparate\": -2,\n  \"exasperated\": -2,\n  \"exasperates\": -2,\n  \"exasperating\": -2,\n  \"excellence\": 3,\n  \"excellent\": 3,\n  \"excite\": 3,\n  \"excited\": 3,\n  \"excitement\": 3,\n  \"exciting\": 3,\n  \"exclude\": -1,\n  \"excluded\": -2,\n  \"exclusion\": -1,\n  \"exclusive\": 2,\n  \"excruciatingly\": -1,\n  \"excuse\": -1,\n  \"exempt\": -1,\n  \"exhausted\": -2,\n  \"exhilarated\": 3,\n  \"exhilarates\": 3,\n  \"exhilarating\": 3,\n  \"exonerate\": 2,\n  \"exonerated\": 2,\n  \"exonerates\": 2,\n  \"exonerating\": 2,\n  \"expand\": 1,\n  \"expands\": 1,\n  \"expel\": -2,\n  \"expelled\": -2,\n  \"expelling\": -2,\n  \"expels\": -2,\n  \"expertly\": 2,\n  \"exploit\": -2,\n  \"exploited\": -2,\n  \"exploiting\": -2,\n  \"exploits\": -2,\n  \"exploration\": 1,\n  \"explorations\": 1,\n  \"expose\": -1,\n  \"exposed\": -1,\n  \"exposes\": -1,\n  \"exposing\": -1,\n  \"exquisite\": 3,\n  \"extend\": 1,\n  \"extends\": 1,\n  \"extremist\": -2,\n  \"extremists\": -2,\n  \"exuberant\": 4,\n  \"exultant\": 3,\n  \"exultantly\": 3,\n  \"fabulous\": 4,\n  \"fabulously\": 4,\n  \"fad\": -2,\n  \"fag\": -3,\n  \"faggot\": -3,\n  \"faggots\": -3,\n  \"fail\": -2,\n  \"failed\": -2,\n  \"failing\": -2,\n  \"fails\": -2,\n  \"failure\": -2,\n  \"failures\": -2,\n  \"fainthearted\": -2,\n  \"fair\": 2,\n  \"fairness\": 2,\n  \"faith\": 1,\n  \"faithful\": 3,\n  \"fake\": -3,\n  \"faker\": -3,\n  \"fakes\": -3,\n  \"faking\": -3,\n  \"fallen\": -2,\n  \"falling\": -1,\n  \"false\": -1,\n  \"falsely\": -2,\n  \"falsified\": -3,\n  \"falsify\": -3,\n  \"fame\": 1,\n  \"famine\": -2,\n  \"famous\": 2,\n  \"fan\": 3,\n  \"fantastic\": 4,\n  \"farce\": -1,\n  \"fascinate\": 3,\n  \"fascinated\": 3,\n  \"fascinates\": 3,\n  \"fascinating\": 3,\n  \"fascination\": 3,\n  \"fascist\": -2,\n  \"fascists\": -2,\n  \"fatal\": -3,\n  \"fatalities\": -3,\n  \"fatality\": -3,\n  \"fatigue\": -2,\n  \"fatigued\": -2,\n  \"fatigues\": -2,\n  \"fatiguing\": -2,\n  \"favor\": 2,\n  \"favorable\": 2,\n  \"favorably\": 2,\n  \"favored\": 2,\n  \"favorite\": 2,\n  \"favorited\": 2,\n  \"favorites\": 2,\n  \"favors\": 2,\n  \"favour\": 2,\n  \"favourable\": 2,\n  \"favourably\": 2,\n  \"favoured\": 2,\n  \"favourite\": 2,\n  \"favourited\": 2,\n  \"favourites\": 2,\n  \"favours\": 2,\n  \"fear\": -2,\n  \"fearful\": -2,\n  \"fearfully\": -2,\n  \"fearing\": -2,\n  \"fearless\": 2,\n  \"fearlessness\": 2,\n  \"fearsome\": -2,\n  \"fed up\": -3,\n  \"feeble\": -2,\n  \"feeling\": 1,\n  \"felonies\": -3,\n  \"felony\": -3,\n  \"fertile\": 2,\n  \"fervent\": 2,\n  \"fervid\": 2,\n  \"festive\": 2,\n  \"fever\": -2,\n  \"fiasco\": -3,\n  \"fidgety\": -2,\n  \"fight\": -1,\n  \"fighting\": -2,\n  \"filth\": -2,\n  \"filthy\": -2,\n  \"fine\": 2,\n  \"fines\": -2,\n  \"finest\": 3,\n  \"fire\": -2,\n  \"fired\": -2,\n  \"firing\": -2,\n  \"fit\": 1,\n  \"fitness\": 1,\n  \"flagship\": 2,\n  \"flaw\": -2,\n  \"flawed\": -3,\n  \"flawless\": 2,\n  \"flawlessly\": 2,\n  \"flaws\": -2,\n  \"flees\": -1,\n  \"flop\": -2,\n  \"flops\": -2,\n  \"flu\": -2,\n  \"flustered\": -2,\n  \"focused\": 2,\n  \"fond\": 2,\n  \"fondness\": 2,\n  \"fool\": -2,\n  \"foolish\": -2,\n  \"fools\": -2,\n  \"forbid\": -1,\n  \"forbidden\": -2,\n  \"forbidding\": -2,\n  \"forced\": -1,\n  \"foreclosure\": -2,\n  \"foreclosures\": -2,\n  \"forefront\": 1,\n  \"forget\": -1,\n  \"forgetful\": -2,\n  \"forgettable\": -1,\n  \"forgive\": 1,\n  \"forgiving\": 1,\n  \"forgot\": -1,\n  \"forgotten\": -1,\n  \"fortunate\": 2,\n  \"fortunately\": 2,\n  \"fortune\": 2,\n  \"foul\": -3,\n  \"frantic\": -1,\n  \"fraud\": -4,\n  \"frauds\": -4,\n  \"fraudster\": -4,\n  \"fraudsters\": -4,\n  \"fraudulence\": -4,\n  \"fraudulent\": -4,\n  \"freak\": -2,\n  \"free\": 1,\n  \"freedom\": 2,\n  \"freedoms\": 2,\n  \"frenzy\": -3,\n  \"fresh\": 1,\n  \"friend\": 1,\n  \"friendliness\": 2,\n  \"friendly\": 2,\n  \"friendship\": 2,\n  \"fright\": -2,\n  \"frightened\": -2,\n  \"frightening\": -3,\n  \"frikin\": -2,\n  \"frisky\": 2,\n  \"frowning\": -1,\n  \"fruitless\": -2,\n  \"frustrate\": -2,\n  \"frustrated\": -2,\n  \"frustrates\": -2,\n  \"frustrating\": -2,\n  \"frustration\": -2,\n  \"ftw\": 3,\n  \"fuck\": -4,\n  \"fucked\": -4,\n  \"fucker\": -4,\n  \"fuckers\": -4,\n  \"fuckface\": -4,\n  \"fuckhead\": -4,\n  \"fuckin\": -4,\n  \"fucking\": -4,\n  \"fucking amazing\": 4,\n  \"fucking beautiful\": 4,\n  \"fucking cute\": 4,\n  \"fucking fantastic\": 4,\n  \"fucking good\": 4,\n  \"fucking great\": 4,\n  \"fucking hot\": 2,\n  \"fucking love\": 4,\n  \"fucking loves\": 4,\n  \"fucking perfect\": 4,\n  \"fucktard\": -4,\n  \"fud\": -3,\n  \"fuked\": -4,\n  \"fuking\": -4,\n  \"fulfill\": 2,\n  \"fulfilled\": 2,\n  \"fulfillment\": 2,\n  \"fulfills\": 2,\n  \"fuming\": -2,\n  \"fun\": 4,\n  \"funeral\": -1,\n  \"funerals\": -1,\n  \"funky\": 2,\n  \"funnier\": 4,\n  \"funny\": 4,\n  \"furious\": -3,\n  \"futile\": -2,\n  \"gag\": -2,\n  \"gagged\": -2,\n  \"gain\": 2,\n  \"gained\": 2,\n  \"gaining\": 2,\n  \"gains\": 2,\n  \"gallant\": 3,\n  \"gallantly\": 3,\n  \"gallantry\": 3,\n  \"game-changing\": 3,\n  \"garbage\": -1,\n  \"gem\": 3,\n  \"generous\": 2,\n  \"generously\": 2,\n  \"genial\": 3,\n  \"ghastly\": -2,\n  \"ghost\": -1,\n  \"giddy\": -2,\n  \"gift\": 2,\n  \"glad\": 3,\n  \"glamorous\": 3,\n  \"glamourous\": 3,\n  \"glee\": 3,\n  \"gleeful\": 3,\n  \"gloom\": -1,\n  \"gloomy\": -2,\n  \"glorious\": 2,\n  \"glory\": 2,\n  \"glum\": -2,\n  \"god\": 1,\n  \"goddamn\": -3,\n  \"godsend\": 4,\n  \"gold\": 2,\n  \"good\": 3,\n  \"goodlooking\": 3,\n  \"goodmorning\": 1,\n  \"goodness\": 3,\n  \"goodwill\": 3,\n  \"goofiness\": -2,\n  \"goofy\": -2,\n  \"gr8\": 3,\n  \"grace\": 1,\n  \"graceful\": 2,\n  \"gracious\": 3,\n  \"grand\": 3,\n  \"grant\": 1,\n  \"granted\": 1,\n  \"granting\": 1,\n  \"grants\": 1,\n  \"grateful\": 3,\n  \"gratification\": 2,\n  \"grave\": -2,\n  \"gray\": -1,\n  \"great\": 3,\n  \"greater\": 3,\n  \"greatest\": 3,\n  \"greed\": -3,\n  \"greedy\": -2,\n  \"green wash\": -3,\n  \"green washing\": -3,\n  \"greenwash\": -3,\n  \"greenwasher\": -3,\n  \"greenwashers\": -3,\n  \"greenwashing\": -3,\n  \"greet\": 1,\n  \"greeted\": 1,\n  \"greeting\": 1,\n  \"greetings\": 2,\n  \"greets\": 1,\n  \"grey\": -1,\n  \"grief\": -2,\n  \"grieved\": -2,\n  \"grim\": -2,\n  \"gripping\": 2,\n  \"grisly\": -2,\n  \"groan\": -2,\n  \"groaned\": -2,\n  \"groaning\": -2,\n  \"groans\": -2,\n  \"gross\": -2,\n  \"growing\": 1,\n  \"growth\": 2,\n  \"growths\": 2,\n  \"gruesome\": -3,\n  \"guarantee\": 1,\n  \"guilt\": -3,\n  \"guilty\": -3,\n  \"gullibility\": -2,\n  \"gullible\": -2,\n  \"gun\": -1,\n  \"ha\": 2,\n  \"hacked\": -1,\n  \"haha\": 3,\n  \"hahaha\": 3,\n  \"hahahah\": 3,\n  \"hail\": 2,\n  \"hailed\": 2,\n  \"hallelujah\": 3,\n  \"handpicked\": 1,\n  \"handsome\": 3,\n  \"hapless\": -2,\n  \"haplessness\": -2,\n  \"happiest\": 3,\n  \"happiness\": 3,\n  \"happy\": 3,\n  \"harass\": -3,\n  \"harassed\": -3,\n  \"harasses\": -3,\n  \"harassing\": -3,\n  \"harassment\": -3,\n  \"hard\": -1,\n  \"hardier\": 2,\n  \"hardship\": -2,\n  \"hardy\": 2,\n  \"harm\": -2,\n  \"harmed\": -2,\n  \"harmful\": -2,\n  \"harming\": -2,\n  \"harmonious\": 2,\n  \"harmoniously\": 2,\n  \"harmony\": 2,\n  \"harms\": -2,\n  \"harried\": -2,\n  \"harsh\": -2,\n  \"harsher\": -2,\n  \"harshest\": -2,\n  \"harshly\": -2,\n  \"hate\": -3,\n  \"hated\": -3,\n  \"hater\": -3,\n  \"haters\": -3,\n  \"hates\": -3,\n  \"hating\": -3,\n  \"hatred\": -3,\n  \"haunt\": -1,\n  \"haunted\": -2,\n  \"haunting\": 1,\n  \"haunts\": -1,\n  \"havoc\": -2,\n  \"hazardous\": -3,\n  \"headache\": -2,\n  \"healthy\": 2,\n  \"heartbreaking\": -3,\n  \"heartbroken\": -3,\n  \"heartfelt\": 3,\n  \"heartless\": -2,\n  \"heartwarming\": 3,\n  \"heaven\": 2,\n  \"heavenly\": 4,\n  \"heavyhearted\": -2,\n  \"hehe\": 2,\n  \"hell\": -4,\n  \"hellish\": -2,\n  \"help\": 2,\n  \"helpful\": 2,\n  \"helping\": 2,\n  \"helpless\": -2,\n  \"helps\": 2,\n  \"hero\": 2,\n  \"heroes\": 2,\n  \"heroic\": 3,\n  \"hesitant\": -2,\n  \"hesitate\": -2,\n  \"hid\": -1,\n  \"hide\": -1,\n  \"hideous\": -3,\n  \"hides\": -1,\n  \"hiding\": -1,\n  \"highlight\": 2,\n  \"hilarious\": 2,\n  \"hinder\": -2,\n  \"hindrance\": -2,\n  \"hoax\": -2,\n  \"hollow\": -1,\n  \"homeless\": -2,\n  \"homesick\": -2,\n  \"homicide\": -2,\n  \"homicides\": -2,\n  \"honest\": 2,\n  \"honor\": 2,\n  \"honored\": 2,\n  \"honoring\": 2,\n  \"honour\": 2,\n  \"honoured\": 2,\n  \"honouring\": 2,\n  \"hooligan\": -2,\n  \"hooliganism\": -2,\n  \"hooligans\": -2,\n  \"hope\": 2,\n  \"hopeful\": 2,\n  \"hopefully\": 2,\n  \"hopeless\": -2,\n  \"hopelessness\": -2,\n  \"hopes\": 2,\n  \"hoping\": 2,\n  \"horrendous\": -3,\n  \"horrible\": -3,\n  \"horrid\": -3,\n  \"horrific\": -3,\n  \"horrified\": -3,\n  \"hospitalized\": -2,\n  \"hostile\": -2,\n  \"huckster\": -2,\n  \"hug\": 2,\n  \"huge\": 1,\n  \"hugs\": 2,\n  \"humane\": 2,\n  \"humble\": 1,\n  \"humbug\": -2,\n  \"humerous\": 3,\n  \"humiliated\": -3,\n  \"humiliation\": -3,\n  \"humor\": 2,\n  \"humorous\": 2,\n  \"humour\": 2,\n  \"humourous\": 2,\n  \"hunger\": -2,\n  \"hurrah\": 5,\n  \"hurt\": -2,\n  \"hurting\": -2,\n  \"hurts\": -2,\n  \"hypocritical\": -2,\n  \"hysteria\": -3,\n  \"hysterical\": -3,\n  \"hysterics\": -3,\n  \"icky\": -3,\n  \"idiocy\": -3,\n  \"idiot\": -3,\n  \"idiotic\": -3,\n  \"ignorance\": -2,\n  \"ignorant\": -2,\n  \"ignore\": -1,\n  \"ignored\": -2,\n  \"ignores\": -1,\n  \"ill\": -2,\n  \"ill-fated\": -2,\n  \"illegal\": -3,\n  \"illegally\": -3,\n  \"illegitimate\": -3,\n  \"illiteracy\": -2,\n  \"illness\": -2,\n  \"illnesses\": -2,\n  \"illogical\": -2,\n  \"imaginative\": 2,\n  \"imbecile\": -3,\n  \"immobilized\": -1,\n  \"immortal\": 2,\n  \"immune\": 1,\n  \"impair\": -2,\n  \"impaired\": -2,\n  \"impairing\": -2,\n  \"impairment\": -2,\n  \"impairs\": -2,\n  \"impatient\": -2,\n  \"impeachment\": -3,\n  \"impeachments\": -3,\n  \"impede\": -2,\n  \"impeded\": -2,\n  \"impedes\": -2,\n  \"impeding\": -2,\n  \"impedingly\": -2,\n  \"imperfect\": -2,\n  \"importance\": 2,\n  \"important\": 2,\n  \"impose\": -1,\n  \"imposed\": -1,\n  \"imposes\": -1,\n  \"imposing\": -1,\n  \"imposter\": -2,\n  \"impotent\": -2,\n  \"impress\": 3,\n  \"impressed\": 3,\n  \"impresses\": 3,\n  \"impressive\": 3,\n  \"imprisoned\": -2,\n  \"imprisonment\": -2,\n  \"improper\": -2,\n  \"improperly\": -2,\n  \"improve\": 2,\n  \"improved\": 2,\n  \"improvement\": 2,\n  \"improves\": 2,\n  \"improving\": 2,\n  \"inability\": -2,\n  \"inaction\": -2,\n  \"inadequate\": -2,\n  \"inadvertently\": -2,\n  \"inappropriate\": -2,\n  \"incapable\": -2,\n  \"incapacitated\": -2,\n  \"incapacitates\": -2,\n  \"incapacitating\": -2,\n  \"incense\": -2,\n  \"incensed\": -2,\n  \"incenses\": -2,\n  \"incensing\": -2,\n  \"incoherent\": -2,\n  \"incompetence\": -2,\n  \"incompetent\": -2,\n  \"incomplete\": -1,\n  \"incomprehensible\": -2,\n  \"inconsiderate\": -2,\n  \"inconvenience\": -2,\n  \"inconvenient\": -2,\n  \"increase\": 1,\n  \"increased\": 1,\n  \"indecisive\": -2,\n  \"indestructible\": 2,\n  \"indicted\": -2,\n  \"indifference\": -2,\n  \"indifferent\": -2,\n  \"indignant\": -2,\n  \"indignation\": -2,\n  \"indoctrinate\": -2,\n  \"indoctrinated\": -2,\n  \"indoctrinates\": -2,\n  \"indoctrinating\": -2,\n  \"inediable\": -2,\n  \"ineffective\": -2,\n  \"ineffectively\": -2,\n  \"ineffectual\": -2,\n  \"inefficiency\": -2,\n  \"inefficient\": -2,\n  \"inefficiently\": -2,\n  \"inept\": -2,\n  \"ineptitude\": -2,\n  \"inexcusable\": -3,\n  \"inexorable\": -3,\n  \"infantile\": -2,\n  \"infantilized\": -2,\n  \"infatuated\": 2,\n  \"infatuation\": 2,\n  \"infect\": -2,\n  \"infected\": -2,\n  \"infecting\": -2,\n  \"infection\": -2,\n  \"infections\": -2,\n  \"infectious\": -2,\n  \"infects\": -2,\n  \"inferior\": -2,\n  \"infest\": -2,\n  \"infested\": -2,\n  \"infesting\": -2,\n  \"infests\": -2,\n  \"inflamed\": -2,\n  \"inflict\": -2,\n  \"inflicted\": -2,\n  \"inflicting\": -2,\n  \"inflicts\": -2,\n  \"influential\": 2,\n  \"infract\": -2,\n  \"infracted\": -2,\n  \"infracting\": -2,\n  \"infracts\": -2,\n  \"infringement\": -2,\n  \"infuriate\": -2,\n  \"infuriated\": -2,\n  \"infuriates\": -2,\n  \"infuriating\": -2,\n  \"inhibit\": -1,\n  \"inhuman\": -2,\n  \"injured\": -2,\n  \"injuries\": -2,\n  \"injury\": -2,\n  \"injustice\": -2,\n  \"innovate\": 1,\n  \"innovates\": 1,\n  \"innovation\": 1,\n  \"innovative\": 2,\n  \"inoperative\": -2,\n  \"inquisition\": -2,\n  \"inquisitive\": 2,\n  \"insane\": -2,\n  \"insanity\": -2,\n  \"insecure\": -2,\n  \"insensitive\": -2,\n  \"insensitivity\": -2,\n  \"insignificant\": -2,\n  \"insipid\": -2,\n  \"insolvent\": -2,\n  \"insomnia\": -2,\n  \"inspiration\": 2,\n  \"inspirational\": 2,\n  \"inspire\": 2,\n  \"inspired\": 2,\n  \"inspires\": 2,\n  \"inspiring\": 3,\n  \"insufficiency\": -2,\n  \"insufficient\": -2,\n  \"insufficiently\": -2,\n  \"insult\": -2,\n  \"insulted\": -2,\n  \"insulting\": -2,\n  \"insults\": -2,\n  \"intact\": 2,\n  \"integrity\": 2,\n  \"intelligent\": 2,\n  \"intense\": 1,\n  \"interest\": 1,\n  \"interested\": 2,\n  \"interesting\": 2,\n  \"interests\": 1,\n  \"interrogated\": -2,\n  \"interrupt\": -2,\n  \"interrupted\": -2,\n  \"interrupting\": -2,\n  \"interruption\": -2,\n  \"interrupts\": -2,\n  \"intimacy\": 2,\n  \"intimidate\": -2,\n  \"intimidated\": -2,\n  \"intimidates\": -2,\n  \"intimidating\": -2,\n  \"intimidation\": -2,\n  \"intransigence\": -2,\n  \"intransigency\": -2,\n  \"intricate\": 2,\n  \"intrigues\": 1,\n  \"invasion\": -1,\n  \"invincible\": 2,\n  \"invite\": 1,\n  \"inviting\": 1,\n  \"invulnerable\": 2,\n  \"irate\": -3,\n  \"ironic\": -1,\n  \"irony\": -1,\n  \"irrational\": -1,\n  \"irreparable\": -2,\n  \"irreproducible\": -2,\n  \"irresistible\": 2,\n  \"irresistibly\": 2,\n  \"irresolute\": -2,\n  \"irresponsible\": -2,\n  \"irresponsibly\": -2,\n  \"irreversible\": -1,\n  \"irreversibly\": -1,\n  \"irritate\": -3,\n  \"irritated\": -3,\n  \"irritates\": -3,\n  \"irritating\": -3,\n  \"isolated\": -1,\n  \"itchy\": -2,\n  \"jackass\": -4,\n  \"jackasses\": -4,\n  \"jailed\": -2,\n  \"jaunty\": 2,\n  \"jealous\": -2,\n  \"jealousy\": -2,\n  \"jeopardy\": -2,\n  \"jerk\": -3,\n  \"jesus\": 1,\n  \"jewel\": 1,\n  \"jewels\": 1,\n  \"jocular\": 2,\n  \"join\": 1,\n  \"joke\": 2,\n  \"jokes\": 2,\n  \"jolly\": 2,\n  \"jovial\": 2,\n  \"joy\": 3,\n  \"joyful\": 3,\n  \"joyfully\": 3,\n  \"joyless\": -2,\n  \"joyous\": 3,\n  \"jubilant\": 3,\n  \"jumpy\": -1,\n  \"justice\": 2,\n  \"justifiably\": 2,\n  \"justified\": 2,\n  \"keen\": 1,\n  \"kickback\": -3,\n  \"kickbacks\": -3,\n  \"kidnap\": -2,\n  \"kidnapped\": -2,\n  \"kidnapping\": -2,\n  \"kidnappings\": -2,\n  \"kidnaps\": -2,\n  \"kill\": -3,\n  \"killed\": -3,\n  \"killing\": -3,\n  \"kills\": -3,\n  \"kind\": 2,\n  \"kind of\": 0,\n  \"kinder\": 2,\n  \"kindness\": 2,\n  \"kiss\": 2,\n  \"kudos\": 3,\n  \"lack\": -2,\n  \"lackadaisical\": -2,\n  \"lag\": -1,\n  \"lagged\": -2,\n  \"lagging\": -2,\n  \"lags\": -2,\n  \"lame\": -2,\n  \"landmark\": 2,\n  \"lapse\": -1,\n  \"lapsed\": -1,\n  \"laugh\": 1,\n  \"laughed\": 1,\n  \"laughing\": 1,\n  \"laughs\": 1,\n  \"laughting\": 1,\n  \"launched\": 1,\n  \"lawl\": 3,\n  \"lawsuit\": -2,\n  \"lawsuits\": -2,\n  \"lazy\": -1,\n  \"leadership\": 1,\n  \"leading\": 2,\n  \"leak\": -1,\n  \"leaked\": -1,\n  \"leave\": -1,\n  \"legal\": 1,\n  \"legally\": 1,\n  \"lenient\": 1,\n  \"lethal\": -2,\n  \"lethality\": -2,\n  \"lethargic\": -2,\n  \"lethargy\": -2,\n  \"liar\": -3,\n  \"liars\": -3,\n  \"libelous\": -2,\n  \"lied\": -2,\n  \"lifeless\": -1,\n  \"lifesaver\": 4,\n  \"lighthearted\": 1,\n  \"likable\": 2,\n  \"like\": 2,\n  \"likeable\": 2,\n  \"liked\": 2,\n  \"likers\": 2,\n  \"likes\": 2,\n  \"liking\": 2,\n  \"limitation\": -1,\n  \"limited\": -1,\n  \"limits\": -1,\n  \"litigation\": -1,\n  \"litigious\": -2,\n  \"lively\": 2,\n  \"livid\": -2,\n  \"lmao\": 4,\n  \"lmfao\": 4,\n  \"loathe\": -3,\n  \"loathed\": -3,\n  \"loathes\": -3,\n  \"loathing\": -3,\n  \"loathsome\": -3,\n  \"lobbied\": -2,\n  \"lobby\": -2,\n  \"lobbying\": -2,\n  \"lobbyist\": -2,\n  \"lobbyists\": -2,\n  \"lol\": 3,\n  \"lolol\": 4,\n  \"lololol\": 4,\n  \"lolololol\": 4,\n  \"lonely\": -2,\n  \"lonesome\": -2,\n  \"longing\": -1,\n  \"lool\": 3,\n  \"loom\": -1,\n  \"loomed\": -1,\n  \"looming\": -1,\n  \"looms\": -1,\n  \"loool\": 3,\n  \"looool\": 3,\n  \"loose\": -3,\n  \"looses\": -3,\n  \"loser\": -3,\n  \"losing\": -3,\n  \"loss\": -3,\n  \"losses\": -3,\n  \"lost\": -3,\n  \"lousy\": -2,\n  \"lovable\": 3,\n  \"love\": 3,\n  \"loved\": 3,\n  \"lovelies\": 3,\n  \"lovely\": 3,\n  \"loves\": 3,\n  \"loving\": 2,\n  \"loving-kindness\": 3,\n  \"lowest\": -1,\n  \"loyal\": 3,\n  \"loyalty\": 3,\n  \"luck\": 3,\n  \"luckily\": 3,\n  \"lucky\": 3,\n  \"lucrative\": 3,\n  \"ludicrous\": -3,\n  \"lugubrious\": -2,\n  \"lunatic\": -3,\n  \"lunatics\": -3,\n  \"lurk\": -1,\n  \"lurking\": -1,\n  \"lurks\": -1,\n  \"luxury\": 2,\n  \"macabre\": -2,\n  \"mad\": -3,\n  \"maddening\": -3,\n  \"made-up\": -1,\n  \"madly\": -3,\n  \"madness\": -3,\n  \"magnificent\": 3,\n  \"maladaption\": -2,\n  \"maldevelopment\": -2,\n  \"maltreatment\": -2,\n  \"mandatory\": -1,\n  \"manipulated\": -1,\n  \"manipulating\": -1,\n  \"manipulation\": -1,\n  \"manslaughter\": -3,\n  \"marvel\": 3,\n  \"marvelous\": 3,\n  \"marvels\": 3,\n  \"masterpiece\": 4,\n  \"masterpieces\": 4,\n  \"matter\": 1,\n  \"matters\": 1,\n  \"mature\": 2,\n  \"meaningful\": 2,\n  \"meaningless\": -2,\n  \"medal\": 3,\n  \"mediocrity\": -3,\n  \"meditative\": 1,\n  \"melancholy\": -2,\n  \"memorable\": 1,\n  \"memoriam\": -2,\n  \"menace\": -2,\n  \"menaced\": -2,\n  \"menaces\": -2,\n  \"mercy\": 2,\n  \"merry\": 3,\n  \"mesmerizing\": 3,\n  \"mess\": -2,\n  \"messed\": -2,\n  \"messing up\": -2,\n  \"methodical\": 2,\n  \"methodically\": 2,\n  \"mindless\": -2,\n  \"miracle\": 4,\n  \"mirth\": 3,\n  \"mirthful\": 3,\n  \"mirthfully\": 3,\n  \"misbehave\": -2,\n  \"misbehaved\": -2,\n  \"misbehaves\": -2,\n  \"misbehaving\": -2,\n  \"misbranding\": -3,\n  \"miscast\": -2,\n  \"mischief\": -1,\n  \"mischiefs\": -1,\n  \"misclassified\": -2,\n  \"misclassifies\": -2,\n  \"misclassify\": -2,\n  \"misconduct\": -2,\n  \"misconducted\": -2,\n  \"misconducting\": -2,\n  \"misconducts\": -2,\n  \"miserable\": -3,\n  \"miserably\": -3,\n  \"misery\": -2,\n  \"misfire\": -2,\n  \"misfortune\": -2,\n  \"misgiving\": -2,\n  \"misinformation\": -2,\n  \"misinformed\": -2,\n  \"misinterpreted\": -2,\n  \"mislead\": -3,\n  \"misleaded\": -3,\n  \"misleading\": -3,\n  \"misleads\": -3,\n  \"misplace\": -2,\n  \"misplaced\": -2,\n  \"misplaces\": -2,\n  \"misplacing\": -2,\n  \"mispricing\": -3,\n  \"misread\": -1,\n  \"misreport\": -2,\n  \"misreported\": -2,\n  \"misreporting\": -2,\n  \"misreports\": -2,\n  \"misrepresent\": -2,\n  \"misrepresentation\": -2,\n  \"misrepresentations\": -2,\n  \"misrepresented\": -2,\n  \"misrepresenting\": -2,\n  \"misrepresents\": -2,\n  \"miss\": -2,\n  \"missed\": -2,\n  \"missing\": -2,\n  \"mistake\": -2,\n  \"mistaken\": -2,\n  \"mistakes\": -2,\n  \"mistaking\": -2,\n  \"misunderstand\": -2,\n  \"misunderstanding\": -2,\n  \"misunderstands\": -2,\n  \"misunderstood\": -2,\n  \"misuse\": -2,\n  \"misused\": -2,\n  \"misuses\": -2,\n  \"misusing\": -2,\n  \"moan\": -2,\n  \"moaned\": -2,\n  \"moaning\": -2,\n  \"moans\": -2,\n  \"mock\": -2,\n  \"mocked\": -2,\n  \"mocking\": -2,\n  \"mocks\": -2,\n  \"modernize\": 2,\n  \"modernized\": 2,\n  \"modernizes\": 2,\n  \"modernizing\": 2,\n  \"mongering\": -2,\n  \"monopolize\": -2,\n  \"monopolized\": -2,\n  \"monopolizes\": -2,\n  \"monopolizing\": -2,\n  \"monotone\": -1,\n  \"moody\": -1,\n  \"mope\": -1,\n  \"moping\": -1,\n  \"moron\": -3,\n  \"motherfucker\": -5,\n  \"motherfucking\": -5,\n  \"motivate\": 1,\n  \"motivated\": 2,\n  \"motivating\": 2,\n  \"motivation\": 1,\n  \"mourn\": -2,\n  \"mourned\": -2,\n  \"mournful\": -2,\n  \"mourning\": -2,\n  \"mourns\": -2,\n  \"muddy\": -2,\n  \"mumpish\": -2,\n  \"murder\": -2,\n  \"murderer\": -2,\n  \"murdering\": -3,\n  \"murderous\": -3,\n  \"murders\": -2,\n  \"murky\": -2,\n  \"myth\": -1,\n  \"n00b\": -2,\n  \"naive\": -2,\n  \"narcissism\": -2,\n  \"nasty\": -3,\n  \"natural\": 1,\n  \"naïve\": -2,\n  \"needy\": -2,\n  \"negative\": -2,\n  \"negativity\": -2,\n  \"neglect\": -2,\n  \"neglected\": -2,\n  \"neglecting\": -2,\n  \"neglects\": -2,\n  \"nerves\": -1,\n  \"nervous\": -2,\n  \"nervously\": -2,\n  \"nice\": 3,\n  \"nifty\": 2,\n  \"niggas\": -5,\n  \"nigger\": -5,\n  \"no\": -1,\n  \"no fun\": -3,\n  \"noble\": 2,\n  \"noblest\": 2,\n  \"noisy\": -1,\n  \"non-approved\": -2,\n  \"nonsense\": -2,\n  \"noob\": -2,\n  \"nosey\": -2,\n  \"not good\": -2,\n  \"not working\": -3,\n  \"notable\": 2,\n  \"noticeable\": 2,\n  \"notorious\": -2,\n  \"novel\": 2,\n  \"numb\": -1,\n  \"nurturing\": 2,\n  \"nuts\": -3,\n  \"obliterate\": -2,\n  \"obliterated\": -2,\n  \"obnoxious\": -3,\n  \"obscene\": -2,\n  \"obscenity\": -2,\n  \"obsessed\": 2,\n  \"obsolete\": -2,\n  \"obstacle\": -2,\n  \"obstacles\": -2,\n  \"obstinate\": -2,\n  \"obstruct\": -2,\n  \"obstructed\": -2,\n  \"obstructing\": -2,\n  \"obstruction\": -2,\n  \"obstructs\": -2,\n  \"odd\": -2,\n  \"offence\": -2,\n  \"offences\": -2,\n  \"offend\": -2,\n  \"offended\": -2,\n  \"offender\": -2,\n  \"offending\": -2,\n  \"offends\": -2,\n  \"offense\": -2,\n  \"offenses\": -2,\n  \"offensive\": -2,\n  \"offensively\": -2,\n  \"offline\": -1,\n  \"oks\": 2,\n  \"ominous\": 3,\n  \"once-in-a-lifetime\": 3,\n  \"oops\": -2,\n  \"opportunities\": 2,\n  \"opportunity\": 2,\n  \"oppressed\": -2,\n  \"oppression\": -2,\n  \"oppressions\": -2,\n  \"oppressive\": -2,\n  \"optimism\": 2,\n  \"optimistic\": 2,\n  \"optionless\": -2,\n  \"ostracize\": -2,\n  \"ostracized\": -2,\n  \"ostracizes\": -2,\n  \"ouch\": -2,\n  \"outage\": -2,\n  \"outages\": -2,\n  \"outbreak\": -2,\n  \"outbreaks\": -2,\n  \"outcry\": -2,\n  \"outmaneuvered\": -2,\n  \"outnumbered\": -2,\n  \"outrage\": -3,\n  \"outraged\": -3,\n  \"outrageous\": -3,\n  \"outreach\": 2,\n  \"outstanding\": 5,\n  \"overjoyed\": 4,\n  \"overload\": -1,\n  \"overlooked\": -1,\n  \"overprotective\": -2,\n  \"overran\": -2,\n  \"overreact\": -2,\n  \"overreacted\": -2,\n  \"overreacting\": -2,\n  \"overreaction\": -2,\n  \"overreacts\": -2,\n  \"oversell\": -2,\n  \"overselling\": -2,\n  \"oversells\": -2,\n  \"oversight\": -1,\n  \"oversimplification\": -2,\n  \"oversimplified\": -2,\n  \"oversimplifies\": -2,\n  \"oversimplify\": -2,\n  \"oversold\": -2,\n  \"overstatement\": -2,\n  \"overstatements\": -2,\n  \"overweight\": -1,\n  \"overwrought\": -3,\n  \"oxymoron\": -1,\n  \"pain\": -2,\n  \"pained\": -2,\n  \"painful\": -2,\n  \"panic\": -3,\n  \"panicked\": -3,\n  \"panics\": -3,\n  \"paradise\": 3,\n  \"paradox\": -1,\n  \"pardon\": 2,\n  \"pardoned\": 2,\n  \"pardoning\": 2,\n  \"pardons\": 2,\n  \"parley\": -1,\n  \"passion\": 1,\n  \"passionate\": 2,\n  \"passive\": -1,\n  \"passively\": -1,\n  \"pathetic\": -2,\n  \"pay\": -1,\n  \"peace\": 2,\n  \"peaceful\": 2,\n  \"peacefully\": 2,\n  \"penalize\": -2,\n  \"penalized\": -2,\n  \"penalizes\": -2,\n  \"penalizing\": -2,\n  \"penalty\": -2,\n  \"pensive\": -1,\n  \"perfect\": 3,\n  \"perfected\": 2,\n  \"perfection\": 3,\n  \"perfectly\": 3,\n  \"perfects\": 2,\n  \"peril\": -2,\n  \"perjury\": -3,\n  \"perpetrated\": -2,\n  \"perpetrator\": -2,\n  \"perpetrators\": -2,\n  \"perplexed\": -2,\n  \"persecute\": -2,\n  \"persecuted\": -2,\n  \"persecutes\": -2,\n  \"persecuting\": -2,\n  \"perturbed\": -2,\n  \"pervert\": -3,\n  \"pesky\": -2,\n  \"pessimism\": -2,\n  \"pessimistic\": -2,\n  \"petrified\": -2,\n  \"philanthropy\": 2,\n  \"phobic\": -2,\n  \"picturesque\": 2,\n  \"pileup\": -1,\n  \"pillage\": -2,\n  \"pique\": -2,\n  \"piqued\": -2,\n  \"piss\": -4,\n  \"pissed\": -4,\n  \"pissing\": -3,\n  \"piteous\": -2,\n  \"pitied\": -1,\n  \"pity\": -2,\n  \"plague\": -3,\n  \"plagued\": -3,\n  \"plagues\": -3,\n  \"plaguing\": -3,\n  \"playful\": 2,\n  \"pleasant\": 3,\n  \"please\": 1,\n  \"pleased\": 3,\n  \"pleasurable\": 3,\n  \"pleasure\": 3,\n  \"plodding\": -2,\n  \"poignant\": 2,\n  \"pointless\": -2,\n  \"poised\": -2,\n  \"poison\": -2,\n  \"poisoned\": -2,\n  \"poisons\": -2,\n  \"polished\": 2,\n  \"polite\": 2,\n  \"politeness\": 2,\n  \"pollutant\": -2,\n  \"pollute\": -2,\n  \"polluted\": -2,\n  \"polluter\": -2,\n  \"polluters\": -2,\n  \"pollutes\": -2,\n  \"pollution\": -2,\n  \"poor\": -2,\n  \"poorer\": -2,\n  \"poorest\": -2,\n  \"poorly\": -2,\n  \"popular\": 3,\n  \"popularity\": 3,\n  \"positive\": 2,\n  \"positively\": 2,\n  \"possessive\": -2,\n  \"post-traumatic\": -2,\n  \"postpone\": -1,\n  \"postponed\": -1,\n  \"postpones\": -1,\n  \"postponing\": -1,\n  \"poverty\": -1,\n  \"powerful\": 2,\n  \"powerless\": -2,\n  \"praise\": 3,\n  \"praised\": 3,\n  \"praises\": 3,\n  \"praising\": 3,\n  \"pray\": 1,\n  \"praying\": 1,\n  \"prays\": 1,\n  \"prblm\": -2,\n  \"prblms\": -2,\n  \"predatory\": -2,\n  \"prepared\": 1,\n  \"pressure\": -1,\n  \"pressured\": -2,\n  \"pretend\": -1,\n  \"pretending\": -1,\n  \"pretends\": -1,\n  \"pretty\": 1,\n  \"prevent\": -1,\n  \"prevented\": -1,\n  \"preventing\": -1,\n  \"prevents\": -1,\n  \"prick\": -5,\n  \"prison\": -2,\n  \"prisoner\": -2,\n  \"prisoners\": -2,\n  \"privileged\": 2,\n  \"proactive\": 2,\n  \"problem\": -2,\n  \"problems\": -2,\n  \"profit\": 2,\n  \"profitable\": 2,\n  \"profiteer\": -2,\n  \"profits\": 2,\n  \"progress\": 2,\n  \"prohibit\": -1,\n  \"prohibits\": -1,\n  \"prominent\": 2,\n  \"promise\": 1,\n  \"promised\": 1,\n  \"promises\": 1,\n  \"promote\": 1,\n  \"promoted\": 1,\n  \"promotes\": 1,\n  \"promoting\": 1,\n  \"promptly\": 1,\n  \"propaganda\": -2,\n  \"prosecute\": -1,\n  \"prosecuted\": -2,\n  \"prosecutes\": -1,\n  \"prosecution\": -1,\n  \"prospect\": 1,\n  \"prospects\": 1,\n  \"prosperity\": 3,\n  \"prosperous\": 3,\n  \"protect\": 1,\n  \"protected\": 1,\n  \"protects\": 1,\n  \"protest\": -2,\n  \"protesters\": -2,\n  \"protesting\": -2,\n  \"protests\": -2,\n  \"proud\": 2,\n  \"proudly\": 2,\n  \"provoke\": -1,\n  \"provoked\": -1,\n  \"provokes\": -1,\n  \"provoking\": -1,\n  \"prudence\": 2,\n  \"pseudoscience\": -3,\n  \"psychopathic\": -2,\n  \"punish\": -2,\n  \"punished\": -2,\n  \"punishes\": -2,\n  \"punishing\": -2,\n  \"punitive\": -2,\n  \"pure\": 1,\n  \"purest\": 1,\n  \"purposeful\": 2,\n  \"pushy\": -1,\n  \"puzzled\": -2,\n  \"quaking\": -2,\n  \"qualities\": 2,\n  \"quality\": 2,\n  \"questionable\": -2,\n  \"questioned\": -1,\n  \"questioning\": -1,\n  \"racism\": -3,\n  \"racist\": -3,\n  \"racists\": -3,\n  \"rage\": -2,\n  \"rageful\": -2,\n  \"rainy\": -1,\n  \"rant\": -3,\n  \"ranter\": -3,\n  \"ranters\": -3,\n  \"rants\": -3,\n  \"rape\": -4,\n  \"raped\": -4,\n  \"rapist\": -4,\n  \"rapture\": 2,\n  \"raptured\": 2,\n  \"raptures\": 2,\n  \"rapturous\": 4,\n  \"rash\": -2,\n  \"ratified\": 2,\n  \"reach\": 1,\n  \"reached\": 1,\n  \"reaches\": 1,\n  \"reaching\": 1,\n  \"reassure\": 1,\n  \"reassured\": 1,\n  \"reassures\": 1,\n  \"reassuring\": 2,\n  \"rebel\": -2,\n  \"rebellion\": -2,\n  \"rebels\": -2,\n  \"recession\": -2,\n  \"reckless\": -2,\n  \"recognition\": 2,\n  \"recommend\": 2,\n  \"recommended\": 2,\n  \"recommends\": 2,\n  \"redeemed\": 2,\n  \"refine\": 1,\n  \"refined\": 1,\n  \"refines\": 1,\n  \"refreshingly\": 2,\n  \"refuse\": -2,\n  \"refused\": -2,\n  \"refuses\": -2,\n  \"refusing\": -2,\n  \"regret\": -2,\n  \"regretful\": -2,\n  \"regrets\": -2,\n  \"regretted\": -2,\n  \"regretting\": -2,\n  \"reigning\": 1,\n  \"reject\": -1,\n  \"rejected\": -1,\n  \"rejecting\": -1,\n  \"rejection\": -2,\n  \"rejects\": -1,\n  \"rejoice\": 4,\n  \"rejoiced\": 4,\n  \"rejoices\": 4,\n  \"rejoicing\": 4,\n  \"relaxed\": 2,\n  \"relentless\": -1,\n  \"reliability\": 2,\n  \"reliable\": 2,\n  \"reliably\": 2,\n  \"reliant\": 2,\n  \"relieve\": 1,\n  \"relieved\": 2,\n  \"relieves\": 1,\n  \"relieving\": 2,\n  \"relishing\": 2,\n  \"remarkable\": 2,\n  \"remorse\": -2,\n  \"repellent\": -2,\n  \"repercussion\": -2,\n  \"repercussions\": -2,\n  \"reprimand\": -2,\n  \"reprimanded\": -2,\n  \"reprimanding\": -2,\n  \"reprimands\": -2,\n  \"repulse\": -1,\n  \"repulsed\": -2,\n  \"repulsive\": -2,\n  \"rescue\": 2,\n  \"rescued\": 2,\n  \"rescues\": 2,\n  \"resentful\": -2,\n  \"resign\": -1,\n  \"resigned\": -1,\n  \"resigning\": -1,\n  \"resigns\": -1,\n  \"resolute\": 2,\n  \"resolution\": 2,\n  \"resolve\": 2,\n  \"resolved\": 2,\n  \"resolves\": 2,\n  \"resolving\": 2,\n  \"respect\": 2,\n  \"respected\": 2,\n  \"respects\": 2,\n  \"responsibility\": 1,\n  \"responsible\": 2,\n  \"responsive\": 2,\n  \"restful\": 2,\n  \"restless\": -2,\n  \"restore\": 1,\n  \"restored\": 1,\n  \"restores\": 1,\n  \"restoring\": 1,\n  \"restrict\": -2,\n  \"restricted\": -2,\n  \"restricting\": -2,\n  \"restriction\": -2,\n  \"restrictive\": -1,\n  \"restricts\": -2,\n  \"retained\": -1,\n  \"retard\": -2,\n  \"retarded\": -2,\n  \"retreat\": -1,\n  \"revenge\": -2,\n  \"revengeful\": -2,\n  \"revered\": 2,\n  \"revive\": 2,\n  \"revives\": 2,\n  \"revolting\": -2,\n  \"reward\": 2,\n  \"rewarded\": 2,\n  \"rewarding\": 2,\n  \"rewards\": 2,\n  \"rich\": 2,\n  \"richly\": 2,\n  \"ridiculous\": -3,\n  \"rig\": -1,\n  \"rigged\": -1,\n  \"right direction\": 3,\n  \"righteousness\": 2,\n  \"rightful\": 2,\n  \"rightfully\": 2,\n  \"rigorous\": 3,\n  \"rigorously\": 3,\n  \"riot\": -2,\n  \"riots\": -2,\n  \"rise\": 1,\n  \"rises\": 1,\n  \"risk\": -2,\n  \"risks\": -2,\n  \"risky\": -2,\n  \"riveting\": 3,\n  \"rob\": -2,\n  \"robber\": -2,\n  \"robed\": -2,\n  \"robing\": -2,\n  \"robs\": -2,\n  \"robust\": 2,\n  \"rofl\": 4,\n  \"roflcopter\": 4,\n  \"roflmao\": 4,\n  \"romance\": 2,\n  \"romantical\": 2,\n  \"romantically\": 2,\n  \"rose\": 1,\n  \"rotfl\": 4,\n  \"rotflmfao\": 4,\n  \"rotflol\": 4,\n  \"rotten\": -3,\n  \"rude\": -2,\n  \"ruin\": -2,\n  \"ruined\": -2,\n  \"ruining\": -2,\n  \"ruins\": -2,\n  \"sabotage\": -2,\n  \"sad\": -2,\n  \"sadden\": -2,\n  \"saddened\": -2,\n  \"sadly\": -2,\n  \"safe\": 1,\n  \"safely\": 1,\n  \"safer\": 2,\n  \"safety\": 1,\n  \"salient\": 1,\n  \"salute\": 2,\n  \"saluted\": 2,\n  \"salutes\": 2,\n  \"saluting\": 2,\n  \"salvation\": 2,\n  \"sappy\": -1,\n  \"sarcastic\": -2,\n  \"satisfied\": 2,\n  \"savange\": -2,\n  \"savanges\": -2,\n  \"save\": 2,\n  \"saved\": 2,\n  \"savings\": 1,\n  \"scam\": -2,\n  \"scams\": -2,\n  \"scandal\": -3,\n  \"scandalous\": -3,\n  \"scandals\": -3,\n  \"scapegoat\": -2,\n  \"scapegoats\": -2,\n  \"scar\": -2,\n  \"scare\": -2,\n  \"scared\": -2,\n  \"scars\": -2,\n  \"scary\": -2,\n  \"sceptical\": -2,\n  \"scold\": -2,\n  \"scoop\": 3,\n  \"scorn\": -2,\n  \"scornful\": -2,\n  \"scream\": -2,\n  \"screamed\": -2,\n  \"screaming\": -2,\n  \"screams\": -2,\n  \"screwed\": -2,\n  \"screwed up\": -3,\n  \"scum\": -3,\n  \"scumbag\": -4,\n  \"seamless\": 2,\n  \"seamlessly\": 2,\n  \"secure\": 2,\n  \"secured\": 2,\n  \"secures\": 2,\n  \"sedition\": -2,\n  \"seditious\": -2,\n  \"seduced\": -1,\n  \"self-abuse\": -2,\n  \"self-confident\": 2,\n  \"self-contradictory\": -2,\n  \"self-deluded\": -2,\n  \"selfish\": -3,\n  \"selfishness\": -3,\n  \"sentence\": -2,\n  \"sentenced\": -2,\n  \"sentences\": -2,\n  \"sentencing\": -2,\n  \"serene\": 2,\n  \"settlement\": 1,\n  \"settlements\": 1,\n  \"severe\": -2,\n  \"severely\": -2,\n  \"sexist\": -2,\n  \"sexistic\": -2,\n  \"sexy\": 3,\n  \"shaky\": -2,\n  \"shame\": -2,\n  \"shamed\": -2,\n  \"shameful\": -2,\n  \"share\": 1,\n  \"shared\": 1,\n  \"shares\": 1,\n  \"shattered\": -2,\n  \"shit\": -4,\n  \"shithead\": -4,\n  \"shitty\": -3,\n  \"shock\": -2,\n  \"shocked\": -2,\n  \"shocking\": -2,\n  \"shocks\": -2,\n  \"shoody\": -2,\n  \"shoot\": -1,\n  \"short-sighted\": -2,\n  \"short-sightedness\": -2,\n  \"shortage\": -2,\n  \"shortages\": -2,\n  \"shrew\": -4,\n  \"shy\": -1,\n  \"sick\": -2,\n  \"sickness\": -2,\n  \"side-effect\": -2,\n  \"side-effects\": -2,\n  \"sigh\": -2,\n  \"significance\": 1,\n  \"significant\": 1,\n  \"silencing\": -1,\n  \"silly\": -1,\n  \"simplicity\": 1,\n  \"sin\": -2,\n  \"sincere\": 2,\n  \"sincerely\": 2,\n  \"sincerest\": 2,\n  \"sincerity\": 2,\n  \"sinful\": -3,\n  \"singleminded\": -2,\n  \"sinister\": -2,\n  \"sins\": -2,\n  \"skeptic\": -2,\n  \"skeptical\": -2,\n  \"skepticism\": -2,\n  \"skeptics\": -2,\n  \"slam\": -2,\n  \"slash\": -2,\n  \"slashed\": -2,\n  \"slashes\": -2,\n  \"slashing\": -2,\n  \"slave\": -3,\n  \"slavery\": -3,\n  \"slaves\": -3,\n  \"sleeplessness\": -2,\n  \"slick\": 2,\n  \"slicker\": 2,\n  \"slickest\": 2,\n  \"slip\": -1,\n  \"sloppy\": -2,\n  \"sluggish\": -2,\n  \"slumping\": -1,\n  \"slut\": -5,\n  \"smart\": 1,\n  \"smarter\": 2,\n  \"smartest\": 2,\n  \"smear\": -2,\n  \"smile\": 2,\n  \"smiled\": 2,\n  \"smiles\": 2,\n  \"smiling\": 2,\n  \"smog\": -2,\n  \"smuggle\": -2,\n  \"smuggled\": -2,\n  \"smuggles\": -2,\n  \"smuggling\": -2,\n  \"sneaky\": -1,\n  \"sneeze\": -2,\n  \"sneezed\": -2,\n  \"sneezes\": -2,\n  \"sneezing\": -2,\n  \"snub\": -2,\n  \"snubbed\": -2,\n  \"snubbing\": -2,\n  \"snubs\": -2,\n  \"sobering\": 1,\n  \"solemn\": -1,\n  \"solid\": 2,\n  \"solidarity\": 2,\n  \"solidified\": 2,\n  \"solidifies\": 2,\n  \"solidify\": 2,\n  \"solidifying\": 2,\n  \"solution\": 1,\n  \"solutions\": 1,\n  \"solve\": 1,\n  \"solved\": 1,\n  \"solves\": 1,\n  \"solving\": 1,\n  \"somber\": -2,\n  \"some kind\": 0,\n  \"son-of-a-bitch\": -5,\n  \"soothe\": 3,\n  \"soothed\": 3,\n  \"soothing\": 3,\n  \"sophisticated\": 2,\n  \"sore\": -1,\n  \"sorrow\": -2,\n  \"sorrowful\": -2,\n  \"sorry\": -1,\n  \"spacious\": 1,\n  \"spam\": -2,\n  \"spammer\": -3,\n  \"spammers\": -3,\n  \"spamming\": -2,\n  \"spark\": 1,\n  \"sparkle\": 3,\n  \"sparkles\": 3,\n  \"sparkling\": 3,\n  \"spearhead\": 2,\n  \"speculative\": -2,\n  \"spirit\": 1,\n  \"spirited\": 2,\n  \"spiritless\": -2,\n  \"spiteful\": -2,\n  \"splendid\": 3,\n  \"spoiled\": -2,\n  \"spoilt\": -2,\n  \"spotless\": 2,\n  \"sprightly\": 2,\n  \"squander\": -2,\n  \"squandered\": -2,\n  \"squandering\": -2,\n  \"squanders\": -2,\n  \"squelched\": -1,\n  \"stab\": -2,\n  \"stabbed\": -2,\n  \"stable\": 2,\n  \"stabs\": -2,\n  \"stall\": -2,\n  \"stalled\": -2,\n  \"stalling\": -2,\n  \"stamina\": 2,\n  \"stampede\": -2,\n  \"stank\": -2,\n  \"startled\": -2,\n  \"startling\": 3,\n  \"starve\": -2,\n  \"starved\": -2,\n  \"starves\": -2,\n  \"starving\": -2,\n  \"steadfast\": 2,\n  \"steal\": -2,\n  \"stealing\": -2,\n  \"steals\": -2,\n  \"stereotype\": -2,\n  \"stereotyped\": -2,\n  \"stifled\": -1,\n  \"stimulate\": 1,\n  \"stimulated\": 1,\n  \"stimulates\": 1,\n  \"stimulating\": 2,\n  \"stingy\": -2,\n  \"stink\": -2,\n  \"stinked\": -2,\n  \"stinker\": -2,\n  \"stinking\": -2,\n  \"stinks\": -2,\n  \"stinky\": -2,\n  \"stole\": -2,\n  \"stolen\": -2,\n  \"stop\": -1,\n  \"stopped\": -1,\n  \"stopping\": -1,\n  \"stops\": -1,\n  \"stout\": 2,\n  \"straight\": 1,\n  \"strange\": -1,\n  \"strangely\": -1,\n  \"strangled\": -2,\n  \"strength\": 2,\n  \"strengthen\": 2,\n  \"strengthened\": 2,\n  \"strengthening\": 2,\n  \"strengthens\": 2,\n  \"strengths\": 2,\n  \"stress\": -1,\n  \"stressed\": -2,\n  \"stressor\": -2,\n  \"stressors\": -2,\n  \"stricken\": -2,\n  \"strike\": -1,\n  \"strikers\": -2,\n  \"strikes\": -1,\n  \"strong\": 2,\n  \"stronger\": 2,\n  \"strongest\": 2,\n  \"struck\": -1,\n  \"struggle\": -2,\n  \"struggled\": -2,\n  \"struggles\": -2,\n  \"struggling\": -2,\n  \"stubborn\": -2,\n  \"stuck\": -2,\n  \"stunned\": -2,\n  \"stunning\": 4,\n  \"stupid\": -2,\n  \"stupidity\": -3,\n  \"stupidly\": -2,\n  \"suave\": 2,\n  \"subpoena\": -2,\n  \"substantial\": 1,\n  \"substantially\": 1,\n  \"subversive\": -2,\n  \"succeed\": 3,\n  \"succeeded\": 3,\n  \"succeeding\": 3,\n  \"succeeds\": 3,\n  \"success\": 2,\n  \"successful\": 3,\n  \"successfully\": 3,\n  \"suck\": -3,\n  \"sucks\": -3,\n  \"sue\": -2,\n  \"sued\": -2,\n  \"sueing\": -2,\n  \"sues\": -2,\n  \"suffer\": -2,\n  \"suffered\": -2,\n  \"sufferer\": -2,\n  \"sufferers\": -2,\n  \"suffering\": -2,\n  \"suffers\": -2,\n  \"suicidal\": -2,\n  \"suicide\": -2,\n  \"suicides\": -2,\n  \"suing\": -2,\n  \"suitable\": 2,\n  \"suited\": 2,\n  \"sulking\": -2,\n  \"sulky\": -2,\n  \"sullen\": -2,\n  \"sunshine\": 2,\n  \"super\": 3,\n  \"superb\": 5,\n  \"superior\": 2,\n  \"support\": 2,\n  \"supported\": 2,\n  \"supporter\": 1,\n  \"supporters\": 1,\n  \"supporting\": 1,\n  \"supportive\": 2,\n  \"supports\": 2,\n  \"supreme\": 4,\n  \"survived\": 2,\n  \"surviving\": 2,\n  \"survivor\": 2,\n  \"suspect\": -1,\n  \"suspected\": -1,\n  \"suspecting\": -1,\n  \"suspects\": -1,\n  \"suspend\": -1,\n  \"suspended\": -1,\n  \"suspicious\": -2,\n  \"sustainability\": 1,\n  \"sustainable\": 2,\n  \"sustainably\": 2,\n  \"swear\": -2,\n  \"swearing\": -2,\n  \"swears\": -2,\n  \"sweet\": 2,\n  \"sweeter\": 3,\n  \"sweetest\": 3,\n  \"swift\": 2,\n  \"swiftly\": 2,\n  \"swindle\": -3,\n  \"swindles\": -3,\n  \"swindling\": -3,\n  \"sympathetic\": 2,\n  \"sympathy\": 2,\n  \"taint\": -2,\n  \"tainted\": -2,\n  \"talent\": 2,\n  \"tard\": -2,\n  \"tarnish\": -2,\n  \"tarnished\": -2,\n  \"tarnishes\": -2,\n  \"tears\": -2,\n  \"tender\": 2,\n  \"tenderness\": 2,\n  \"tense\": -2,\n  \"tension\": -1,\n  \"terrible\": -3,\n  \"terribly\": -3,\n  \"terrific\": 4,\n  \"terrifically\": 4,\n  \"terrified\": -3,\n  \"terror\": -3,\n  \"terrorist\": -2,\n  \"terrorists\": -2,\n  \"terrorize\": -3,\n  \"terrorized\": -3,\n  \"terrorizes\": -3,\n  \"thank\": 2,\n  \"thankful\": 2,\n  \"thanks\": 2,\n  \"thorny\": -2,\n  \"thoughtful\": 2,\n  \"thoughtless\": -2,\n  \"threat\": -2,\n  \"threaten\": -2,\n  \"threatened\": -2,\n  \"threatening\": -2,\n  \"threatens\": -2,\n  \"threats\": -2,\n  \"thrilled\": 5,\n  \"thwart\": -2,\n  \"thwarted\": -2,\n  \"thwarting\": -2,\n  \"thwarts\": -2,\n  \"timid\": -2,\n  \"timorous\": -2,\n  \"tired\": -2,\n  \"tits\": -2,\n  \"tolerance\": 2,\n  \"tolerant\": 2,\n  \"toothless\": -2,\n  \"top\": 2,\n  \"tops\": 2,\n  \"torn\": -2,\n  \"torture\": -4,\n  \"tortured\": -4,\n  \"tortures\": -4,\n  \"torturing\": -4,\n  \"totalitarian\": -2,\n  \"totalitarianism\": -2,\n  \"tout\": -2,\n  \"touted\": -2,\n  \"touting\": -2,\n  \"touts\": -2,\n  \"toxic\": -3,\n  \"tragedies\": -2,\n  \"tragedy\": -2,\n  \"tragic\": -2,\n  \"tranquil\": 2,\n  \"transgress\": -2,\n  \"transgressed\": -2,\n  \"transgresses\": -2,\n  \"transgressing\": -2,\n  \"trap\": -1,\n  \"trapped\": -2,\n  \"traps\": -1,\n  \"trauma\": -3,\n  \"traumatic\": -3,\n  \"travesty\": -2,\n  \"treason\": -3,\n  \"treasonous\": -3,\n  \"treasure\": 2,\n  \"treasures\": 2,\n  \"trembling\": -2,\n  \"tremor\": -2,\n  \"tremors\": -2,\n  \"tremulous\": -2,\n  \"tribulation\": -2,\n  \"tribute\": 2,\n  \"tricked\": -2,\n  \"trickery\": -2,\n  \"triumph\": 4,\n  \"triumphant\": 4,\n  \"troll\": -2,\n  \"trouble\": -2,\n  \"troubled\": -2,\n  \"troubles\": -2,\n  \"troubling\": -2,\n  \"true\": 2,\n  \"trust\": 1,\n  \"trusted\": 2,\n  \"trusts\": 1,\n  \"tumor\": -2,\n  \"twat\": -5,\n  \"tyran\": -3,\n  \"tyrannic\": -3,\n  \"tyrannical\": -3,\n  \"tyrannically\": -3,\n  \"tyrans\": -3,\n  \"ubiquitous\": 2,\n  \"ugh\": -2,\n  \"ugliness\": -3,\n  \"ugly\": -3,\n  \"unable\": -2,\n  \"unacceptable\": -2,\n  \"unappeasable\": -2,\n  \"unappreciated\": -2,\n  \"unapproved\": -2,\n  \"unattractive\": -2,\n  \"unavailable\": -1,\n  \"unavailing\": -2,\n  \"unaware\": -2,\n  \"unbearable\": -2,\n  \"unbelievable\": -1,\n  \"unbelieving\": -1,\n  \"unbiased\": 2,\n  \"uncertain\": -1,\n  \"unclear\": -1,\n  \"uncomfortable\": -2,\n  \"unconcerned\": -2,\n  \"unconfirmed\": -1,\n  \"unconvinced\": -1,\n  \"uncredited\": -1,\n  \"undecided\": -1,\n  \"undercooked\": -2,\n  \"underestimate\": -1,\n  \"underestimated\": -1,\n  \"underestimates\": -1,\n  \"underestimating\": -1,\n  \"undermine\": -2,\n  \"undermined\": -2,\n  \"undermines\": -2,\n  \"undermining\": -2,\n  \"underperform\": -2,\n  \"underperformed\": -2,\n  \"underperforming\": -2,\n  \"underperforms\": -2,\n  \"undeserving\": -2,\n  \"undesirable\": -2,\n  \"uneasy\": -2,\n  \"unemployed\": -1,\n  \"unemployment\": -2,\n  \"unequal\": -1,\n  \"unequaled\": 2,\n  \"unethical\": -2,\n  \"uneventful\": -2,\n  \"unfair\": -2,\n  \"unfavorable\": -2,\n  \"unfit\": -2,\n  \"unfitted\": -2,\n  \"unfocused\": -2,\n  \"unforgivable\": -3,\n  \"unforgiving\": -2,\n  \"unfulfilled\": -2,\n  \"unfunny\": -2,\n  \"ungenerous\": -2,\n  \"ungrateful\": -3,\n  \"unhappiness\": -2,\n  \"unhappy\": -2,\n  \"unhealthy\": -2,\n  \"unhygienic\": -2,\n  \"unified\": 1,\n  \"unimaginative\": -2,\n  \"unimpressed\": -2,\n  \"uninspired\": -2,\n  \"unintelligent\": -2,\n  \"unintentional\": -2,\n  \"uninvolving\": -2,\n  \"united\": 1,\n  \"unjust\": -2,\n  \"unlikely\": -1,\n  \"unlovable\": -2,\n  \"unloved\": -2,\n  \"unmatched\": 1,\n  \"unmotivated\": -2,\n  \"unoriginal\": -2,\n  \"unparliamentary\": -2,\n  \"unpleasant\": -2,\n  \"unpleasantness\": -2,\n  \"unprofessional\": -2,\n  \"unravel\": 1,\n  \"unreleting\": -2,\n  \"unresearched\": -2,\n  \"unsafe\": -2,\n  \"unsatisfied\": -2,\n  \"unscientific\": -2,\n  \"unsecured\": -2,\n  \"unselfish\": 2,\n  \"unsettled\": -1,\n  \"unsold\": -1,\n  \"unsophisticated\": -2,\n  \"unsound\": -2,\n  \"unstable\": -2,\n  \"unstoppable\": 2,\n  \"unsuccessful\": -2,\n  \"unsuccessfully\": -2,\n  \"unsupported\": -2,\n  \"unsure\": -1,\n  \"untarnished\": 2,\n  \"untrue\": -2,\n  \"unwanted\": -2,\n  \"unworthy\": -2,\n  \"uplifting\": 2,\n  \"uproar\": -3,\n  \"upset\": -2,\n  \"upsets\": -2,\n  \"upsetting\": -2,\n  \"uptight\": -2,\n  \"urgent\": -1,\n  \"useful\": 2,\n  \"usefulness\": 2,\n  \"useless\": -2,\n  \"uselessness\": -2,\n  \"vague\": -2,\n  \"validate\": 1,\n  \"validated\": 1,\n  \"validates\": 1,\n  \"validating\": 1,\n  \"vapid\": -2,\n  \"verdict\": -1,\n  \"verdicts\": -1,\n  \"vested\": 1,\n  \"vexation\": -2,\n  \"vexing\": -2,\n  \"vibrant\": 3,\n  \"vicious\": -2,\n  \"victim\": -3,\n  \"victimization\": -3,\n  \"victimize\": -3,\n  \"victimized\": -3,\n  \"victimizes\": -3,\n  \"victimizing\": -3,\n  \"victims\": -3,\n  \"victor\": 3,\n  \"victories\": 3,\n  \"victors\": 3,\n  \"victory\": 3,\n  \"vigilant\": 3,\n  \"vigor\": 3,\n  \"vile\": -3,\n  \"vindicate\": 2,\n  \"vindicated\": 2,\n  \"vindicates\": 2,\n  \"vindicating\": 2,\n  \"violate\": -2,\n  \"violated\": -2,\n  \"violates\": -2,\n  \"violating\": -2,\n  \"violation\": -2,\n  \"violations\": -2,\n  \"violence\": -3,\n  \"violence-related\": -3,\n  \"violent\": -3,\n  \"violently\": -3,\n  \"virtuous\": 2,\n  \"virulent\": -2,\n  \"vision\": 1,\n  \"visionary\": 3,\n  \"visioning\": 1,\n  \"visions\": 1,\n  \"vitality\": 3,\n  \"vitamin\": 1,\n  \"vitriolic\": -3,\n  \"vivacious\": 3,\n  \"vividly\": 2,\n  \"vociferous\": -1,\n  \"vomit\": -3,\n  \"vomited\": -3,\n  \"vomiting\": -3,\n  \"vomits\": -3,\n  \"vulnerability\": -2,\n  \"vulnerable\": -2,\n  \"walkout\": -2,\n  \"walkouts\": -2,\n  \"wanker\": -3,\n  \"want\": 1,\n  \"war\": -2,\n  \"warfare\": -2,\n  \"warm\": 1,\n  \"warmhearted\": 2,\n  \"warmness\": 2,\n  \"warmth\": 2,\n  \"warn\": -2,\n  \"warned\": -2,\n  \"warning\": -3,\n  \"warnings\": -3,\n  \"warns\": -2,\n  \"waste\": -1,\n  \"wasted\": -2,\n  \"wasting\": -2,\n  \"wavering\": -1,\n  \"weak\": -2,\n  \"weakened\": -2,\n  \"weakness\": -2,\n  \"weaknesses\": -2,\n  \"wealth\": 3,\n  \"wealthier\": 2,\n  \"wealthy\": 2,\n  \"weary\": -2,\n  \"weep\": -2,\n  \"weeping\": -2,\n  \"weird\": -2,\n  \"welcome\": 2,\n  \"welcomed\": 2,\n  \"welcomes\": 2,\n  \"well-being\": 2,\n  \"well-championed\": 3,\n  \"well-developed\": 2,\n  \"well-established\": 2,\n  \"well-focused\": 2,\n  \"well-groomed\": 2,\n  \"well-proportioned\": 2,\n  \"whimsical\": 1,\n  \"whitewash\": -3,\n  \"whore\": -4,\n  \"wicked\": -2,\n  \"widowed\": -1,\n  \"willingness\": 2,\n  \"win\": 4,\n  \"winner\": 4,\n  \"winning\": 4,\n  \"wins\": 4,\n  \"winwin\": 3,\n  \"wisdom\": 1,\n  \"wish\": 1,\n  \"wishes\": 1,\n  \"wishing\": 1,\n  \"withdrawal\": -3,\n  \"wits\": 2,\n  \"woebegone\": -2,\n  \"woeful\": -3,\n  \"won\": 3,\n  \"wonderful\": 4,\n  \"wonderfully\": 4,\n  \"woo\": 3,\n  \"woohoo\": 3,\n  \"wooo\": 4,\n  \"woow\": 4,\n  \"worn\": -1,\n  \"worried\": -3,\n  \"worries\": -3,\n  \"worry\": -3,\n  \"worrying\": -3,\n  \"worse\": -3,\n  \"worsen\": -3,\n  \"worsened\": -3,\n  \"worsening\": -3,\n  \"worsens\": -3,\n  \"worshiped\": 3,\n  \"worst\": -3,\n  \"worth\": 2,\n  \"worthless\": -2,\n  \"worthy\": 2,\n  \"wow\": 4,\n  \"wowow\": 4,\n  \"wowww\": 4,\n  \"wrathful\": -3,\n  \"wreck\": -2,\n  \"wrenching\": -2,\n  \"wrong\": -2,\n  \"wrongdoing\": -2,\n  \"wrongdoings\": -2,\n  \"wronged\": -2,\n  \"wrongful\": -2,\n  \"wrongfully\": -2,\n  \"wrongly\": -2,\n  \"wtf\": -4,\n  \"wtff\": -4,\n  \"wtfff\": -4,\n  \"xo\": 3,\n  \"xoxo\": 3,\n  \"xoxoxo\": 4,\n  \"xoxoxoxo\": 4,\n  \"yeah\": 1,\n  \"yearning\": 1,\n  \"yeees\": 2,\n  \"yes\": 1,\n  \"youthful\": 2,\n  \"yucky\": -2,\n  \"yummy\": 3,\n  \"zealot\": -2,\n  \"zealots\": -2,\n  \"zealous\": 2,\n  \"💯\": 3,\n  \"😠\": -3,\n  \"😧\": -3,\n  \"😲\": 2,\n  \"🖤\": 3,\n  \"💙\": 3,\n  \"😊\": 2,\n  \"💔\": -3,\n  \"👏\": 3,\n  \"🤡\": 0,\n  \"😰\": -2,\n  \"😖\": -2,\n  \"😕\": -2,\n  \"🤠\": 2,\n  \"🤞\": 2,\n  \"😢\": -2,\n  \"😿\": -2,\n  \"💘\": 3,\n  \"😞\": -2,\n  \"😥\": -1,\n  \"😵\": -1,\n  \"🤤\": 0,\n  \"😑\": 0,\n  \"🤕\": -2,\n  \"🤒\": -1,\n  \"😨\": -2,\n  \"😳\": -2,\n  \"😦\": -1,\n  \"☹️\": -2,\n  \"🖕\": -4,\n  \"👻\": -1,\n  \"💝\": 3,\n  \"💚\": 3,\n  \"😬\": -2,\n  \"😁\": 2,\n  \"😀\": 2,\n  \"🤝\": 1,\n  \"❤️\": 3,\n  \"😍\": 3,\n  \"😻\": 3,\n  \"💓\": 3,\n  \"💗\": 3,\n  \"🤗\": 2,\n  \"😯\": -1,\n  \"👿\": -4,\n  \"😇\": 3,\n  \"😂\": 3,\n  \"😹\": 3,\n  \"💋\": 2,\n  \"😗\": 2,\n  \"😽\": 2,\n  \"😚\": 2,\n  \"😘\": 3,\n  \"😙\": 2,\n  \"😆\": 1,\n  \"👄\": 2,\n  \"🤥\": -2,\n  \"😷\": -1,\n  \"🤑\": 0,\n  \"🤢\": -2,\n  \"🤓\": -1,\n  \"😐\": 0,\n  \"😶\": 0,\n  \"👌\": 2,\n  \"😮\": -2,\n  \"😔\": -1,\n  \"😣\": -2,\n  \"😾\": -4,\n  \"🙏\": 1,\n  \"👊\": -1,\n  \"💜\": 3,\n  \"😡\": -4,\n  \"🙌\": 4,\n  \"☺️\": 2,\n  \"😌\": 2,\n  \"💞\": 3,\n  \"🤣\": 4,\n  \"🙄\": -1,\n  \"😱\": -3,\n  \"🙀\": -3,\n  \"💩\": -3,\n  \"💀\": -2,\n  \"☠️\": -2,\n  \"😴\": 0,\n  \"😪\": 0,\n  \"🙁\": -1,\n  \"🙂\": 1,\n  \"😄\": 2,\n  \"😸\": 2,\n  \"😃\": 2,\n  \"😺\": 2,\n  \"😈\": -3,\n  \"😏\": 2,\n  \"😼\": 2,\n  \"🤧\": -2,\n  \"😭\": -3,\n  \"💖\": 3,\n  \"😛\": 1,\n  \"😝\": 0,\n  \"😜\": -1,\n  \"😎\": 1,\n  \"😓\": -1,\n  \"😅\": 2,\n  \"🤔\": -1,\n  \"👎\": -2,\n  \"👍\": 2,\n  \"😫\": -2,\n  \"😤\": 0,\n  \"💕\": 3,\n  \"😒\": -2,\n  \"🙃\": 0,\n  \"✌️\": 2,\n  \"😩\": -2,\n  \"😉\": 3,\n  \"😟\": -3,\n  \"💛\": 3,\n  \"😋\": 3,\n  \"🤐\": -1,\n  \":100:\": 3,\n  \":angry:\": -3,\n  \":anguished:\": -3,\n  \":astonished:\": 2,\n  \":black_heart:\": 3,\n  \":blue_heart:\": 3,\n  \":blush:\": 2,\n  \":broken_heart:\": -3,\n  \":clap:\": 3,\n  \":clown_face:\": 0,\n  \":cold_sweat:\": -2,\n  \":confounded:\": -2,\n  \":confused:\": -2,\n  \":cowboy_hat_face:\": 2,\n  \":crossed_fingers:\": 2,\n  \":cry:\": -2,\n  \":crying_cat_face:\": -2,\n  \":cupid:\": 3,\n  \":disappointed:\": -2,\n  \":disappointed_relieved:\": -1,\n  \":dizzy_face:\": -1,\n  \":drooling_face:\": 0,\n  \":expressionless:\": 0,\n  \":face_with_head_bandage:\": -2,\n  \":face_with_thermometer:\": -1,\n  \":fearful:\": -2,\n  \":flushed:\": -2,\n  \":frowning:\": -1,\n  \":frowning_face:\": -2,\n  \":middle_finger:\": -4,\n  \":ghost:\": -1,\n  \":gift_heart:\": 3,\n  \":green_heart:\": 3,\n  \":grimacing:\": -2,\n  \":grin:\": 2,\n  \":grinning:\": 2,\n  \":handshake:\": 1,\n  \":heart:\": 3,\n  \":heart_eyes:\": 3,\n  \":heart_eyes_cat:\": 3,\n  \":heartbeat:\": 3,\n  \":heartpulse:\": 3,\n  \":hugs:\": 2,\n  \":hushed:\": -1,\n  \":imp:\": -4,\n  \":innocent:\": 3,\n  \":joy:\": 3,\n  \":joy_cat:\": 3,\n  \":kiss:\": 2,\n  \":kissing:\": 2,\n  \":kissing_cat:\": 2,\n  \":kissing_closed_eyes:\": 2,\n  \":kissing_heart:\": 3,\n  \":kissing_smiling_eyes:\": 2,\n  \":laughing:\": 1,\n  \":lips:\": 2,\n  \":lying_face:\": -2,\n  \":mask:\": -1,\n  \":money_mouth_face:\": 0,\n  \":nauseated_face:\": -2,\n  \":nerd_face:\": -1,\n  \":neutral_face:\": 0,\n  \":no_mouth:\": 0,\n  \":ok_hand:\": 2,\n  \":open_mouth:\": -2,\n  \":pensive:\": -1,\n  \":persevere:\": -2,\n  \":pouting_cat:\": -4,\n  \":pray:\": 1,\n  \":fist_oncoming:\": -1,\n  \":purple_heart:\": 3,\n  \":rage:\": -4,\n  \":raised_hands:\": 4,\n  \":relaxed:\": 2,\n  \":relieved:\": 2,\n  \":revolving_hearts:\": 3,\n  \":rofl:\": 4,\n  \":roll_eyes:\": -1,\n  \":scream:\": -3,\n  \":scream_cat:\": -3,\n  \":hankey:\": -3,\n  \":skull:\": -2,\n  \":skull_and_crossbones:\": -2,\n  \":sleeping:\": 0,\n  \":sleepy:\": 0,\n  \":slightly_frowning_face:\": -1,\n  \":slightly_smiling_face:\": 1,\n  \":smile:\": 2,\n  \":smile_cat:\": 2,\n  \":smiley:\": 2,\n  \":smiley_cat:\": 2,\n  \":smiling_imp:\": -3,\n  \":smirk:\": 2,\n  \":smirk_cat:\": 2,\n  \":sneezing_face:\": -2,\n  \":sob:\": -3,\n  \":sparkling_heart:\": 3,\n  \":stuck_out_tongue:\": 1,\n  \":stuck_out_tongue_closed_eyes:\": 0,\n  \":stuck_out_tongue_winking_eye:\": -1,\n  \":sunglasses:\": 1,\n  \":sweat:\": -1,\n  \":sweat_smile:\": 2,\n  \":thinking:\": -1,\n  \":-1:\": -2,\n  \":+1:\": 2,\n  \":tired_face:\": -2,\n  \":triumph:\": 0,\n  \":two_hearts:\": 3,\n  \":unamused:\": -2,\n  \":upside_down_face:\": 0,\n  \":v:\": 2,\n  \":weary:\": -2,\n  \":wink:\": 3,\n  \":worried:\": -3,\n  \":yellow_heart:\": 3,\n  \":yum:\": 3,\n  \":zipper_mouth_face:\": -1,\n  \">:(\": -3,\n  \">:[\": -3,\n  \">:-(\": -3,\n  \">:-[\": -3,\n  \">=(\": -3,\n  \">=[\": -3,\n  \">=-(\": -3,\n  \">=-[\": -3,\n  \":\\\")\": 2,\n  \":\\\"]\": 2,\n  \":\\\"D\": 2,\n  \":-\\\")\": 2,\n  \":-\\\"]\": 2,\n  \":-\\\"D\": 2,\n  \"=\\\")\": 2,\n  \"=\\\"]\": 2,\n  \"=\\\"D\": 2,\n  \"=-\\\")\": 2,\n  \"=-\\\"]\": 2,\n  \"=-\\\"D\": 2,\n  \"<\\\\3\": -3,\n  \"</3\": -3,\n  \":/\": -2,\n  \":\\\\\": -2,\n  \":-/\": -2,\n  \":-\\\\\": -2,\n  \"=/\": -2,\n  \"=\\\\\": -2,\n  \"=-/\": -2,\n  \"=-\\\\\": -2,\n  \":,(\": -2,\n  \":,[\": -2,\n  \":,|\": -2,\n  \":,-(\": -2,\n  \":,-[\": -2,\n  \":,-|\": -2,\n  \":'(\": -2,\n  \":'[\": -2,\n  \":'|\": -2,\n  \":'-(\": -2,\n  \":'-[\": -2,\n  \":'-|\": -2,\n  \"=,(\": -2,\n  \"=,[\": -2,\n  \"=,|\": -2,\n  \"=,-(\": -2,\n  \"=,-[\": -2,\n  \"=,-|\": -2,\n  \"='(\": -2,\n  \"='[\": -2,\n  \"='|\": -2,\n  \"='-(\": -2,\n  \"='-[\": -2,\n  \"='-|\": -2,\n  \":(\": -1,\n  \":[\": -1,\n  \":-(\": -1,\n  \":-[\": -1,\n  \"=(\": -1,\n  \"=[\": -1,\n  \"=-(\": -1,\n  \"=-[\": -1,\n  \"<3\": 3,\n  \"]:(\": -4,\n  \"]:[\": -4,\n  \"]:-(\": -4,\n  \"]:-[\": -4,\n  \"]=(\": -4,\n  \"]=[\": -4,\n  \"]=-(\": -4,\n  \"]=-[\": -4,\n  \"o:)\": 3,\n  \"o:]\": 3,\n  \"o:D\": 3,\n  \"o:-)\": 3,\n  \"o:-]\": 3,\n  \"o:-D\": 3,\n  \"o=)\": 3,\n  \"o=]\": 3,\n  \"o=D\": 3,\n  \"o=-)\": 3,\n  \"o=-]\": 3,\n  \"o=-D\": 3,\n  \"O:)\": 3,\n  \"O:]\": 3,\n  \"O:D\": 3,\n  \"O:-)\": 3,\n  \"O:-]\": 3,\n  \"O:-D\": 3,\n  \"O=)\": 3,\n  \"O=]\": 3,\n  \"O=D\": 3,\n  \"O=-)\": 3,\n  \"O=-]\": 3,\n  \"O=-D\": 3,\n  \"0:)\": 3,\n  \"0:]\": 3,\n  \"0:D\": 3,\n  \"0:-)\": 3,\n  \"0:-]\": 3,\n  \"0:-D\": 3,\n  \"0=)\": 3,\n  \"0=]\": 3,\n  \"0=D\": 3,\n  \"0=-)\": 3,\n  \"0=-]\": 3,\n  \"0=-D\": 3,\n  \":,)\": 3,\n  \":,]\": 3,\n  \":,D\": 3,\n  \":,-)\": 3,\n  \":,-]\": 3,\n  \":,-D\": 3,\n  \":')\": 3,\n  \":']\": 3,\n  \":'D\": 3,\n  \":'-)\": 3,\n  \":'-]\": 3,\n  \":'-D\": 3,\n  \"=,)\": 3,\n  \"=,]\": 3,\n  \"=,D\": 3,\n  \"=,-)\": 3,\n  \"=,-]\": 3,\n  \"=,-D\": 3,\n  \"=')\": 3,\n  \"=']\": 3,\n  \"='D\": 3,\n  \"='-)\": 3,\n  \"='-]\": 3,\n  \"='-D\": 3,\n  \":*\": 2,\n  \":-*\": 2,\n  \"=*\": 2,\n  \"=-*\": 2,\n  \"x)\": 1,\n  \"x]\": 1,\n  \"xD\": 1,\n  \"x-)\": 1,\n  \"x-]\": 1,\n  \"x-D\": 1,\n  \"X)\": 1,\n  \"X]\": 1,\n  \"X-)\": 1,\n  \"X-]\": 1,\n  \"X-D\": 1,\n  \":|\": 0,\n  \":-|\": 0,\n  \"=|\": 0,\n  \"=-|\": 0,\n  \":-\": 0,\n  \":o\": -2,\n  \":O\": -2,\n  \":0\": -2,\n  \":-o\": -2,\n  \":-O\": -2,\n  \":-0\": -2,\n  \"=o\": -2,\n  \"=O\": -2,\n  \"=0\": -2,\n  \"=-o\": -2,\n  \"=-O\": -2,\n  \"=-0\": -2,\n  \":@\": -4,\n  \":-@\": -4,\n  \"=@\": -4,\n  \"=-@\": -4,\n  \":D\": 2,\n  \":-D\": 2,\n  \"=D\": 2,\n  \"=-D\": 2,\n  \":)\": 2,\n  \":]\": 2,\n  \":-)\": 2,\n  \":-]\": 2,\n  \"=)\": 2,\n  \"=]\": 2,\n  \"=-)\": 2,\n  \"=-]\": 2,\n  \"]:)\": -3,\n  \"]:]\": -3,\n  \"]:D\": -3,\n  \"]:-)\": -3,\n  \"]:-]\": -3,\n  \"]:-D\": -3,\n  \"]=)\": -3,\n  \"]=]\": -3,\n  \"]=D\": -3,\n  \"]=-)\": -3,\n  \"]=-]\": -3,\n  \"]=-D\": -3,\n  \":,'(\": -3,\n  \":,'[\": -3,\n  \":,'-(\": -3,\n  \":,'-[\": -3,\n  \":',(\": -3,\n  \":',[\": -3,\n  \":',-(\": -3,\n  \":',-[\": -3,\n  \"=,'(\": -3,\n  \"=,'[\": -3,\n  \"=,'-(\": -3,\n  \"=,'-[\": -3,\n  \"=',(\": -3,\n  \"=',[\": -3,\n  \"=',-(\": -3,\n  \"=',-[\": -3,\n  \":p\": 1,\n  \":P\": 1,\n  \":d\": 1,\n  \":-p\": 1,\n  \":-P\": 1,\n  \":-d\": 1,\n  \"=p\": 1,\n  \"=P\": 1,\n  \"=d\": 1,\n  \"=-p\": 1,\n  \"=-P\": 1,\n  \"=-d\": 1,\n  \"xP\": 0,\n  \"x-p\": 0,\n  \"x-P\": 0,\n  \"x-d\": 0,\n  \"Xp\": 0,\n  \"Xd\": 0,\n  \"X-p\": 0,\n  \"X-P\": 0,\n  \"X-d\": 0,\n  \";p\": -1,\n  \";P\": -1,\n  \";d\": -1,\n  \";-p\": -1,\n  \";-P\": -1,\n  \";-d\": -1,\n  \"8)\": 1,\n  \"8]\": 1,\n  \"8D\": 1,\n  \"8-)\": 1,\n  \"8-]\": 1,\n  \"8-D\": 1,\n  \"B)\": 1,\n  \"B]\": 1,\n  \"B-)\": 1,\n  \"B-]\": 1,\n  \"B-D\": 1,\n  \",:(\": -1,\n  \",:[\": -1,\n  \",:-(\": -1,\n  \",:-[\": -1,\n  \",=(\": -1,\n  \",=[\": -1,\n  \",=-(\": -1,\n  \",=-[\": -1,\n  \"':(\": -1,\n  \"':[\": -1,\n  \"':-(\": -1,\n  \"':-[\": -1,\n  \"'=(\": -1,\n  \"'=[\": -1,\n  \"'=-(\": -1,\n  \"'=-[\": -1,\n  \",:)\": 2,\n  \",:]\": 2,\n  \",:D\": 2,\n  \",:-)\": 2,\n  \",:-]\": 2,\n  \",:-D\": 2,\n  \",=)\": 2,\n  \",=]\": 2,\n  \",=D\": 2,\n  \",=-)\": 2,\n  \",=-]\": 2,\n  \",=-D\": 2,\n  \"':)\": 2,\n  \"':]\": 2,\n  \"':D\": 2,\n  \"':-)\": 2,\n  \"':-]\": 2,\n  \"':-D\": 2,\n  \"'=)\": 2,\n  \"'=]\": 2,\n  \"'=D\": 2,\n  \"'=-)\": 2,\n  \"'=-]\": 2,\n  \"'=-D\": 2,\n  \":$\": -2,\n  \":s\": -2,\n  \":z\": -2,\n  \":S\": -2,\n  \":Z\": -2,\n  \":-$\": -2,\n  \":-s\": -2,\n  \":-z\": -2,\n  \":-S\": -2,\n  \":-Z\": -2,\n  \"=$\": -2,\n  \"=s\": -2,\n  \"=z\": -2,\n  \"=S\": -2,\n  \"=Z\": -2,\n  \"=-$\": -2,\n  \"=-s\": -2,\n  \"=-z\": -2,\n  \"=-S\": -2,\n  \"=-Z\": -2,\n  \";)\": 3,\n  \";]\": 3,\n  \";D\": 3,\n  \";-)\": 3,\n  \";-]\": 3,\n  \";-D\": 3\n}\n","'use strict';\n\nvar visit = require('unist-util-visit');\nvar nlcstToString = require('nlcst-to-string');\nvar polarities = require('./index.json');\n\nmodule.exports = sentiment;\n\nvar own = {}.hasOwnProperty;\n\nvar NEUTRAL = 'neutral';\nvar POSITIVE = 'positive';\nvar NEGATIVE = 'negative';\n\n/* Patch `polarity` and `valence` properties on nodes\n * with a value and word-nodes. Then, patch the same\n * properties on their parents. */\nfunction sentiment(options) {\n  return transformer;\n\n  function transformer(node) {\n    var concatenate = concatenateFactory();\n\n    visit(node, any(options));\n    visit(node, concatenate);\n\n    concatenate.done();\n  }\n}\n\n/* Factory to gather parents and patch them based on their\n * childrens directionality. */\nfunction concatenateFactory() {\n  var queue = [];\n\n  concatenate.done = done;\n\n  return concatenate;\n\n  /* Gather a parent if not already gathered. */\n  function concatenate(node, index, parent) {\n    if (\n      parent &&\n      parent.type !== 'WordNode' &&\n      queue.indexOf(parent) === -1\n    ) {\n      queue.push(parent);\n    }\n  }\n\n  /* Patch all words in `parent`. */\n  function one(node) {\n    var children = node.children;\n    var length = children.length;\n    var polarity = 0;\n    var index = -1;\n    var child;\n    var hasNegation;\n\n    while (++index < length) {\n      child = children[index];\n\n      if (child.data && child.data.polarity) {\n        polarity += (hasNegation ? -1 : 1) * child.data.polarity;\n      }\n\n      /* If the value is a word, remove any present\n       * negation. Otherwise, add negation if the\n       * node contains it. */\n      if (child.type === 'WordNode') {\n        if (hasNegation) {\n          hasNegation = false;\n        } else if (isNegation(child)) {\n          hasNegation = true;\n        }\n      }\n    }\n\n    patch(node, polarity);\n  }\n\n  /* Patch all parents. */\n  function done() {\n    var length = queue.length;\n    var index = -1;\n\n    queue.reverse();\n\n    while (++index < length) {\n      one(queue[index]);\n    }\n  }\n}\n\n/* Factory to patch based on the bound `config`. */\nfunction any(config) {\n  return setter;\n\n  /* Patch data-properties on `node`s with a value and words. */\n  function setter(node) {\n    var value;\n    var polarity;\n\n    if ('value' in node || node.type === 'WordNode') {\n      value = nlcstToString(node);\n\n      if (config && own.call(config, value)) {\n        polarity = config[value];\n      } else if (own.call(polarities, value)) {\n        polarity = polarities[value];\n      }\n\n      if (polarity) {\n        patch(node, polarity);\n      }\n    }\n  }\n}\n\n/* Patch a `polarity` and valence property on `node`s. */\nfunction patch(node, polarity) {\n  var data = node.data || {};\n\n  data.polarity = polarity || 0;\n  data.valence = classify(polarity);\n\n  node.data = data;\n}\n\n/* Detect if a value is used to negate something. */\nfunction isNegation(node) {\n  var value;\n\n  value = nlcstToString(node).toLowerCase();\n\n  if (\n    value === 'not' ||\n    value === 'neither' ||\n    value === 'nor' ||\n    /n['’]t/.test(value)\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\n/* Classify, from a given `polarity` between `-5` and\n * `5`, if the polarity is `NEGATIVE` (negative),\n * `NEUTRAL` (0), or `POSITIVE` (positive). */\nfunction classify(polarity) {\n  if (polarity > 0) {\n    return POSITIVE;\n  }\n\n  return polarity < 0 ? NEGATIVE : NEUTRAL;\n}\n","'use strict';\n\nvar buffer = require('is-buffer');\nvar vfile = require('vfile');\n\nmodule.exports = toVFile;\n\n/* Create a virtual file from a description.\n * If `options` is a string or a buffer, it’s used as the\n * path.  In all other cases, the options are passed through\n * to `vfile()`. */\nfunction toVFile(options) {\n  if (typeof options === 'string' || buffer(options)) {\n    options = {path: String(options)};\n  }\n\n  return vfile(options);\n}\n","'use strict';\n\n/* Expose. */\nmodule.exports = trough;\n\n/* Methods. */\nvar slice = [].slice;\n\n/* Create new middleware. */\nfunction trough() {\n  var fns = [];\n  var middleware = {};\n\n  middleware.run = run;\n  middleware.use = use;\n\n  return middleware;\n\n  /* Run `fns`.  Last argument must be\n   * a completion handler. */\n  function run() {\n    var index = -1;\n    var input = slice.call(arguments, 0, -1);\n    var done = arguments[arguments.length - 1];\n\n    if (typeof done !== 'function') {\n      throw new Error('Expected function as last argument, not ' + done);\n    }\n\n    next.apply(null, [null].concat(input));\n\n    /* Run the next `fn`, if any. */\n    function next(err) {\n      var fn = fns[++index];\n      var params = slice.call(arguments, 0);\n      var values = params.slice(1);\n      var length = input.length;\n      var pos = -1;\n\n      if (err) {\n        done(err);\n        return;\n      }\n\n      /* Copy non-nully input into values. */\n      while (++pos < length) {\n        if (values[pos] === null || values[pos] === undefined) {\n          values[pos] = input[pos];\n        }\n      }\n\n      input = values;\n\n      /* Next or done. */\n      if (fn) {\n        wrap(fn, next).apply(null, input);\n      } else {\n        done.apply(null, [null].concat(input));\n      }\n    }\n  }\n\n  /* Add `fn` to the list. */\n  function use(fn) {\n    if (typeof fn !== 'function') {\n      throw new Error('Expected `fn` to be a function, not ' + fn);\n    }\n\n    fns.push(fn);\n\n    return middleware;\n  }\n}\n\n/* Wrap `fn`.  Can be sync or async; return a promise,\n * receive a completion handler, return new values and\n * errors. */\nfunction wrap(fn, next) {\n  var invoked;\n\n  return wrapped;\n\n  function wrapped() {\n    var params = slice.call(arguments, 0);\n    var callback = fn.length > params.length;\n    var result;\n\n    if (callback) {\n      params.push(done);\n    }\n\n    try {\n      result = fn.apply(null, params);\n    } catch (err) {\n      /* Well, this is quite the pickle.  `fn` received\n       * a callback and invoked it (thus continuing the\n       * pipeline), but later also threw an error.\n       * We’re not about to restart the pipeline again,\n       * so the only thing left to do is to throw the\n       * thing instea. */\n      if (callback && invoked) {\n        throw err;\n      }\n\n      return done(err);\n    }\n\n    if (!callback) {\n      if (result && typeof result.then === 'function') {\n        result.then(then, done);\n      } else if (result instanceof Error) {\n        done(result);\n      } else {\n        then(result);\n      }\n    }\n  }\n\n  /* Invoke `next`, only once. */\n  function done() {\n    if (!invoked) {\n      invoked = true;\n\n      next.apply(null, arguments);\n    }\n  }\n\n  /* Invoke `done` with one value.\n   * Tracks if an error is passed, too. */\n  function then(value) {\n    done(null, value);\n  }\n}\n","/**\n * @author Titus Wormer\n * @copyright 2015 Titus Wormer\n * @license MIT\n * @module unherit\n * @fileoverview Create a custom constructor which can be modified\n *   without affecting the original class.\n */\n\n'use strict';\n\n/* Dependencies. */\nvar xtend = require('xtend');\nvar inherits = require('inherits');\n\n/* Expose. */\nmodule.exports = unherit;\n\n/**\n * Create a custom constructor which can be modified\n * without affecting the original class.\n *\n * @param {Function} Super - Super-class.\n * @return {Function} - Constructor acting like `Super`,\n *   which can be modified without affecting the original\n *   class.\n */\nfunction unherit(Super) {\n  var result;\n  var key;\n  var value;\n\n  inherits(Of, Super);\n  inherits(From, Of);\n\n  /* Clone values. */\n  result = Of.prototype;\n\n  for (key in result) {\n    value = result[key];\n\n    if (value && typeof value === 'object') {\n      result[key] = 'concat' in value ? value.concat() : xtend(value);\n    }\n  }\n\n  return Of;\n\n  /**\n   * Constructor accepting a single argument,\n   * which itself is an `arguments` object.\n   */\n  function From(parameters) {\n    return Super.apply(this, parameters);\n  }\n\n  /**\n   * Constructor accepting variadic arguments.\n   */\n  function Of() {\n    if (!(this instanceof Of)) {\n      return new From(arguments);\n    }\n\n    return Super.apply(this, arguments);\n  }\n}\n","'use strict';\n\n/* Dependencies. */\nvar extend = require('extend');\nvar bail = require('bail');\nvar vfile = require('vfile');\nvar trough = require('trough');\nvar string = require('x-is-string');\nvar func = require('x-is-function');\nvar plain = require('is-plain-obj');\n\n/* Expose a frozen processor. */\nmodule.exports = unified().freeze();\n\nvar slice = [].slice;\nvar own = {}.hasOwnProperty;\n\n/* Process pipeline. */\nvar pipeline = trough().use(pipelineParse).use(pipelineRun).use(pipelineStringify);\n\nfunction pipelineParse(p, ctx) {\n  ctx.tree = p.parse(ctx.file);\n}\n\nfunction pipelineRun(p, ctx, next) {\n  p.run(ctx.tree, ctx.file, done);\n\n  function done(err, tree, file) {\n    if (err) {\n      next(err);\n    } else {\n      ctx.tree = tree;\n      ctx.file = file;\n      next();\n    }\n  }\n}\n\nfunction pipelineStringify(p, ctx) {\n  ctx.file.contents = p.stringify(ctx.tree, ctx.file);\n}\n\n/* Function to create the first processor. */\nfunction unified() {\n  var attachers = [];\n  var transformers = trough();\n  var namespace = {};\n  var frozen = false;\n  var freezeIndex = -1;\n\n  /* Data management. */\n  processor.data = data;\n\n  /* Lock. */\n  processor.freeze = freeze;\n\n  /* Plug-ins. */\n  processor.attachers = attachers;\n  processor.use = use;\n\n  /* API. */\n  processor.parse = parse;\n  processor.stringify = stringify;\n  processor.run = run;\n  processor.runSync = runSync;\n  processor.process = process;\n  processor.processSync = processSync;\n\n  /* Expose. */\n  return processor;\n\n  /* Create a new processor based on the processor\n   * in the current scope. */\n  function processor() {\n    var destination = unified();\n    var length = attachers.length;\n    var index = -1;\n\n    while (++index < length) {\n      destination.use.apply(null, attachers[index]);\n    }\n\n    destination.data(extend(true, {}, namespace));\n\n    return destination;\n  }\n\n  /* Freeze: used to signal a processor that has finished\n   * configuration.\n   *\n   * For example, take unified itself.  It’s frozen.\n   * Plug-ins should not be added to it.  Rather, it should\n   * be extended, by invoking it, before modifying it.\n   *\n   * In essence, always invoke this when exporting a\n   * processor. */\n  function freeze() {\n    var values;\n    var plugin;\n    var options;\n    var transformer;\n\n    if (frozen) {\n      return processor;\n    }\n\n    while (++freezeIndex < attachers.length) {\n      values = attachers[freezeIndex];\n      plugin = values[0];\n      options = values[1];\n      transformer = null;\n\n      if (options === false) {\n        continue;\n      }\n\n      if (options === true) {\n        values[1] = undefined;\n      }\n\n      transformer = plugin.apply(processor, values.slice(1));\n\n      if (func(transformer)) {\n        transformers.use(transformer);\n      }\n    }\n\n    frozen = true;\n    freezeIndex = Infinity;\n\n    return processor;\n  }\n\n  /* Data management.\n   * Getter / setter for processor-specific informtion. */\n  function data(key, value) {\n    if (string(key)) {\n      /* Set `key`. */\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen);\n\n        namespace[key] = value;\n\n        return processor;\n      }\n\n      /* Get `key`. */\n      return (own.call(namespace, key) && namespace[key]) || null;\n    }\n\n    /* Set space. */\n    if (key) {\n      assertUnfrozen('data', frozen);\n      namespace = key;\n      return processor;\n    }\n\n    /* Get space. */\n    return namespace;\n  }\n\n  /* Plug-in management.\n   *\n   * Pass it:\n   * *   an attacher and options,\n   * *   a preset,\n   * *   a list of presets, attachers, and arguments (list\n   *     of attachers and options). */\n  function use(value) {\n    var settings;\n\n    assertUnfrozen('use', frozen);\n\n    if (value === null || value === undefined) {\n      /* Empty */\n    } else if (func(value)) {\n      addPlugin.apply(null, arguments);\n    } else if (typeof value === 'object') {\n      if ('length' in value) {\n        addList(value);\n      } else {\n        addPreset(value);\n      }\n    } else {\n      throw new Error('Expected usable value, not `' + value + '`');\n    }\n\n    if (settings) {\n      namespace.settings = extend(namespace.settings || {}, settings);\n    }\n\n    return processor;\n\n    function addPreset(result) {\n      addList(result.plugins);\n\n      if (result.settings) {\n        settings = extend(settings || {}, result.settings);\n      }\n    }\n\n    function add(value) {\n      if (func(value)) {\n        addPlugin(value);\n      } else if (typeof value === 'object') {\n        if ('length' in value) {\n          addPlugin.apply(null, value);\n        } else {\n          addPreset(value);\n        }\n      } else {\n        throw new Error('Expected usable value, not `' + value + '`');\n      }\n    }\n\n    function addList(plugins) {\n      var length;\n      var index;\n\n      if (plugins === null || plugins === undefined) {\n        /* Empty */\n      } else if (typeof plugins === 'object' && 'length' in plugins) {\n        length = plugins.length;\n        index = -1;\n\n        while (++index < length) {\n          add(plugins[index]);\n        }\n      } else {\n        throw new Error('Expected a list of plugins, not `' + plugins + '`');\n      }\n    }\n\n    function addPlugin(plugin, value) {\n      var entry = find(plugin);\n\n      if (entry) {\n        if (plain(entry[1]) && plain(value)) {\n          value = extend(entry[1], value);\n        }\n\n        entry[1] = value;\n      } else {\n        attachers.push(slice.call(arguments));\n      }\n    }\n  }\n\n  function find(plugin) {\n    var length = attachers.length;\n    var index = -1;\n    var entry;\n\n    while (++index < length) {\n      entry = attachers[index];\n\n      if (entry[0] === plugin) {\n        return entry;\n      }\n    }\n  }\n\n  /* Parse a file (in string or VFile representation)\n   * into a Unist node using the `Parser` on the\n   * processor. */\n  function parse(doc) {\n    var file = vfile(doc);\n    var Parser;\n\n    freeze();\n    Parser = processor.Parser;\n    assertParser('parse', Parser);\n\n    if (newable(Parser)) {\n      return new Parser(String(file), file).parse();\n    }\n\n    return Parser(String(file), file); // eslint-disable-line new-cap\n  }\n\n  /* Run transforms on a Unist node representation of a file\n   * (in string or VFile representation), async. */\n  function run(node, file, cb) {\n    assertNode(node);\n    freeze();\n\n    if (!cb && func(file)) {\n      cb = file;\n      file = null;\n    }\n\n    if (!cb) {\n      return new Promise(executor);\n    }\n\n    executor(null, cb);\n\n    function executor(resolve, reject) {\n      transformers.run(node, vfile(file), done);\n\n      function done(err, tree, file) {\n        tree = tree || node;\n        if (err) {\n          reject(err);\n        } else if (resolve) {\n          resolve(tree);\n        } else {\n          cb(null, tree, file);\n        }\n      }\n    }\n  }\n\n  /* Run transforms on a Unist node representation of a file\n   * (in string or VFile representation), sync. */\n  function runSync(node, file) {\n    var complete = false;\n    var result;\n\n    run(node, file, done);\n\n    assertDone('runSync', 'run', complete);\n\n    return result;\n\n    function done(err, tree) {\n      complete = true;\n      bail(err);\n      result = tree;\n    }\n  }\n\n  /* Stringify a Unist node representation of a file\n   * (in string or VFile representation) into a string\n   * using the `Compiler` on the processor. */\n  function stringify(node, doc) {\n    var file = vfile(doc);\n    var Compiler;\n\n    freeze();\n    Compiler = processor.Compiler;\n    assertCompiler('stringify', Compiler);\n    assertNode(node);\n\n    if (newable(Compiler)) {\n      return new Compiler(node, file).compile();\n    }\n\n    return Compiler(node, file); // eslint-disable-line new-cap\n  }\n\n  /* Parse a file (in string or VFile representation)\n   * into a Unist node using the `Parser` on the processor,\n   * then run transforms on that node, and compile the\n   * resulting node using the `Compiler` on the processor,\n   * and store that result on the VFile. */\n  function process(doc, cb) {\n    freeze();\n    assertParser('process', processor.Parser);\n    assertCompiler('process', processor.Compiler);\n\n    if (!cb) {\n      return new Promise(executor);\n    }\n\n    executor(null, cb);\n\n    function executor(resolve, reject) {\n      var file = vfile(doc);\n\n      pipeline.run(processor, {file: file}, done);\n\n      function done(err) {\n        if (err) {\n          reject(err);\n        } else if (resolve) {\n          resolve(file);\n        } else {\n          cb(null, file);\n        }\n      }\n    }\n  }\n\n  /* Process the given document (in string or VFile\n   * representation), sync. */\n  function processSync(doc) {\n    var complete = false;\n    var file;\n\n    freeze();\n    assertParser('processSync', processor.Parser);\n    assertCompiler('processSync', processor.Compiler);\n    file = vfile(doc);\n\n    process(file, done);\n\n    assertDone('processSync', 'process', complete);\n\n    return file;\n\n    function done(err) {\n      complete = true;\n      bail(err);\n    }\n  }\n}\n\n/* Check if `func` is a constructor. */\nfunction newable(value) {\n  return func(value) && keys(value.prototype);\n}\n\n/* Check if `value` is an object with keys. */\nfunction keys(value) {\n  var key;\n  for (key in value) {\n    return true;\n  }\n  return false;\n}\n\n/* Assert a parser is available. */\nfunction assertParser(name, Parser) {\n  if (!func(Parser)) {\n    throw new Error('Cannot `' + name + '` without `Parser`');\n  }\n}\n\n/* Assert a compiler is available. */\nfunction assertCompiler(name, Compiler) {\n  if (!func(Compiler)) {\n    throw new Error('Cannot `' + name + '` without `Compiler`');\n  }\n}\n\n/* Assert the processor is not frozen. */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot invoke `' + name + '` on a frozen processor.\\n' +\n      'Create a new processor first, by invoking it: ' +\n      'use `processor()` instead of `processor`.'\n    );\n  }\n}\n\n/* Assert `node` is a Unist node. */\nfunction assertNode(node) {\n  if (!node || !string(node.type)) {\n    throw new Error('Expected node, got `' + node + '`');\n  }\n}\n\n/* Assert that `complete` is `true`. */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error('`' + name + '` finished async. Use `' + asyncName + '` instead');\n  }\n}\n","'use strict';\n\n/* eslint-disable max-params */\n\n/* Expose. */\nmodule.exports = is;\n\n/* Assert if `test` passes for `node`.\n * When a `parent` node is known the `index` of node */\nfunction is(test, node, index, parent, context) {\n  var hasParent = parent !== null && parent !== undefined;\n  var hasIndex = index !== null && index !== undefined;\n  var check = convert(test);\n\n  if (\n    hasIndex &&\n    (typeof index !== 'number' || index < 0 || index === Infinity)\n  ) {\n    throw new Error('Expected positive finite index or child node');\n  }\n\n  if (hasParent && (!is(null, parent) || !parent.children)) {\n    throw new Error('Expected parent node');\n  }\n\n  if (!node || !node.type || typeof node.type !== 'string') {\n    return false;\n  }\n\n  if (hasParent !== hasIndex) {\n    throw new Error('Expected both parent and index');\n  }\n\n  return Boolean(check.call(context, node, index, parent));\n}\n\nfunction convert(test) {\n  if (typeof test === 'string') {\n    return typeFactory(test);\n  }\n\n  if (test === null || test === undefined) {\n    return ok;\n  }\n\n  if (typeof test === 'object') {\n    return ('length' in test ? anyFactory : matchesFactory)(test);\n  }\n\n  if (typeof test === 'function') {\n    return test;\n  }\n\n  throw new Error('Expected function, string, or object as test');\n}\n\nfunction convertAll(tests) {\n  var results = [];\n  var length = tests.length;\n  var index = -1;\n\n  while (++index < length) {\n    results[index] = convert(tests[index]);\n  }\n\n  return results;\n}\n\n/* Utility assert each property in `test` is represented\n * in `node`, and each values are strictly equal. */\nfunction matchesFactory(test) {\n  return matches;\n\n  function matches(node) {\n    var key;\n\n    for (key in test) {\n      if (node[key] !== test[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nfunction anyFactory(tests) {\n  var checks = convertAll(tests);\n  var length = checks.length;\n\n  return matches;\n\n  function matches() {\n    var index = -1;\n\n    while (++index < length) {\n      if (checks[index].apply(this, arguments)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n\n/* Utility to convert a string into a function which checks\n * a given node’s type for said string. */\nfunction typeFactory(test) {\n  return type;\n\n  function type(node) {\n    return Boolean(node && node.type === test);\n  }\n}\n\n/* Utility to return true. */\nfunction ok() {\n  return true;\n}\n","'use strict';\n\nvar iterate = require('array-iterate');\n\nmodule.exports = modifierFactory;\n\n/* Turn `callback` into a child-modifier accepting a parent.\n * See `array-iterate` for more info. */\nfunction modifierFactory(callback) {\n  return iteratorFactory(wrapperFactory(callback));\n}\n\n/* Turn `callback` into a `iterator' accepting a parent. */\nfunction iteratorFactory(callback) {\n  return iterator;\n\n  function iterator(parent) {\n    var children = parent && parent.children;\n\n    if (!children) {\n      throw new Error('Missing children in `parent` for `modifier`');\n    }\n\n    return iterate(children, callback, parent);\n  }\n}\n\n/* Pass the context as the third argument to `callback`. */\nfunction wrapperFactory(callback) {\n  return wrapper;\n\n  function wrapper(value, index) {\n    return callback(value, index, this);\n  }\n}\n","'use strict';\n\nvar own = {}.hasOwnProperty;\n\nmodule.exports = stringify;\n\nfunction stringify(value) {\n  /* Nothing. */\n  if (!value || typeof value !== 'object') {\n    return null;\n  }\n\n  /* Node. */\n  if (own.call(value, 'position') || own.call(value, 'type')) {\n    return location(value.position);\n  }\n\n  /* Location. */\n  if (own.call(value, 'start') || own.call(value, 'end')) {\n    return location(value);\n  }\n\n  /* Position. */\n  if (own.call(value, 'line') || own.call(value, 'column')) {\n    return position(value);\n  }\n\n  /* ? */\n  return null;\n}\n\nfunction position(pos) {\n  if (!pos || typeof pos !== 'object') {\n    pos = {};\n  }\n\n  return index(pos.line) + ':' + index(pos.column);\n}\n\nfunction location(loc) {\n  if (!loc || typeof loc !== 'object') {\n    loc = {};\n  }\n\n  return position(loc.start) + '-' + position(loc.end);\n}\n\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1;\n}\n","'use strict';\n\n/* Expose. */\nmodule.exports = visitorFactory;\n\n/* Turns `callback` into a child-visitor accepting a parent. */\nfunction visitorFactory(callback) {\n  return visitor;\n\n  /* Visit `parent`, invoking `callback` for each child. */\n  function visitor(parent) {\n    var index = -1;\n    var children = parent && parent.children;\n\n    if (!children) {\n      throw new Error('Missing children in `parent` for `visitor`');\n    }\n\n    while (++index in children) {\n      callback(children[index], index, parent);\n    }\n  }\n}\n","'use strict';\n\n/* Expose. */\nmodule.exports = visit;\n\nvar is = require('unist-util-is');\n\n/* Visit. */\nfunction visit(tree, test, visitor, reverse) {\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor;\n    visitor = test;\n    test = null;\n  }\n\n  one(tree);\n\n  /* Visit a single node. */\n  function one(node, index, parent) {\n    var result;\n\n    index = index || (parent ? 0 : null);\n\n    if (!test || node.type === test || is(test, node, index, parent || null)) {\n      result = visitor(node, index, parent || null);\n    }\n\n    if (node.children && result !== false) {\n      return all(node.children, node);\n    }\n\n    return result;\n  }\n\n  /* Visit children in `parent`. */\n  function all(children, parent) {\n    var step = reverse ? -1 : 1;\n    var max = children.length;\n    var min = -1;\n    var index = (reverse ? max : min) + step;\n    var child;\n\n    while (index > min && index < max) {\n      child = children[index];\n\n      if (child && one(child, index, parent) === false) {\n        return false;\n      }\n\n      index += step;\n    }\n\n    return true;\n  }\n}\n","'use strict';\n\nvar stringify = require('unist-util-stringify-position');\n\nmodule.exports = VMessage;\n\n/* Inherit from `Error#`. */\nfunction VMessagePrototype() {}\nVMessagePrototype.prototype = Error.prototype;\nVMessage.prototype = new VMessagePrototype();\n\n/* Message properties. */\nvar proto = VMessage.prototype;\n\nproto.file = '';\nproto.name = '';\nproto.reason = '';\nproto.message = '';\nproto.stack = '';\nproto.fatal = null;\nproto.column = null;\nproto.line = null;\n\n/* Construct a new VMessage.\n *\n * Note: We cannot invoke `Error` on the created context,\n * as that adds readonly `line` and `column` attributes on\n * Safari 9, thus throwing and failing the data. */\nfunction VMessage(reason, position, origin) {\n  var parts;\n  var range;\n  var location;\n\n  if (typeof position === 'string') {\n    origin = position;\n    position = null;\n  }\n\n  parts = parseOrigin(origin);\n  range = stringify(position) || '1:1';\n\n  location = {\n    start: {line: null, column: null},\n    end: {line: null, column: null}\n  };\n\n  /* Node. */\n  if (position && position.position) {\n    position = position.position;\n  }\n\n  if (position) {\n    /* Position. */\n    if (position.start) {\n      location = position;\n      position = position.start;\n    } else {\n      /* Point. */\n      location.start = position;\n    }\n  }\n\n  if (reason.stack) {\n    this.stack = reason.stack;\n    reason = reason.message;\n  }\n\n  this.message = reason;\n  this.name = range;\n  this.reason = reason;\n  this.line = position ? position.line : null;\n  this.column = position ? position.column : null;\n  this.location = location;\n  this.source = parts[0];\n  this.ruleId = parts[1];\n}\n\nfunction parseOrigin(origin) {\n  var result = [null, null];\n  var index;\n\n  if (typeof origin === 'string') {\n    index = origin.indexOf(':');\n\n    if (index === -1) {\n      result[1] = origin;\n    } else {\n      result[0] = origin.slice(0, index);\n      result[1] = origin.slice(index + 1);\n    }\n  }\n\n  return result;\n}\n","'use strict';\n\nvar path = require('path');\nvar replace = require('replace-ext');\nvar buffer = require('is-buffer');\n\nmodule.exports = VFile;\n\nvar own = {}.hasOwnProperty;\nvar proto = VFile.prototype;\n\nproto.toString = toString;\n\n/* Order of setting (least specific to most), we need this because\n * otherwise `{stem: 'a', path: '~/b.js'}` would throw, as a path\n * is needed before a stem can be set. */\nvar order = [\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n];\n\n/* Construct a new file. */\nfunction VFile(options) {\n  var prop;\n  var index;\n  var length;\n\n  if (!options) {\n    options = {};\n  } else if (typeof options === 'string' || buffer(options)) {\n    options = {contents: options};\n  } else if ('message' in options && 'messages' in options) {\n    return options;\n  }\n\n  if (!(this instanceof VFile)) {\n    return new VFile(options);\n  }\n\n  this.data = {};\n  this.messages = [];\n  this.history = [];\n  this.cwd = process.cwd();\n\n  /* Set path related properties in the correct order. */\n  index = -1;\n  length = order.length;\n\n  while (++index < length) {\n    prop = order[index];\n\n    if (own.call(options, prop)) {\n      this[prop] = options[prop];\n    }\n  }\n\n  /* Set non-path related properties. */\n  for (prop in options) {\n    if (order.indexOf(prop) === -1) {\n      this[prop] = options[prop];\n    }\n  }\n}\n\n/* Access full path (`~/index.min.js`). */\nObject.defineProperty(proto, 'path', {\n  get: function () {\n    return this.history[this.history.length - 1];\n  },\n  set: function (path) {\n    assertNonEmpty(path, 'path');\n\n    if (path !== this.path) {\n      this.history.push(path);\n    }\n  }\n});\n\n/* Access parent path (`~`). */\nObject.defineProperty(proto, 'dirname', {\n  get: function () {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined;\n  },\n  set: function (dirname) {\n    assertPath(this.path, 'dirname');\n    this.path = path.join(dirname || '', this.basename);\n  }\n});\n\n/* Access basename (`index.min.js`). */\nObject.defineProperty(proto, 'basename', {\n  get: function () {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined;\n  },\n  set: function (basename) {\n    assertNonEmpty(basename, 'basename');\n    assertPart(basename, 'basename');\n    this.path = path.join(this.dirname || '', basename);\n  }\n});\n\n/* Access extname (`.js`). */\nObject.defineProperty(proto, 'extname', {\n  get: function () {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined;\n  },\n  set: function (extname) {\n    var ext = extname || '';\n\n    assertPart(ext, 'extname');\n    assertPath(this.path, 'extname');\n\n    if (ext) {\n      if (ext.charAt(0) !== '.') {\n        throw new Error('`extname` must start with `.`');\n      }\n\n      if (ext.indexOf('.', 1) !== -1) {\n        throw new Error('`extname` cannot contain multiple dots');\n      }\n    }\n\n    this.path = replace(this.path, ext);\n  }\n});\n\n/* Access stem (`index.min`). */\nObject.defineProperty(proto, 'stem', {\n  get: function () {\n    return typeof this.path === 'string' ? path.basename(this.path, this.extname) : undefined;\n  },\n  set: function (stem) {\n    assertNonEmpty(stem, 'stem');\n    assertPart(stem, 'stem');\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''));\n  }\n});\n\n/* Get the value of the file. */\nfunction toString(encoding) {\n  var value = this.contents || '';\n  return buffer(value) ? value.toString(encoding) : String(value);\n}\n\n/* Assert that `part` is not a path (i.e., does\n * not contain `path.sep`). */\nfunction assertPart(part, name) {\n  if (part.indexOf(path.sep) !== -1) {\n    throw new Error('`' + name + '` cannot be a path: did not expect `' + path.sep + '`');\n  }\n}\n\n/* Assert that `part` is not empty. */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty');\n  }\n}\n\n/* Assert `path` exists. */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too');\n  }\n}\n","'use strict';\n\nvar VMessage = require('vfile-message');\nvar VFile = require('./core.js');\n\nmodule.exports = VFile;\n\nvar proto = VFile.prototype;\n\nproto.message = message;\nproto.info = info;\nproto.fail = fail;\n\n/* Slight backwards compatibility.  Remove in the future. */\nproto.warn = message;\n\n/* Create a message with `reason` at `position`.\n * When an error is passed in as `reason`, copies the stack. */\nfunction message(reason, position, origin) {\n  var filePath = this.path;\n  var message = new VMessage(reason, position, origin);\n\n  if (filePath) {\n    message.name = filePath + ':' + message.name;\n    message.file = filePath;\n  }\n\n  message.fatal = false;\n\n  this.messages.push(message);\n\n  return message;\n}\n\n/* Fail. Creates a vmessage, associates it with the file,\n * and throws it. */\nfunction fail() {\n  var message = this.message.apply(this, arguments);\n\n  message.fatal = true;\n\n  throw message;\n}\n\n/* Info. Creates a vmessage, associates it with the file,\n * and marks the fatality as null. */\nfunction info() {\n  var message = this.message.apply(this, arguments);\n\n  message.fatal = null;\n\n  return message;\n}\n","'use strict';\n\nvar path = require('path');\n\nfunction replaceExt(npath, ext) {\n  if (typeof npath !== 'string') {\n    return npath;\n  }\n\n  if (npath.length === 0) {\n    return npath;\n  }\n\n  var nFileName = path.basename(npath, path.extname(npath)) + ext;\n  return path.join(path.dirname(npath), nFileName);\n}\n\nmodule.exports = replaceExt;\n","module.exports = function isFunction (fn) {\n  return Object.prototype.toString.call(fn) === '[object Function]'\n}\n","var toString = Object.prototype.toString\n\nmodule.exports = isString\n\nfunction isString(obj) {\n    return toString.call(obj) === \"[object String]\"\n}\n","module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n","const vfile = require('to-vfile');\nconst unified = require('unified');\nconst english = require('retext-english');\nconst sentiment = require('retext-sentiment');\n\nself.onmessage = function(e) {\n  var {text} = e.data;\n  if (text) postMessage(analyze(text));\n};\n\nfunction analyze(text) {\n  var file = vfile({contents: text});\n  var processor = unified()\n    .use(english)\n    .use(sentiment);\n  var tree = processor.parse(file);\n  processor.run(tree, file);\n\n  return getData(tree, {});\n}\n\nfunction getData(node, map) {\n  var {data, position, type, value, children} = node;\n  if (data) {\n    map[type] = map[type] || [];\n    map[type].push({data, position, type, value});\n  }\n  if (children && children.length > 0) {\n    children.forEach(d => getData(d, map));\n  }\n  return map;\n}\n"]}