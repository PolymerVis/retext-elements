{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/array-iterate/index.js","node_modules/automated-readability/index.js","node_modules/bail/index.js","node_modules/coleman-liau/index.js","node_modules/dale-chall-formula/index.js","node_modules/dale-chall/index.json","node_modules/extend/index.js","node_modules/flesch/index.js","node_modules/gunning-fog/index.js","node_modules/inherits/inherits_browser.js","node_modules/is-buffer/index.js","node_modules/is-plain-obj/index.js","node_modules/nlcst-to-string/index.js","node_modules/normalize-strings/charmap.json","node_modules/normalize-strings/index.js","node_modules/parse-english/index.js","node_modules/parse-latin/index.js","node_modules/parse-latin/lib/expressions.js","node_modules/parse-latin/lib/index.js","node_modules/parse-latin/lib/parser.js","node_modules/parse-latin/lib/plugin/break-implicit-sentences.js","node_modules/parse-latin/lib/plugin/make-final-white-space-siblings.js","node_modules/parse-latin/lib/plugin/make-initial-white-space-siblings.js","node_modules/parse-latin/lib/plugin/merge-affix-exceptions.js","node_modules/parse-latin/lib/plugin/merge-affix-symbol.js","node_modules/parse-latin/lib/plugin/merge-final-word-symbol.js","node_modules/parse-latin/lib/plugin/merge-initial-digit-sentences.js","node_modules/parse-latin/lib/plugin/merge-initial-lower-case-letter-sentences.js","node_modules/parse-latin/lib/plugin/merge-initial-word-symbol.js","node_modules/parse-latin/lib/plugin/merge-initialisms.js","node_modules/parse-latin/lib/plugin/merge-inner-word-slash.js","node_modules/parse-latin/lib/plugin/merge-inner-word-symbol.js","node_modules/parse-latin/lib/plugin/merge-non-word-sentences.js","node_modules/parse-latin/lib/plugin/merge-prefix-exceptions.js","node_modules/parse-latin/lib/plugin/merge-remaining-full-stops.js","node_modules/parse-latin/lib/plugin/merge-words.js","node_modules/parse-latin/lib/plugin/patch-position.js","node_modules/parse-latin/lib/plugin/remove-empty-nodes.js","node_modules/parse-latin/lib/tokenizer.js","node_modules/path-browserify/index.js","node_modules/pluralize/pluralize.js","node_modules/process/browser.js","node_modules/retext-english/index.js","node_modules/retext-stringify/index.js","node_modules/smog-formula/index.js","node_modules/spache-formula/index.js","node_modules/spache/index.json","node_modules/syllable/index.js","node_modules/syllable/problematic.json","node_modules/to-vfile/lib/core.js","node_modules/trough/index.js","node_modules/unherit/index.js","node_modules/unified/index.js","node_modules/unist-util-is/index.js","node_modules/unist-util-modify-children/index.js","node_modules/unist-util-stringify-position/index.js","node_modules/unist-util-visit-children/index.js","node_modules/unist-util-visit/index.js","node_modules/vfile-message/index.js","node_modules/vfile/core.js","node_modules/vfile/index.js","node_modules/vfile/node_modules/replace-ext/index.js","node_modules/x-is-function/index.js","node_modules/x-is-string/index.js","node_modules/xtend/immutable.js","src/readability-worker.js","src/retext-readability-index.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","values","callback","context","result","index","own","hasOwnProperty","counts","sentence","word","character","CHARACTER_WEIGHT","SENTENCE_WEIGHT","BASE","NaN","err","letter","LETTER_WEIGHT","PERCENTAGE","daleChall","percentageOfDifficultWords","score","difficultWord","DIFFICULT_WORD_WEIGHT","WORD_WEIGHT","DIFFICULT_WORD_THRESHOLD","ADJUSTMENT","gradeLevel","Math","floor","GRADE_MAP","concat","4","5","6","7","8","9","10","Infinity","hasOwn","Object","prototype","toStr","toString","isArray","arr","Array","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","constructor","key","extend","options","name","src","copy","copyIsArray","clone","target","arguments","deep","syllable","WEIGHT","COMPLEX_WORD_WEIGHT","complexPolysillabicWord","create","ctor","superCtor","super_","value","enumerable","writable","configurable","TempCtor","isBuffer","readFloatLE","slice","isSlowBuffer","_isBuffer","x","getPrototypeOf","nlcstToString","node","separator","children","sep","type","join","105","192","193","194","195","196","197","199","200","201","202","203","204","205","206","207","209","210","211","212","213","214","216","217","218","219","220","221","224","225","226","227","228","229","231","232","233","234","235","236","237","238","239","241","242","243","244","245","246","248","249","250","251","252","253","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","308","309","310","311","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","384","385","386","387","390","391","392","393","394","395","396","398","400","401","402","403","407","408","409","410","412","413","414","415","416","417","420","421","422","427","428","429","430","431","432","434","435","436","437","438","461","462","463","464","465","466","467","468","477","484","485","486","487","488","489","490","491","500","501","504","505","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533","534","535","536","537","538","539","542","543","544","545","548","549","550","551","552","553","558","559","562","563","564","565","566","567","570","571","572","573","574","575","576","579","580","581","582","583","584","585","586","587","588","589","590","591","592","593","595","596","597","598","599","600","603","604","605","606","607","608","609","610","613","614","616","618","619","620","621","623","624","625","626","627","628","629","633","634","635","636","637","638","639","640","641","642","647","648","649","651","652","653","654","655","656","657","663","665","666","667","668","669","670","671","672","686","688","690","691","692","694","695","696","737","738","739","780","829","851","867","868","869","870","871","872","873","874","875","876","877","878","879","7424","7427","7428","7429","7431","7432","7433","7434","7435","7436","7437","7438","7439","7440","7441","7442","7443","7446","7447","7448","7449","7450","7451","7452","7453","7454","7455","7456","7457","7458","7522","7523","7524","7525","7680","7681","7682","7683","7684","7685","7686","7687","7690","7691","7692","7693","7694","7695","7696","7697","7698","7699","7704","7705","7706","7707","7710","7711","7712","7713","7714","7715","7716","7717","7718","7719","7720","7721","7722","7723","7724","7725","7728","7729","7730","7731","7732","7733","7734","7735","7738","7739","7740","7741","7742","7743","7744","7745","7746","7747","7748","7749","7750","7751","7752","7753","7754","7755","7764","7765","7766","7767","7768","7769","7770","7771","7774","7775","7776","7777","7778","7779","7786","7787","7788","7789","7790","7791","7792","7793","7794","7795","7796","7797","7798","7799","7804","7805","7806","7807","7808","7809","7810","7811","7812","7813","7814","7815","7816","7817","7818","7819","7820","7821","7822","7823","7824","7825","7826","7827","7828","7829","7835","7840","7841","7842","7843","7864","7865","7866","7867","7868","7869","7880","7881","7882","7883","7884","7885","7886","7887","7908","7909","7910","7911","7922","7923","7924","7925","7926","7927","7928","7929","8305","8341","8342","8343","8344","8345","8346","8347","8348","8450","8458","8459","8460","8461","8464","8465","8466","8467","8468","8469","8472","8473","8474","8475","8476","8477","8484","8488","8492","8493","8495","8496","8497","8498","8499","8500","8506","8513","8514","8515","8516","8517","8518","8519","8520","8521","8526","8579","8580","8765","8766","8959","8999","9746","9776","9866","10005","10006","10007","10008","10625","10626","11362","11364","11365","11366","11373","11374","11375","11390","11391","19904","42893","42922","42923","42924","42925","42928","42929","62937","global","factory","define","amd","document","normalize","window","this","current_charmap","old_charmap","charmap","regex","str","custom_charmap","RegExp","keys","map","String","fromCharCode","buildRegExp","replace","charToReplace","charCodeAt","ParseEnglish","doc","file","Parser","apply","ParserPrototype","lower","toLowerCase","visitChildren","modifyChildren","proto","tokenizeSentencePlugins","child","siblings","sibling","other","splice","push","position","end","APOSTROPHE","test","ELISION_PREFIX","ELISION_AFFIX","start","tokenizeParagraphPlugins","paragraph","next","period","ABBREVIATION","ABBREVIATION_SENSITIVE","pop","affixSymbol","newLine","newLineMulti","terminalMarker","wordSymbolInner","numerical","digitStart","lowerInitial","surrogates","punctuation","whiteSpace","ParseLatin","createTextFactory","eat","parent","undefined","noopEat","pluggable","Constructor","run","useFactory","plugins","wareKey","tokenize","parser","tick","left","right","prev","SURROGATES","queue","eater","add","tokens","now","line","column","offset","subvalue","pos","before","subvalueLength","lastIndex","charAt","update","WHITE_SPACE","PUNCTUATION","WORD","noopAdd","createParser","expressions","tokenizeSymbol","tokenizeWhiteSpace","tokenizePunctuation","tokenizeSource","tokenizeText","nodes","use","useFirst","parse","tokenizeRoot","tokenizer","delimiter","delimiterType","tokenizerProperty","tail","head","insertion","MULTI_NEW_LINE","shift","previousChild","first","second","AFFIX_SYMBOL","DIGIT","LOWER_INITIAL","unshift","otherChild","isAllDigits","NUMERICAL","prevValue","nextValue","count","C_SLASH","last","INNER_WORD_SYMBOL","ABBREVIATION_PREFIX","grandchild","nextNext","hasFoundDelimiter","TERMINAL_MARKER","patch","childType","expression","normalizeArray","parts","allowAboveRoot","up","filter","xs","res","splitPathRe","splitPath","filename","exec","resolve","resolvedPath","resolvedAbsolute","path","process","cwd","TypeError","split","p","isAbsolute","trailingSlash","substr","paths","relative","from","to","trim","fromParts","toParts","min","samePartsLength","outputParts","dirname","root","dir","basename","ext","extname","len","pluralize","sanitizeRule","rule","restoreCase","token","toUpperCase","match","args","interpolate","sanitizeWord","rules","uncountables","replaceWord","replaceMap","keepMap","checkWord","bool","inclusive","pluralized","singular","plural","pluralRules","singularRules","irregularPlurals","irregularSingles","isPlural","isSingular","addPluralRule","replacement","addSingularRule","addUncountableRule","addIrregularRule","single","forEach","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","setTimeout","cleanUpNextTick","draining","currentQueue","queueIndex","drainQueue","timeout","marker","cachedClearTimeout","clearTimeout","runClearTimeout","Item","array","noop","nextTick","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","chdir","umask","unherit","English","compiler","tree","Compiler","sqrt","polysillabicWord","SENTENCE_SIZE","unfamiliarWord","problematic","SPLIT","total","countFactory","addition","returnFactory","$0","addOne","subtractOne","EXPRESSION_TRIPLE","EXPRESSION_DOUBLE","EXPRESSION_SINGLE","EXPRESSION_MONOSYLLABIC_ONE","EXPRESSION_MONOSYLLABIC_TWO","EXPRESSION_DOUBLE_SYLLABIC_ONE","EXPRESSION_DOUBLE_SYLLABIC_TWO","EXPRESSION_DOUBLE_SYLLABIC_THREE","EXPRESSION_DOUBLE_SYLLABIC_FOUR","EXPRESSION_NONALPHABETIC","abalone","abare","abed","abruzzese","abbruzzese","aborigine","acreage","adame","adieu","adobe","anemone","apache","aphrodite","apostrophe","ariadne","cafe","calliope","catastrophe","chile","chloe","circe","coyote","epitome","forever","gethsemane","guacamole","hyperbole","jesse","jukebox","karate","machete","maybe","people","recipe","sesame","shoreline","simile","syncope","tamale","yosemite","daphne","eurydice","euterpe","hermione","penelope","persephone","phoebe","zoe","buffer","vfile","fns","middleware","fn","input","done","invoked","then","params","wrap","xtend","inherits","Super","From","parameters","Of","unified","processor","destination","attachers","data","namespace","freeze","plugin","transformer","frozen","freezeIndex","func","transformers","cb","executor","reject","assertNode","Promise","pipeline","assertParser","assertCompiler","trough","string","assertUnfrozen","addPreset","addList","settings","addPlugin","entry","find","plain","newable","stringify","compile","runSync","complete","bail","assertDone","processSync","asyncName","ctx","contents","is","hasParent","hasIndex","check","convert","Boolean","typeFactory","ok","tests","checks","results","convertAll","iterate","iteratorFactory","wrapperFactory","location","loc","visitor","reverse","one","step","max","all","VMessagePrototype","VMessage","reason","origin","range","indexOf","parseOrigin","stack","message","source","ruleId","fatal","VFile","prop","messages","history","order","assertPart","part","assertNonEmpty","assertPath","encoding","defineProperty","get","set","stem","filePath","info","fail","warn","npath","nFileName","analyze","_ref","text","opts","english","readability","d","actual","self","onmessage","_e$data","url","minWords","unit","fs","FileReader","onload","onerror","readAsText","readFile","httpRequest","XMLHttpRequest","onreadystatechange","readyState","DONE","status","responseText","statusText","open","send","fetchUrl","postMessage","close","catch","error","console","gradeToAge","grade","round","fleschToAge","smogToAge","ceil","visit","spache","daleChallFormula","ari","colemanLiau","flesch","smog","gunningFog","spacheFormula","SOURCE","WORDYNESS_THRESHOLD","assign","caseless","familiarWords","easyWord","familiarWordCount","totalSyllables","easyWordCount","wordCount","sentenceCount","letters","syllables","_fn_","scores","ages","summary","age","report"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAC,SAAAA,QAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAI,EAAA,OAAAA,EAAAJ,GAAA,GAAA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAAA,MAAAK,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAX,EAAAG,IAAAS,YAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,IAAAE,EAAAD,EAAAI,GAAA,GAAAL,GAAA,OAAAI,EAAAF,GAAAF,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAS,QAAA,IAAA,IAAAL,EAAA,mBAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,EAAAa,GAAA,SAAAT,EAAAU,EAAAJ,GCAA,aAEAI,EAAAJ,QAIA,SAAAK,EAAAC,EAAAC,GACA,IACAC,EADAC,GAAA,EAGA,IAAAJ,EACA,MAAA,IAAAR,MAAA,uCAAAQ,GAGA,IAAAK,EAAAT,KAAAI,EAAA,UACA,MAAA,IAAAR,MAAA,+CAGA,GAAA,mBAAAS,EACA,MAAA,IAAAT,MAAA,iCAIA,OAAAY,EAAAJ,EAAAH,QAEAO,KAAAJ,GAQA,iBAJAG,EAAAF,EAAAL,KAAAM,EAAAF,EAAAI,GAAAA,EAAAJ,MAMAG,EAAA,IACAC,EAAA,GAGAA,EAAAD,EAAA,IAnCA,IAAAE,KAAAC,uCCJA,aAEAP,EAAAJ,QAMA,SAAAY,GACA,OAAAA,GAAAA,EAAAC,UAAAD,EAAAE,MAAAF,EAAAG,UAIAC,GAAAJ,EAAAG,UAAAH,EAAAE,MACAG,GAAAL,EAAAE,KAAAF,EAAAC,UACAK,EALAC,KANA,IAAAH,EAAA,KACAC,EAAA,GACAC,EAAA,8BCNA,aAEAd,EAAAJ,QAEA,SAAAoB,GACA,GAAAA,EACA,MAAAA,2BCNA,aAEAhB,EAAAJ,QAOA,SAAAY,GACA,OAAAA,GAAAA,EAAAC,UAAAD,EAAAE,MAAAF,EAAAS,OAIAC,GAAAV,EAAAS,OAAAT,EAAAE,KAAAS,GACAN,GAAAL,EAAAC,SAAAD,EAAAE,KAAAS,GACAL,EALAC,KAPA,IAAAG,EAAA,MACAL,EAAA,KACAC,EAAA,KACAK,EAAA,4BCPA,aAuBA,SAAAC,EAAAZ,GACA,IAAAa,EACAC,EAEA,OAAAd,GAAAA,EAAAC,UAAAD,EAAAE,MAIAW,GAAAb,EAAAe,eAAA,GAAAf,EAAAE,KAEAY,EAAAE,EAAAH,EAAAF,EACAM,EAAAjB,EAAAE,KAAAF,EAAAC,SAEAY,EAAAK,IACAJ,GAAAK,GAGAL,GAZAP,IA1BAf,EAAAJ,QAAAwB,EACAA,EAAAQ,WAyCA,SAAAN,GASA,OARAA,EAAAO,KAAAC,MAAAR,IAEA,EACAA,EAAA,EACAA,EAAA,IACAA,EAAA,IAGAS,EAAAT,GAAAU,UAhDA,IAAAR,EAAA,MACAC,EAAA,MACAC,EAAA,IACAP,EAAA,IACAQ,EAAA,OAGAI,GACAE,GAAA,EAAA,GACAC,GAAA,EAAA,GACAC,GAAA,EAAA,GACAC,GAAA,EAAA,IACAC,GAAA,GAAA,IACAC,GAAA,GAAA,IACAC,IAAA,GAAAC,EAAAA,GACAzB,KAAAA,IAAAA,8BCpBAf,EAAAJ,SACA,IACA,OACA,SACA,QACA,QACA,SACA,SACA,WACA,UACA,OACA,SACA,QACA,OACA,SACA,MACA,OACA,MACA,UACA,SACA,YACA,OACA,SACA,QACA,YACA,YACA,aACA,QACA,UACA,MACA,OACA,MACA,QACA,KACA,QACA,MACA,MACA,MACA,WACA,WACA,UACA,UACA,OACA,QACA,QACA,QACA,MACA,QACA,YACA,QACA,SACA,QACA,QACA,QACA,UACA,OACA,SACA,KACA,UACA,WACA,QACA,SACA,KACA,MACA,QACA,QACA,QACA,SACA,UACA,SACA,MACA,MACA,UACA,SACA,SACA,WACA,SACA,WACA,QACA,YACA,MACA,SACA,SACA,QACA,QACA,QACA,MACA,SACA,QACA,aACA,MACA,SACA,OACA,QACA,SACA,UACA,SACA,UACA,QACA,MACA,SACA,KACA,MACA,QACA,QACA,MACA,SACA,KACA,MACA,SACA,SACA,YACA,SACA,OACA,SACA,OACA,aACA,SACA,SACA,QACA,SACA,OACA,QACA,UACA,SACA,KACA,MACA,MACA,OACA,SACA,OACA,aACA,WACA,YACA,QACA,MACA,QACA,QACA,MACA,OACA,QACA,SACA,SACA,OACA,UACA,SACA,OACA,UACA,OACA,QACA,OACA,SACA,MACA,SACA,OACA,WACA,SACA,OACA,OACA,SACA,OACA,WACA,WACA,SACA,MACA,QACA,OACA,QACA,UACA,WACA,UACA,SACA,aACA,MACA,KACA,QACA,OACA,OACA,OACA,OACA,QACA,QACA,OACA,UACA,YACA,WACA,SACA,SACA,UACA,SACA,WACA,MACA,SACA,UACA,YACA,UACA,MACA,QACA,OACA,YACA,UACA,OACA,OACA,OACA,SACA,MACA,QACA,SACA,SACA,QACA,YACA,QACA,SACA,SACA,QACA,UACA,OACA,SACA,QACA,OACA,QACA,OACA,UACA,OACA,UACA,QACA,SACA,UACA,OACA,MACA,SACA,UACA,MACA,QACA,UACA,MACA,MACA,SACA,OACA,YACA,MACA,OACA,OACA,QACA,WACA,UACA,MACA,OACA,SACA,SACA,QACA,aACA,YACA,aACA,YACA,aACA,QACA,QACA,UACA,QACA,QACA,QACA,QACA,WACA,OACA,QACA,YACA,SACA,QACA,QACA,QACA,UACA,OACA,OACA,OACA,YACA,WACA,QACA,QACA,QACA,OACA,MACA,WACA,SACA,OACA,OACA,SACA,OACA,OACA,SACA,MACA,OACA,WACA,aACA,OACA,OACA,OACA,SACA,OACA,OACA,SACA,SACA,SACA,SACA,SACA,MACA,UACA,OACA,MACA,SACA,QACA,QACA,MACA,UACA,WACA,QACA,QACA,OACA,SACA,QACA,QACA,QACA,QACA,YACA,SACA,SACA,UACA,SACA,QACA,QACA,SACA,SACA,aACA,QACA,QACA,YACA,QACA,SACA,QACA,QACA,UACA,UACA,QACA,QACA,SACA,SACA,SACA,MACA,UACA,MACA,QACA,QACA,WACA,QACA,OACA,OACA,SACA,MACA,YACA,OACA,MACA,QACA,SACA,QACA,OACA,QACA,OACA,MACA,OACA,SACA,WACA,OACA,MACA,UACA,OACA,SACA,YACA,YACA,aACA,eACA,SACA,aACA,MACA,OACA,KACA,MACA,MACA,UACA,QACA,UACA,SACA,OACA,OACA,WACA,OACA,OACA,SACA,UACA,OACA,QACA,OACA,WACA,MACA,QACA,QACA,SACA,SACA,cACA,QACA,OACA,SACA,SACA,QACA,SACA,MACA,OACA,UACA,UACA,MACA,OACA,YACA,OACA,UACA,WACA,eACA,UACA,YACA,SACA,WACA,SACA,QACA,OACA,QACA,OACA,OACA,UACA,SACA,MACA,UACA,QACA,UACA,cACA,UACA,SACA,SACA,SACA,QACA,OACA,UACA,OACA,SACA,OACA,SACA,SACA,UACA,YACA,QACA,QACA,QACA,WACA,SACA,SACA,OACA,SACA,QACA,QACA,QACA,UACA,QACA,QACA,QACA,WACA,QACA,QACA,SACA,SACA,QACA,OACA,QACA,UACA,QACA,QACA,YACA,WACA,QACA,SACA,UACA,OACA,QACA,OACA,WACA,YACA,SACA,SACA,OACA,SACA,QACA,SACA,WACA,YACA,SACA,QACA,YACA,SACA,SACA,UACA,OACA,QACA,OACA,QACA,YACA,YACA,OACA,OACA,QACA,UACA,QACA,QACA,SACA,QACA,QACA,QACA,OACA,QACA,QACA,QACA,SACA,QACA,UACA,WACA,QACA,SACA,SACA,QACA,OACA,QACA,QACA,QACA,OACA,QACA,OACA,MACA,UACA,QACA,UACA,SACA,MACA,UACA,SACA,YACA,OACA,OACA,SACA,UACA,QACA,UACA,OACA,SACA,OACA,OACA,UACA,QACA,SACA,UACA,UACA,YACA,OACA,UACA,MACA,OACA,SACA,SACA,UACA,UACA,OACA,SACA,OACA,SACA,OACA,OACA,OACA,OACA,SACA,UACA,OACA,MACA,UACA,SACA,QACA,QACA,QACA,WACA,QACA,UACA,UACA,SACA,SACA,QACA,SACA,QACA,MACA,SACA,WACA,SACA,OACA,OACA,QACA,UACA,SACA,SACA,YACA,QACA,SACA,QACA,QACA,QACA,QACA,SACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,UACA,OACA,QACA,aACA,WACA,OACA,QACA,UACA,QACA,QACA,QACA,UACA,QACA,QACA,MACA,MACA,OACA,MACA,WACA,SACA,OACA,OACA,QACA,UACA,QACA,UACA,UACA,WACA,MACA,OACA,UACA,MACA,MACA,QACA,QACA,QACA,QACA,MACA,SACA,OACA,OACA,QACA,SACA,UACA,QACA,SACA,YACA,OACA,OACA,WACA,UACA,OACA,OACA,OACA,OACA,WACA,OACA,MACA,WACA,UACA,OACA,OACA,OACA,OACA,QACA,WACA,SACA,OACA,OACA,OACA,OACA,SACA,SACA,UACA,UACA,MACA,UACA,SACA,UACA,WACA,SACA,UACA,SACA,OACA,UACA,QACA,MACA,UACA,MACA,SACA,MACA,OACA,OACA,aACA,YACA,MACA,MACA,OACA,OACA,YACA,SACA,MACA,SACA,YACA,OACA,QACA,WACA,OACA,UACA,UACA,QACA,OACA,QACA,SACA,KACA,OACA,SACA,OACA,UACA,MACA,OACA,SACA,QACA,QACA,OACA,SACA,OACA,WACA,WACA,WACA,OACA,MACA,SACA,QACA,OACA,OACA,aACA,WACA,QACA,OACA,QACA,QACA,OACA,SACA,UACA,QACA,QACA,UACA,aACA,OACA,QACA,QACA,QACA,QACA,OACA,QACA,SACA,SACA,OACA,QACA,QACA,SACA,OACA,OACA,QACA,MACA,OACA,MACA,MACA,OACA,OACA,OACA,SACA,OACA,QACA,OACA,QACA,QACA,QACA,QACA,OACA,QACA,QACA,MACA,QACA,OACA,QACA,OACA,UACA,OACA,MACA,QACA,OACA,MACA,KACA,QACA,WACA,SACA,SACA,SACA,QACA,QACA,SACA,WACA,cACA,WACA,SACA,MACA,MACA,OACA,YACA,QACA,MACA,SACA,QACA,SACA,WACA,UACA,QACA,SACA,QACA,WACA,QACA,QACA,SACA,SACA,SACA,MACA,OACA,UACA,OACA,QACA,YACA,WACA,WACA,aACA,aACA,OACA,QACA,SACA,WACA,UACA,WACA,SACA,OACA,SACA,UACA,QACA,MACA,UACA,QACA,OACA,SACA,OACA,UACA,OACA,QACA,OACA,QACA,QACA,OACA,OACA,QACA,SACA,MACA,QACA,MACA,UACA,UACA,OACA,OACA,SACA,UACA,UACA,UACA,OACA,SACA,MACA,SACA,QACA,QACA,WACA,OACA,QACA,UACA,WACA,MACA,OACA,OACA,OACA,OACA,SACA,OACA,QACA,QACA,MACA,MACA,SACA,QACA,OACA,UACA,QACA,QACA,MACA,QACA,SACA,OACA,OACA,OACA,UACA,OACA,OACA,SACA,SACA,OACA,UACA,cACA,YACA,YACA,SACA,QACA,OACA,YACA,OACA,MACA,OACA,OACA,MACA,OACA,QACA,QACA,OACA,QACA,aACA,OACA,OACA,QACA,OACA,QACA,SACA,OACA,YACA,QACA,QACA,QACA,QACA,OACA,QACA,OACA,SACA,UACA,UACA,MACA,OACA,MACA,QACA,OACA,QACA,SACA,YACA,OACA,OACA,OACA,UACA,OACA,WACA,YACA,MACA,WACA,SACA,SACA,UACA,SACA,YACA,OACA,OACA,OACA,QACA,UACA,QACA,UACA,SACA,QACA,WACA,OACA,WACA,SACA,MACA,QACA,OACA,UACA,SACA,UACA,SACA,QACA,OACA,SACA,QACA,SACA,WACA,aACA,WACA,OACA,OACA,QACA,QACA,QACA,QACA,QACA,MACA,QACA,OACA,OACA,QACA,MACA,QACA,MACA,YACA,UACA,QACA,OACA,SACA,SACA,OACA,OACA,SACA,UACA,SACA,MACA,WACA,OACA,SACA,OACA,MACA,OACA,QACA,UACA,SACA,YACA,YACA,YACA,MACA,UACA,QACA,OACA,cACA,OACA,OACA,QACA,SACA,OACA,SACA,SACA,QACA,UACA,QACA,QACA,QACA,QACA,OACA,OACA,KACA,OACA,OACA,SACA,MACA,YACA,OACA,QACA,OACA,SACA,WACA,OACA,OACA,OACA,UACA,WACA,eACA,UACA,WACA,QACA,QACA,QACA,aACA,MACA,SACA,aACA,OACA,OACA,WACA,QACA,QACA,QACA,aACA,gBACA,gBACA,cACA,UACA,cACA,UACA,WACA,aACA,QACA,aACA,SACA,QACA,cACA,WACA,QACA,SACA,YACA,QACA,OACA,QACA,SACA,QACA,QACA,QACA,OACA,QACA,QACA,UACA,SACA,QACA,QACA,OACA,QACA,QACA,QACA,QACA,OACA,MACA,MACA,YACA,MACA,KACA,QACA,MACA,SACA,OACA,OACA,UACA,UACA,OACA,OACA,OACA,MACA,SACA,OACA,UACA,eACA,SACA,cACA,OACA,SACA,UACA,YACA,QACA,SACA,OACA,SACA,WACA,WACA,OACA,OACA,OACA,UACA,OACA,UACA,MACA,SACA,QACA,SACA,QACA,MACA,QACA,UACA,OACA,OACA,OACA,UACA,SACA,OACA,MACA,WACA,WACA,KACA,OACA,QACA,OACA,OACA,WACA,OACA,SACA,UACA,OACA,OACA,QACA,UACA,QACA,OACA,SACA,SACA,QACA,OACA,SACA,OACA,OACA,QACA,SACA,OACA,SACA,UACA,MACA,MACA,WACA,MACA,OACA,OACA,SACA,OACA,OACA,UACA,MACA,UACA,MACA,SACA,OACA,OACA,UACA,OACA,WACA,UACA,QACA,MACA,UACA,OACA,OACA,MACA,OACA,MACA,OACA,UACA,MACA,QACA,OACA,KACA,MACA,MACA,OACA,SACA,OACA,UACA,SACA,OACA,OACA,SACA,WACA,SACA,QACA,WACA,YACA,OACA,QACA,OACA,OACA,OACA,OACA,MACA,OACA,UACA,WACA,OACA,QACA,YACA,YACA,OACA,WACA,OACA,MACA,QACA,QACA,OACA,QACA,WACA,YACA,YACA,MACA,UACA,OACA,MACA,OACA,MACA,SACA,OACA,UACA,OACA,SACA,SACA,OACA,OACA,SACA,SACA,UACA,QACA,OACA,UACA,OACA,MACA,OACA,IACA,MACA,OACA,MACA,OACA,MACA,MACA,OACA,QACA,KACA,MACA,YACA,aACA,UACA,KACA,OACA,SACA,SACA,SACA,SACA,UACA,MACA,MACA,SACA,SACA,UACA,UACA,SACA,SACA,aACA,cACA,OACA,SACA,OACA,KACA,SACA,QACA,KACA,OACA,MACA,SACA,QACA,MACA,SACA,QACA,OACA,MACA,UACA,MACA,MACA,MACA,QACA,YACA,OACA,MACA,MACA,SACA,OACA,OACA,SACA,QACA,UACA,MACA,SACA,SACA,QACA,MACA,QACA,QACA,OACA,OACA,OACA,SACA,OACA,OACA,OACA,OACA,OACA,SACA,MACA,OACA,MACA,OACA,SACA,OACA,SACA,WACA,OACA,UACA,OACA,UACA,OACA,SACA,QACA,OACA,QACA,OACA,QACA,OACA,SACA,OACA,QACA,OACA,OACA,QACA,OACA,MACA,SACA,SACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,WACA,UACA,MACA,OACA,QACA,OACA,OACA,OACA,OACA,QACA,UACA,MACA,OACA,SACA,MACA,OACA,OACA,SACA,OACA,OACA,OACA,OACA,QACA,UACA,QACA,UACA,QACA,UACA,MACA,OACA,MACA,QACA,WACA,OACA,SACA,OACA,SACA,MACA,QACA,SACA,UACA,UACA,QACA,UACA,UACA,OACA,OACA,MACA,MACA,OACA,OACA,QACA,YACA,YACA,OACA,SACA,SACA,OACA,OACA,OACA,OACA,OACA,QACA,OACA,MACA,OACA,SACA,MACA,SACA,OACA,SACA,QACA,QACA,SACA,SACA,OACA,OACA,OACA,SACA,OACA,aACA,MACA,OACA,SACA,WACA,OACA,OACA,UACA,OACA,QACA,OACA,OACA,QACA,OACA,OACA,MACA,OACA,OACA,SACA,QACA,MACA,OACA,QACA,SACA,OACA,QACA,QACA,KACA,UACA,YACA,MACA,OACA,WACA,QACA,OACA,OACA,UACA,UACA,QACA,OACA,SACA,OACA,OACA,QACA,MACA,UACA,OACA,SACA,OACA,MACA,QACA,SACA,QACA,OACA,OACA,SACA,WACA,UACA,QACA,OACA,OACA,SACA,MACA,QACA,SACA,WACA,MACA,QACA,QACA,UACA,KACA,SACA,OACA,OACA,QACA,QACA,UACA,OACA,WACA,OACA,UACA,OACA,SACA,MACA,OACA,OACA,QACA,OACA,UACA,MACA,QACA,MACA,OACA,SACA,WACA,QACA,SACA,OACA,QACA,OACA,UACA,OACA,UACA,OACA,OACA,QACA,OACA,SACA,SACA,WACA,OACA,WACA,UACA,QACA,OACA,SACA,MACA,SACA,SACA,QACA,SACA,QACA,MACA,OACA,YACA,QACA,MACA,OACA,UACA,SACA,OACA,OACA,SACA,SACA,QACA,QACA,WACA,QACA,QACA,OACA,QACA,SACA,SACA,MACA,MACA,OACA,OACA,MACA,QACA,MACA,OACA,WACA,SACA,QACA,OACA,KACA,SACA,OACA,OACA,MACA,SACA,SACA,QACA,UACA,OACA,OACA,SACA,SACA,OACA,OACA,UACA,OACA,SACA,UACA,QACA,WACA,eACA,UACA,QACA,OACA,MACA,QACA,YACA,MACA,OACA,YACA,OACA,SACA,OACA,SACA,QACA,YACA,OACA,WACA,SACA,KACA,SACA,MACA,QACA,QACA,OACA,OACA,MACA,QACA,WACA,OACA,MACA,OACA,UACA,SACA,WACA,MACA,UACA,SACA,QACA,MACA,UACA,MACA,MACA,UACA,OACA,OACA,QACA,UACA,MACA,KACA,MACA,QACA,SACA,UACA,QACA,KACA,MACA,MACA,gBACA,KACA,OACA,MACA,QACA,OACA,SACA,OACA,KACA,SACA,UACA,QACA,MACA,QACA,QACA,YACA,OACA,QACA,MACA,OACA,YACA,MACA,WACA,SACA,SACA,UACA,UACA,UACA,OACA,OACA,WACA,WACA,UACA,WACA,WACA,YACA,WACA,MACA,QACA,MACA,MACA,QACA,KACA,KACA,OACA,OACA,UACA,MACA,OACA,OACA,OACA,OACA,UACA,QACA,UACA,WACA,OACA,MACA,SACA,OACA,MACA,UACA,OACA,QACA,QACA,OACA,QACA,SACA,SACA,SACA,OACA,OACA,SACA,UACA,QACA,OACA,YACA,OACA,QACA,UACA,MACA,QACA,OACA,SACA,OACA,WACA,MACA,MACA,UACA,MACA,QACA,WACA,QACA,UACA,OACA,SACA,OACA,QACA,OACA,OACA,OACA,OACA,OACA,MACA,MACA,SACA,QACA,SACA,SACA,aACA,UACA,UACA,SACA,MACA,QACA,QACA,OACA,SACA,SACA,UACA,MACA,QACA,MACA,SACA,QACA,OACA,OACA,SACA,MACA,OACA,YACA,OACA,OACA,OACA,SACA,MACA,QACA,UACA,OACA,QACA,QACA,OACA,QACA,QACA,QACA,WACA,UACA,OACA,SACA,aACA,YACA,WACA,YACA,WACA,SACA,WACA,SACA,OACA,OACA,OACA,SACA,aACA,OACA,QACA,SACA,OACA,OACA,SACA,YACA,SACA,SACA,OACA,SACA,OACA,OACA,OACA,MACA,UACA,SACA,QACA,OACA,WACA,OACA,UACA,UACA,MACA,SACA,WACA,QACA,OACA,SACA,QACA,WACA,SACA,OACA,SACA,UACA,UACA,SACA,QACA,QACA,SACA,WACA,QACA,SACA,QACA,UACA,SACA,UACA,QACA,QACA,QACA,SACA,SACA,OACA,OACA,OACA,UACA,QACA,SACA,MACA,QACA,QACA,OACA,SACA,QACA,OACA,OACA,QACA,WACA,MACA,UACA,SACA,QACA,QACA,UACA,QACA,QACA,WACA,QACA,UACA,QACA,QACA,OACA,QACA,SACA,OACA,OACA,QACA,SACA,MACA,OACA,WACA,UACA,OACA,UACA,QACA,QACA,SACA,OACA,MACA,MACA,QACA,OACA,MACA,UACA,MACA,OACA,SACA,SACA,MACA,MACA,QACA,OACA,SACA,UACA,QACA,OACA,SACA,OACA,OACA,SACA,UACA,UACA,SACA,SACA,MACA,UACA,YACA,SACA,WACA,UACA,SACA,WACA,SACA,SACA,OACA,SACA,QACA,SACA,SACA,OACA,SACA,SACA,SACA,MACA,SACA,OACA,OACA,MACA,SACA,OACA,QACA,SACA,QACA,MACA,OACA,MACA,OACA,OACA,SACA,QACA,OACA,WACA,OACA,QACA,MACA,SACA,OACA,QACA,OACA,SACA,QACA,OACA,OACA,SACA,OACA,OACA,UACA,OACA,OACA,OACA,UACA,MACA,SACA,QACA,QACA,QACA,MACA,UACA,QACA,MACA,SACA,SACA,UACA,MACA,OACA,QACA,SACA,MACA,OACA,SACA,UACA,OACA,OACA,QACA,MACA,OACA,MACA,SACA,UACA,OACA,SACA,OACA,OACA,WACA,SACA,QACA,QACA,OACA,OACA,OACA,OACA,WACA,QACA,OACA,OACA,MACA,OACA,MACA,QACA,eACA,WACA,UACA,SACA,OACA,UACA,MACA,MACA,OACA,SACA,QACA,QACA,SACA,YACA,cACA,eACA,aACA,SACA,QACA,QACA,SACA,UACA,SACA,SACA,QACA,QACA,MACA,OACA,OACA,SACA,SACA,OACA,SACA,SACA,MACA,OACA,SACA,OACA,OACA,OACA,SACA,SACA,OACA,UACA,OACA,OACA,QACA,OACA,WACA,WACA,YACA,UACA,QACA,UACA,MACA,UACA,SACA,aACA,QACA,YACA,UACA,UACA,UACA,MACA,QACA,SACA,QACA,QACA,SACA,UACA,QACA,QACA,SACA,QACA,QACA,QACA,QACA,MACA,QACA,SACA,QACA,QACA,SACA,OACA,QACA,QACA,QACA,QACA,WACA,QACA,UACA,QACA,OACA,QACA,QACA,OACA,YACA,QACA,QACA,QACA,OACA,WACA,QACA,QACA,OACA,SACA,WACA,YACA,QACA,SACA,OACA,SACA,OACA,MACA,OACA,WACA,OACA,WACA,WACA,OACA,QACA,OACA,UACA,SACA,OACA,OACA,QACA,SACA,SACA,MACA,QACA,OACA,SACA,SACA,OACA,MACA,MACA,MACA,QACA,SACA,MACA,UACA,MACA,UACA,QACA,QACA,OACA,QACA,SACA,MACA,OACA,OACA,QACA,MACA,OACA,OACA,QACA,QACA,OACA,QACA,SACA,SACA,SACA,QACA,QACA,OACA,QACA,QACA,OACA,UACA,UACA,WACA,OACA,OACA,SACA,MACA,QACA,QACA,QACA,QACA,QACA,QACA,SACA,QACA,QACA,OACA,WACA,SACA,OACA,WACA,YACA,QACA,QACA,OACA,KACA,OACA,OACA,MACA,QACA,MACA,OACA,OACA,OACA,OACA,OACA,UACA,OACA,OACA,WACA,UACA,UACA,YACA,WACA,YACA,YACA,MACA,OACA,OACA,OACA,SACA,QACA,OACA,OACA,QACA,OACA,OACA,QACA,WACA,QACA,QACA,QACA,UACA,QACA,UACA,QACA,SACA,QACA,QACA,WACA,QACA,QACA,SACA,QACA,QACA,OACA,UACA,SACA,OACA,SACA,QACA,QACA,QACA,QACA,QACA,OACA,SACA,SACA,aACA,WACA,SACA,SACA,SACA,UACA,WACA,SACA,QACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,QACA,SACA,QACA,SACA,UACA,OACA,QACA,QACA,QACA,YACA,UACA,QACA,QACA,UACA,QACA,OACA,OACA,WACA,QACA,SACA,QACA,QACA,YACA,QACA,OACA,SACA,QACA,WACA,QACA,QACA,QACA,QACA,QACA,OACA,UACA,WACA,QACA,UACA,QACA,QACA,SACA,QACA,QACA,WACA,UACA,WACA,QACA,QACA,aACA,SACA,SACA,UACA,SACA,QACA,UACA,SACA,QACA,QACA,QACA,QACA,QACA,UACA,OACA,OACA,SACA,SACA,QACA,OACA,MACA,SACA,MACA,SACA,YACA,OACA,OACA,WACA,QACA,UACA,SACA,WACA,SACA,UACA,OACA,SACA,UACA,WACA,UACA,OACA,QACA,OACA,OACA,QACA,QACA,UACA,QACA,QACA,aACA,YACA,QACA,QACA,QACA,OACA,WACA,QACA,SACA,QACA,QACA,QACA,aACA,aACA,SACA,OACA,MACA,OACA,SACA,OACA,QACA,SACA,OACA,OACA,SACA,OACA,OACA,MACA,OACA,MACA,OACA,MACA,QACA,OACA,QACA,SACA,MACA,MACA,QACA,UACA,OACA,OACA,QACA,WACA,QACA,YACA,OACA,SACA,MACA,SACA,OACA,OACA,WACA,OACA,OACA,QACA,WACA,SACA,eACA,OACA,SACA,MACA,UACA,OACA,QACA,OACA,OACA,QACA,QACA,OACA,SACA,UACA,UACA,UACA,QACA,QACA,UACA,OACA,QACA,QACA,QACA,UACA,WACA,SACA,OACA,QACA,QACA,SACA,UACA,WACA,SACA,QACA,QACA,SACA,SACA,UACA,QACA,SACA,QACA,UACA,WACA,MACA,OACA,SACA,SACA,MACA,QACA,QACA,OACA,OACA,MACA,SACA,OACA,MACA,SACA,OACA,QACA,QACA,KACA,OACA,YACA,QACA,UACA,QACA,MACA,WACA,SACA,OACA,SACA,WACA,MACA,OACA,SACA,UACA,MACA,OACA,OACA,OACA,QACA,aACA,YACA,MACA,OACA,OACA,OACA,QACA,MACA,SACA,UACA,QACA,QACA,OACA,MACA,QACA,QACA,QACA,QACA,QACA,OACA,OACA,WACA,QACA,OACA,QACA,WACA,QACA,OACA,OACA,UACA,UACA,QACA,OACA,QACA,QACA,QACA,QACA,MACA,MACA,UACA,MACA,QACA,SACA,OACA,SACA,SACA,OACA,SACA,SACA,SACA,QACA,OACA,OACA,MACA,OACA,WACA,QACA,QACA,aACA,YACA,UACA,SACA,aACA,SACA,aACA,UACA,SACA,UACA,SACA,SACA,UACA,SACA,aACA,QACA,YACA,KACA,OACA,QACA,QACA,SACA,WACA,SACA,SACA,KACA,MACA,OACA,SACA,YACA,SACA,WACA,QACA,OACA,YACA,SACA,OACA,SACA,UACA,OACA,UACA,OACA,SACA,QACA,UACA,QACA,OACA,MACA,QACA,QACA,OACA,OACA,QACA,OACA,OACA,SACA,OACA,MACA,OACA,OACA,MACA,OACA,SACA,UACA,SACA,QACA,QACA,WACA,QACA,aACA,aACA,OACA,MACA,MACA,UACA,KACA,OACA,QACA,QACA,QACA,OACA,SACA,WACA,SACA,SACA,OACA,QACA,UACA,QACA,MACA,UACA,YACA,MACA,OACA,OACA,OACA,QACA,UACA,OACA,OACA,OACA,OACA,UACA,MACA,QACA,OACA,SACA,QACA,QACA,OACA,WACA,QACA,QACA,QACA,OACA,UACA,QACA,UACA,SACA,UACA,UACA,QACA,MACA,QACA,SACA,QACA,QACA,OACA,QACA,MACA,SACA,OACA,OACA,SACA,OACA,UACA,OACA,UACA,SACA,MACA,OACA,WACA,SACA,QACA,OACA,OACA,OACA,SACA,SACA,OACA,OACA,OACA,OACA,MACA,QACA,OACA,UACA,OACA,OACA,QACA,QACA,MACA,QACA,SACA,YACA,OACA,SACA,aACA,QACA,OACA,SACA,OACA,OACA,OACA,SACA,UACA,QACA,OACA,OACA,QACA,QACA,QACA,QACA,QACA,WACA,QACA,OACA,OACA,UACA,QACA,OACA,QACA,QACA,UACA,UACA,QACA,QACA,QACA,OACA,OACA,OACA,OACA,SACA,MACA,YACA,MACA,OACA,SACA,MACA,QACA,SACA,SACA,SACA,QACA,YACA,OACA,QACA,WACA,aACA,iCC93FA,aAEA,IAAA6C,EAAAC,OAAAC,UAAApC,eACAqC,EAAAF,OAAAC,UAAAE,SAEAC,EAAA,SAAAC,GACA,MAAA,mBAAAC,MAAAF,QACAE,MAAAF,QAAAC,GAGA,mBAAAH,EAAA/C,KAAAkD,IAGAE,EAAA,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CA,MAAA,SACA,MAAA,UACA,OAAA,SACA,OAAA,UACA,QAAA,UACA,QAAA,UACA,OAAA,YACA,QAAA,WACA,QAAA,WACA,QAAA,WACA,QAAA,WACA,QAAA,WACA,QAAA,YACA,SAAA,YACA,UAAA,aACA,UAAA,aACAC,QAAA,SAAA/B,GACA,OAAAF,EAAA+B,iBAAA7B,EAAA,GAAAA,EAAA,QAOA,OAAA,MACA,qBAAA,OACA,kBAAA,OACA,gBAAA,SACA,kCAAA,SACA,eAAA,QACA,0CAAA,OACA,kGAAA,QACA,gCAAA,SACA,2BAAA,SACA,iBAAA,UACA,wHAAA,QACA,qGAAA,QACA,QAAA,QACA,2CAAA,YACA,oBAAA,UACA,uBAAA,UACA,oBAAA,SACA,gDAAA,WACA,sBAAA,UACA,sBAAA,WACA,oBAAA,UACA,SAAA,OACA,WAAA,QACA,OAAA,QACA+B,QAAA,SAAA/B,GACA,OAAAF,EAAA2B,cAAAzB,EAAA,GAAAA,EAAA,QAOA,MAAA,KACA,SAAA,OACA,gEAAA,SACA,kCAAA,QACA,QAAA,MACA,uFAAA,SACA,oBAAA,SACA,aAAA,WACA,sBAAA,OACA,iFAAA,OACA,qEAAA,UACA,iCAAA,OACA,oBAAA,SACA,kGAAA,SACA,yGAAA,SACA,8FAAA,SACA,0BAAA,QACA,+BAAA,SACA,sBAAA,SACA,oBAAA,WACA,eAAA,OACA,YAAA,OACA,QAAA,QACA+B,QAAA,SAAA/B,GACA,OAAAF,EAAA6B,gBAAA3B,EAAA,GAAAA,EAAA,OAQA,YACA,SACA,SACA,MACA,UACA,OACA,QACA,YACA,QACA,QACA,QACA,QACA,UACA,SACA,OACA,OACA,UACA,QACA,WACA,MACA,WACA,cACA,QACA,SACA,WACA,YACA,MACA,SACA,YACA,YACA,YACA,WACA,MACA,UACA,UACA,WACA,eACA,SACA,SACA,YACA,WACA,YACA,cACA,QACA,UACA,QACA,SACA,aACA,YACA,WACA,OACA,QACA,OACA,QACA,QACA,QACA,OACA,OACA,WACA,SACA,YACA,WACA,OACA,WACA,OACA,SACA,WACA,SACA,S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h/B,EAAAJ,QASA,SAAAY,GACA,OAAAA,GAAAA,EAAAC,SAIAK,EAEAoD,EACArC,KAAAs9B,MACA3+B,EAAA4+B,kBAAA,IACAC,EAAA7+B,EAAAC,WARAM,KATA,IAAAs+B,EAAA,GACAn7B,EAAA,MACApD,EAAA,gCCNA,aAEAd,EAAAJ,QAWA,SAAAY,GACA,OAAAA,GAAAA,EAAAC,UAAAD,EAAAE,KAIAI,EACAD,EAAAL,EAAAE,KAAAF,EAAAC,SACAgB,GAAAjB,EAAA8+B,gBAAA,GAAA9+B,EAAAE,KAAAS,EALAJ,KAXA,IAAAF,EAAA,KACAY,EAAA,KACAN,EAAA,IACAL,EAAA,8BCPAd,EAAAJ,SACA,IACA,OACA,QACA,QACA,SACA,MACA,MACA,SACA,QACA,YACA,QACA,UACA,MACA,MACA,WACA,QACA,MACA,SACA,QACA,QACA,UACA,OACA,SACA,KACA,QACA,KACA,MACA,QACA,SACA,UACA,SACA,MACA,SACA,SACA,QACA,MACA,MACA,SACA,QACA,KACA,MACA,SACA,KACA,MACA,YACA,OACA,QACA,OACA,IACA,OACA,OACA,MACA,MACA,OACA,UACA,OACA,OACA,OACA,OACA,SACA,KACA,OACA,OACA,OACA,YACA,SACA,UACA,SACA,MACA,MACA,OACA,SACA,QACA,QACA,SACA,UACA,OACA,SACA,OACA,OACA,SACA,OACA,SACA,UACA,MACA,OACA,WACA,MACA,OACA,QACA,UACA,OACA,QACA,OACA,OACA,QACA,OACA,OACA,OACA,OACA,SACA,OACA,SACA,SACA,SACA,SACA,MACA,MACA,MACA,SACA,QACA,QACA,QACA,YACA,SACA,QACA,SACA,SACA,QACA,QACA,SACA,UACA,UACA,QACA,QACA,QACA,OACA,OACA,MACA,OACA,MACA,SACA,SACA,MACA,KACA,IACA,QACA,OACA,OACA,OACA,OACA,OACA,MACA,UACA,SACA,QACA,MACA,UACA,MACA,OACA,OACA,UACA,SACA,QACA,OACA,SACA,MACA,QACA,SACA,SACA,QACA,OACA,UACA,QACA,SACA,SACA,QACA,UACA,QACA,QACA,WACA,SACA,SACA,SACA,OACA,OACA,QACA,SACA,QACA,QACA,QACA,QACA,QACA,UACA,QACA,OACA,OACA,QACA,OACA,cACA,UACA,UACA,WACA,OACA,OACA,SACA,QACA,QACA,UACA,SACA,QACA,MACA,QACA,QACA,MACA,MACA,UACA,MACA,IACA,MACA,QACA,SACA,YACA,OACA,OACA,WACA,MACA,OACA,SACA,OACA,OACA,MACA,WACA,MACA,YACA,MACA,SACA,YACA,YACA,aACA,WACA,WACA,KACA,SACA,OACA,MACA,SACA,UACA,OACA,OACA,OACA,SACA,QACA,QACA,QACA,QACA,OACA,QACA,MACA,OACA,SACA,OACA,IACA,OACA,QACA,MACA,QACA,OACA,QACA,OACA,MACA,OACA,MACA,QACA,WACA,SACA,WACA,OACA,QACA,MACA,QACA,SACA,QACA,OACA,OACA,QACA,aACA,QACA,SACA,SACA,UACA,UACA,MACA,OACA,OACA,OACA,OACA,SACA,MACA,OACA,SACA,UACA,OACA,MACA,SACA,UACA,OACA,OACA,OACA,OACA,SACA,OACA,QACA,MACA,QACA,SACA,QACA,SACA,OACA,QACA,OACA,OACA,SACA,SACA,OACA,QACA,OACA,OACA,OACA,QACA,OACA,OACA,QACA,SACA,MACA,SACA,OACA,MACA,SACA,SACA,QACA,QACA,OACA,SACA,MACA,QACA,SACA,WACA,OACA,OACA,QACA,QACA,OACA,MACA,QACA,MACA,IACA,OACA,SACA,OACA,OACA,OACA,MACA,QACA,OACA,OACA,OACA,OACA,QACA,KACA,OACA,OACA,OACA,MACA,cACA,cACA,QACA,OACA,QACA,QACA,OACA,OACA,SACA,QACA,OACA,QACA,QACA,MACA,IACA,MACA,OACA,OACA,OACA,OACA,SACA,OACA,SACA,YACA,QACA,OACA,OACA,MACA,MACA,OACA,OACA,KACA,SACA,OACA,OACA,QACA,QACA,OACA,QACA,OACA,MACA,MACA,OACA,UACA,MACA,OACA,OACA,OACA,MACA,UACA,MACA,MACA,OACA,OACA,UACA,OACA,QACA,MACA,OACA,QACA,MACA,OACA,QACA,MACA,OACA,MACA,UACA,OACA,SACA,OACA,QACA,OACA,UACA,IACA,SACA,QACA,MACA,OACA,KACA,UACA,YACA,KACA,OACA,SACA,SACA,UACA,OACA,SACA,KACA,KACA,SACA,MACA,IACA,SACA,MACA,MACA,MACA,OACA,OACA,MACA,OACA,OACA,IACA,OACA,OACA,MACA,OACA,OACA,OACA,OACA,UACA,SACA,OACA,OACA,QACA,OACA,IACA,SACA,OACA,OACA,OACA,OACA,QACA,OACA,OACA,QACA,MACA,OACA,OACA,OACA,QACA,QACA,QACA,OACA,MACA,OACA,MACA,UACA,SACA,OACA,OACA,QACA,OACA,OACA,OACA,OACA,SACA,SACA,OACA,OACA,OACA,OACA,OACA,MACA,OACA,OACA,MACA,OACA,OACA,QACA,IACA,UACA,OACA,QACA,OACA,OACA,MACA,OACA,QACA,OACA,SACA,SACA,SACA,MACA,QACA,KACA,OACA,QACA,OACA,OACA,OACA,MACA,QACA,MACA,SACA,QACA,OACA,OACA,UACA,OACA,OACA,SACA,OACA,UACA,SACA,QACA,SACA,QACA,OACA,UACA,OACA,SACA,WACA,QACA,QACA,OACA,OACA,MACA,QACA,OACA,KACA,IACA,OACA,OACA,OACA,OACA,SACA,WACA,eACA,OACA,QACA,MACA,OACA,SACA,OACA,QACA,OACA,KACA,MACA,QACA,OACA,QACA,OACA,MACA,OACA,UACA,SACA,MACA,SACA,IACA,QACA,KACA,MACA,QACA,QACA,KACA,MACA,KACA,OACA,MACA,OACA,OACA,KACA,SACA,QACA,QACA,MACA,MACA,UACA,OACA,MACA,MACA,IACA,OACA,OACA,OACA,QACA,OACA,SACA,MACA,QACA,SACA,SACA,OACA,OACA,QACA,OACA,OACA,UACA,OACA,MACA,MACA,SACA,OACA,MACA,QACA,SACA,UACA,UACA,SACA,MACA,OACA,SACA,SACA,UACA,MACA,QACA,MACA,OACA,MACA,QACA,OACA,QACA,OACA,WACA,SACA,SACA,OACA,QACA,OACA,OACA,YACA,OACA,OACA,MACA,UACA,MACA,SACA,QACA,OACA,WACA,UACA,UACA,UACA,SACA,WACA,QACA,WACA,UACA,UACA,UACA,QACA,OACA,OACA,QACA,OACA,MACA,IACA,QACA,QACA,QACA,QACA,QACA,IACA,SACA,UACA,OACA,QACA,MACA,OACA,QACA,MACA,QACA,OACA,QACA,OACA,QACA,OACA,MACA,SACA,WACA,QACA,OACA,SACA,SACA,OACA,OACA,QACA,OACA,QACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QACA,MACA,MACA,OACA,MACA,OACA,IACA,MACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,MACA,OACA,MACA,MACA,QACA,SACA,QACA,UACA,SACA,MACA,OACA,SACA,SACA,MACA,OACA,OACA,OACA,OACA,OACA,OACA,QACA,UACA,MACA,SACA,QACA,QACA,QACA,MACA,QACA,QACA,QACA,OACA,OACA,QACA,QACA,QACA,OACA,QACA,QACA,OACA,SACA,OACA,OACA,OACA,QACA,OACA,SACA,SACA,QACA,SACA,QACA,OACA,SACA,MACA,MACA,OACA,OACA,MACA,OACA,QACA,OACA,QACA,OACA,QACA,QACA,QACA,QACA,QACA,OACA,QACA,OACA,KACA,OACA,OACA,OACA,YACA,YACA,MACA,OACA,OACA,QACA,QACA,QACA,UACA,QACA,QACA,SACA,QACA,OACA,SACA,SACA,WACA,QACA,OACA,QACA,UACA,OACA,OACA,QACA,QACA,QACA,QACA,OACA,QACA,QACA,WACA,UACA,SACA,UACA,SACA,SACA,OACA,SACA,QACA,OACA,SACA,MACA,SACA,UACA,OACA,WACA,UACA,QACA,OACA,QACA,IACA,QACA,OACA,OACA,OACA,OACA,MACA,QACA,QACA,UACA,OACA,OACA,QACA,YACA,OACA,MACA,OACA,OACA,QACA,OACA,WACA,MACA,QACA,OACA,OACA,QACA,QACA,OACA,QACA,OACA,QACA,QACA,QACA,OACA,QACA,SACA,UACA,QACA,QACA,UACA,QACA,MACA,QACA,QACA,OACA,OACA,MACA,OACA,KACA,QACA,MACA,WACA,OACA,WACA,MACA,OACA,QACA,MACA,QACA,SACA,QACA,OACA,MACA,QACA,UACA,QACA,OACA,OACA,QACA,OACA,OACA,QACA,OACA,QACA,MACA,SACA,OACA,SACA,SACA,OACA,MACA,IACA,OACA,QACA,QACA,UACA,QACA,KACA,OACA,WACA,KACA,MACA,QACA,IACA,SACA,YACA,OACA,UACA,QACA,QACA,IACA,MACA,QACA,OACA,OACA,OACA,OACA,MACA,OACA,MACA,OACA,QACA,QACA,QACA,OACA,MACA,KACA,OACA,UACA,OACA,OACA,OACA,OACA,MACA,OACA,QACA,OACA,QACA,QACA,QACA,UACA,UACA,QACA,MACA,QACA,QACA,MACA,OACA,OACA,OACA,MACA,OACA,SACA,OACA,OACA,SACA,OACA,OACA,OACA,OACA,UACA,OACA,OACA,QACA,QACA,UACA,SACA,OACA,OACA,OACA,OACA,QACA,OACA,QACA,QACA,QACA,QACA,IACA,IACA,OACA,OACA,OACA,SACA,MACA,MACA,MACA,QACA,OACA,IACA,gCCviCA,aAEA,IAAAy6B,EAAA/6B,EAAA,aACAuvB,EAAAvvB,EAAA,qBACAigC,EAAAjgC,EAAA,sBAEAU,EAAAJ,QA0SA,SAAA6E,GAMA,IALA,IAAAxE,EAAA4uB,EAAAY,OAAAhrB,IAAA6rB,cAAAyI,MAAAyG,GACA1/B,EAAAG,EAAAH,OACAO,GAAA,EACAo/B,EAAA,IAEAp/B,EAAAP,GACA2/B,GAOA,SAAAh7B,GA0EA,SAAAi7B,EAAAC,GACA,OACA,WAEA,OADA1I,GAAA0I,EACA,IAQA,SAAA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","file":"readability-worker.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nmodule.exports = iterate;\n\nvar own = {}.hasOwnProperty;\n\nfunction iterate(values, callback, context) {\n  var index = -1;\n  var result;\n\n  if (!values) {\n    throw new Error('Iterate requires that |this| not be ' + values);\n  }\n\n  if (!own.call(values, 'length')) {\n    throw new Error('Iterate requires that |this| has a `length`');\n  }\n\n  if (typeof callback !== 'function') {\n    throw new Error('`callback` must be a function');\n  }\n\n  /* The length might change, so we do not cache it. */\n  while (++index < values.length) {\n    /* Skip missing values. */\n    if (!(index in values)) {\n      continue;\n    }\n\n    result = callback.call(context, values[index], index, values);\n\n    /* If `callback` returns a `number`, move `index` over to\n     * `number`. */\n    if (typeof result === 'number') {\n      /* Make sure that negative numbers do not break the loop. */\n      if (result < 0) {\n        index = 0;\n      }\n\n      index = result - 1;\n    }\n  }\n}\n","'use strict';\n\nmodule.exports = automatedReadability;\n\nvar CHARACTER_WEIGHT = 4.71;\nvar SENTENCE_WEIGHT = 0.5;\nvar BASE = 21.43;\n\nfunction automatedReadability(counts) {\n  if (!counts || !counts.sentence || !counts.word || !counts.character) {\n    return NaN;\n  }\n\n  return (CHARACTER_WEIGHT * (counts.character / counts.word)) +\n    (SENTENCE_WEIGHT * (counts.word / counts.sentence)) -\n    BASE;\n}\n","'use strict';\n\nmodule.exports = bail;\n\nfunction bail(err) {\n  if (err) {\n    throw err;\n  }\n}\n","'use strict';\n\nmodule.exports = colemanLiau;\n\nvar LETTER_WEIGHT = 0.0588;\nvar SENTENCE_WEIGHT = 0.296;\nvar BASE = 15.8;\nvar PERCENTAGE = 100;\n\nfunction colemanLiau(counts) {\n  if (!counts || !counts.sentence || !counts.word || !counts.letter) {\n    return NaN;\n  }\n\n  return (LETTER_WEIGHT * (counts.letter / counts.word * PERCENTAGE)) -\n    (SENTENCE_WEIGHT * (counts.sentence / counts.word * PERCENTAGE)) -\n    BASE;\n}\n","'use strict';\n\nmodule.exports = daleChall;\ndaleChall.gradeLevel = daleChallGradeLevel;\n\nvar DIFFICULT_WORD_WEIGHT = 0.1579;\nvar WORD_WEIGHT = 0.0496;\nvar DIFFICULT_WORD_THRESHOLD = 0.05;\nvar PERCENTAGE = 100;\nvar ADJUSTMENT = 3.6365;\n\n/* Grade map associated with the scores. */\nvar GRADE_MAP = {\n  4: [0, 4],\n  5: [5, 6],\n  6: [7, 8],\n  7: [9, 10],\n  8: [11, 12],\n  9: [13, 15],\n  10: [16, Infinity],\n  NaN: [NaN, NaN]\n};\n\nfunction daleChall(counts) {\n  var percentageOfDifficultWords;\n  var score;\n\n  if (!counts || !counts.sentence || !counts.word) {\n    return NaN;\n  }\n\n  percentageOfDifficultWords = (counts.difficultWord || 0) / counts.word;\n\n  score = (DIFFICULT_WORD_WEIGHT * percentageOfDifficultWords * PERCENTAGE) +\n    (WORD_WEIGHT * counts.word / counts.sentence);\n\n  if (percentageOfDifficultWords > DIFFICULT_WORD_THRESHOLD) {\n    score += ADJUSTMENT;\n  }\n\n  return score;\n}\n\n/* Mapping between a dale-chall score and a U.S. grade level. */\nfunction daleChallGradeLevel(score) {\n  score = Math.floor(score);\n\n  if (score < 5) {\n    score = 4;\n  } else if (score > 9) {\n    score = 10;\n  }\n\n  return GRADE_MAP[score].concat();\n}\n","module.exports=[\n  \"a\",\n  \"able\",\n  \"aboard\",\n  \"about\",\n  \"above\",\n  \"absent\",\n  \"accept\",\n  \"accident\",\n  \"account\",\n  \"ache\",\n  \"aching\",\n  \"acorn\",\n  \"acre\",\n  \"across\",\n  \"act\",\n  \"acts\",\n  \"add\",\n  \"address\",\n  \"admire\",\n  \"adventure\",\n  \"afar\",\n  \"afraid\",\n  \"after\",\n  \"afternoon\",\n  \"afterward\",\n  \"afterwards\",\n  \"again\",\n  \"against\",\n  \"age\",\n  \"aged\",\n  \"ago\",\n  \"agree\",\n  \"ah\",\n  \"ahead\",\n  \"aid\",\n  \"aim\",\n  \"air\",\n  \"airfield\",\n  \"airplane\",\n  \"airport\",\n  \"airship\",\n  \"airy\",\n  \"alarm\",\n  \"alike\",\n  \"alive\",\n  \"all\",\n  \"alley\",\n  \"alligator\",\n  \"allow\",\n  \"almost\",\n  \"alone\",\n  \"along\",\n  \"aloud\",\n  \"already\",\n  \"also\",\n  \"always\",\n  \"am\",\n  \"america\",\n  \"american\",\n  \"among\",\n  \"amount\",\n  \"an\",\n  \"and\",\n  \"angel\",\n  \"anger\",\n  \"angry\",\n  \"animal\",\n  \"another\",\n  \"answer\",\n  \"ant\",\n  \"any\",\n  \"anybody\",\n  \"anyhow\",\n  \"anyone\",\n  \"anything\",\n  \"anyway\",\n  \"anywhere\",\n  \"apart\",\n  \"apartment\",\n  \"ape\",\n  \"apiece\",\n  \"appear\",\n  \"apple\",\n  \"april\",\n  \"apron\",\n  \"are\",\n  \"aren't\",\n  \"arise\",\n  \"arithmetic\",\n  \"arm\",\n  \"armful\",\n  \"army\",\n  \"arose\",\n  \"around\",\n  \"arrange\",\n  \"arrive\",\n  \"arrived\",\n  \"arrow\",\n  \"art\",\n  \"artist\",\n  \"as\",\n  \"ash\",\n  \"ashes\",\n  \"aside\",\n  \"ask\",\n  \"asleep\",\n  \"at\",\n  \"ate\",\n  \"attack\",\n  \"attend\",\n  \"attention\",\n  \"august\",\n  \"aunt\",\n  \"author\",\n  \"auto\",\n  \"automobile\",\n  \"autumn\",\n  \"avenue\",\n  \"awake\",\n  \"awaken\",\n  \"away\",\n  \"awful\",\n  \"awfully\",\n  \"awhile\",\n  \"ax\",\n  \"axe\",\n  \"baa\",\n  \"babe\",\n  \"babies\",\n  \"back\",\n  \"background\",\n  \"backward\",\n  \"backwards\",\n  \"bacon\",\n  \"bad\",\n  \"badge\",\n  \"badly\",\n  \"bag\",\n  \"bake\",\n  \"baker\",\n  \"bakery\",\n  \"baking\",\n  \"ball\",\n  \"balloon\",\n  \"banana\",\n  \"band\",\n  \"bandage\",\n  \"bang\",\n  \"banjo\",\n  \"bank\",\n  \"banker\",\n  \"bar\",\n  \"barber\",\n  \"bare\",\n  \"barefoot\",\n  \"barely\",\n  \"bark\",\n  \"barn\",\n  \"barrel\",\n  \"base\",\n  \"baseball\",\n  \"basement\",\n  \"basket\",\n  \"bat\",\n  \"batch\",\n  \"bath\",\n  \"bathe\",\n  \"bathing\",\n  \"bathroom\",\n  \"bathtub\",\n  \"battle\",\n  \"battleship\",\n  \"bay\",\n  \"be\",\n  \"beach\",\n  \"bead\",\n  \"beam\",\n  \"bean\",\n  \"bear\",\n  \"beard\",\n  \"beast\",\n  \"beat\",\n  \"beating\",\n  \"beautiful\",\n  \"beautify\",\n  \"beauty\",\n  \"became\",\n  \"because\",\n  \"become\",\n  \"becoming\",\n  \"bed\",\n  \"bedbug\",\n  \"bedroom\",\n  \"bedspread\",\n  \"bedtime\",\n  \"bee\",\n  \"beech\",\n  \"beef\",\n  \"beefsteak\",\n  \"beehive\",\n  \"been\",\n  \"beer\",\n  \"beet\",\n  \"before\",\n  \"beg\",\n  \"began\",\n  \"beggar\",\n  \"begged\",\n  \"begin\",\n  \"beginning\",\n  \"begun\",\n  \"behave\",\n  \"behind\",\n  \"being\",\n  \"believe\",\n  \"bell\",\n  \"belong\",\n  \"below\",\n  \"belt\",\n  \"bench\",\n  \"bend\",\n  \"beneath\",\n  \"bent\",\n  \"berries\",\n  \"berry\",\n  \"beside\",\n  \"besides\",\n  \"best\",\n  \"bet\",\n  \"better\",\n  \"between\",\n  \"bib\",\n  \"bible\",\n  \"bicycle\",\n  \"bid\",\n  \"big\",\n  \"bigger\",\n  \"bill\",\n  \"billboard\",\n  \"bin\",\n  \"bind\",\n  \"bird\",\n  \"birth\",\n  \"birthday\",\n  \"biscuit\",\n  \"bit\",\n  \"bite\",\n  \"biting\",\n  \"bitter\",\n  \"black\",\n  \"blackberry\",\n  \"blackbird\",\n  \"blackboard\",\n  \"blackness\",\n  \"blacksmith\",\n  \"blame\",\n  \"blank\",\n  \"blanket\",\n  \"blast\",\n  \"blaze\",\n  \"bleed\",\n  \"bless\",\n  \"blessing\",\n  \"blew\",\n  \"blind\",\n  \"blindfold\",\n  \"blinds\",\n  \"block\",\n  \"blood\",\n  \"bloom\",\n  \"blossom\",\n  \"blot\",\n  \"blow\",\n  \"blue\",\n  \"blueberry\",\n  \"bluebird\",\n  \"blush\",\n  \"board\",\n  \"boast\",\n  \"boat\",\n  \"bob\",\n  \"bobwhite\",\n  \"bodies\",\n  \"body\",\n  \"boil\",\n  \"boiler\",\n  \"bold\",\n  \"bone\",\n  \"bonnet\",\n  \"boo\",\n  \"book\",\n  \"bookcase\",\n  \"bookkeeper\",\n  \"boom\",\n  \"boot\",\n  \"born\",\n  \"borrow\",\n  \"boss\",\n  \"both\",\n  \"bother\",\n  \"bottle\",\n  \"bottom\",\n  \"bought\",\n  \"bounce\",\n  \"bow\",\n  \"bow-wow\",\n  \"bowl\",\n  \"box\",\n  \"boxcar\",\n  \"boxer\",\n  \"boxes\",\n  \"boy\",\n  \"boyhood\",\n  \"bracelet\",\n  \"brain\",\n  \"brake\",\n  \"bran\",\n  \"branch\",\n  \"brass\",\n  \"brave\",\n  \"bread\",\n  \"break\",\n  \"breakfast\",\n  \"breast\",\n  \"breath\",\n  \"breathe\",\n  \"breeze\",\n  \"brick\",\n  \"bride\",\n  \"bridge\",\n  \"bright\",\n  \"brightness\",\n  \"bring\",\n  \"broad\",\n  \"broadcast\",\n  \"broke\",\n  \"broken\",\n  \"brook\",\n  \"broom\",\n  \"brother\",\n  \"brought\",\n  \"brown\",\n  \"brush\",\n  \"bubble\",\n  \"bucket\",\n  \"buckle\",\n  \"bud\",\n  \"buffalo\",\n  \"bug\",\n  \"buggy\",\n  \"build\",\n  \"building\",\n  \"built\",\n  \"bulb\",\n  \"bull\",\n  \"bullet\",\n  \"bum\",\n  \"bumblebee\",\n  \"bump\",\n  \"bun\",\n  \"bunch\",\n  \"bundle\",\n  \"bunny\",\n  \"burn\",\n  \"burst\",\n  \"bury\",\n  \"bus\",\n  \"bush\",\n  \"bushel\",\n  \"business\",\n  \"busy\",\n  \"but\",\n  \"butcher\",\n  \"butt\",\n  \"butter\",\n  \"buttercup\",\n  \"butterfly\",\n  \"buttermilk\",\n  \"butterscotch\",\n  \"button\",\n  \"buttonhole\",\n  \"buy\",\n  \"buzz\",\n  \"by\",\n  \"bye\",\n  \"cab\",\n  \"cabbage\",\n  \"cabin\",\n  \"cabinet\",\n  \"cackle\",\n  \"cage\",\n  \"cake\",\n  \"calendar\",\n  \"calf\",\n  \"call\",\n  \"caller\",\n  \"calling\",\n  \"came\",\n  \"camel\",\n  \"camp\",\n  \"campfire\",\n  \"can\",\n  \"can't\",\n  \"canal\",\n  \"canary\",\n  \"candle\",\n  \"candlestick\",\n  \"candy\",\n  \"cane\",\n  \"cannon\",\n  \"cannot\",\n  \"canoe\",\n  \"canyon\",\n  \"cap\",\n  \"cape\",\n  \"capital\",\n  \"captain\",\n  \"car\",\n  \"card\",\n  \"cardboard\",\n  \"care\",\n  \"careful\",\n  \"careless\",\n  \"carelessness\",\n  \"carload\",\n  \"carpenter\",\n  \"carpet\",\n  \"carriage\",\n  \"carrot\",\n  \"carry\",\n  \"cart\",\n  \"carve\",\n  \"case\",\n  \"cash\",\n  \"cashier\",\n  \"castle\",\n  \"cat\",\n  \"catbird\",\n  \"catch\",\n  \"catcher\",\n  \"caterpillar\",\n  \"catfish\",\n  \"catsup\",\n  \"cattle\",\n  \"caught\",\n  \"cause\",\n  \"cave\",\n  \"ceiling\",\n  \"cell\",\n  \"cellar\",\n  \"cent\",\n  \"center\",\n  \"cereal\",\n  \"certain\",\n  \"certainly\",\n  \"chain\",\n  \"chair\",\n  \"chalk\",\n  \"champion\",\n  \"chance\",\n  \"change\",\n  \"chap\",\n  \"charge\",\n  \"charm\",\n  \"chart\",\n  \"chase\",\n  \"chatter\",\n  \"cheap\",\n  \"cheat\",\n  \"check\",\n  \"checkers\",\n  \"cheek\",\n  \"cheer\",\n  \"cheese\",\n  \"cherry\",\n  \"chest\",\n  \"chew\",\n  \"chick\",\n  \"chicken\",\n  \"chief\",\n  \"child\",\n  \"childhood\",\n  \"children\",\n  \"chill\",\n  \"chilly\",\n  \"chimney\",\n  \"chin\",\n  \"china\",\n  \"chip\",\n  \"chipmunk\",\n  \"chocolate\",\n  \"choice\",\n  \"choose\",\n  \"chop\",\n  \"chorus\",\n  \"chose\",\n  \"chosen\",\n  \"christen\",\n  \"christmas\",\n  \"church\",\n  \"churn\",\n  \"cigarette\",\n  \"circle\",\n  \"circus\",\n  \"citizen\",\n  \"city\",\n  \"clang\",\n  \"clap\",\n  \"class\",\n  \"classmate\",\n  \"classroom\",\n  \"claw\",\n  \"clay\",\n  \"clean\",\n  \"cleaner\",\n  \"clear\",\n  \"clerk\",\n  \"clever\",\n  \"click\",\n  \"cliff\",\n  \"climb\",\n  \"clip\",\n  \"cloak\",\n  \"clock\",\n  \"close\",\n  \"closet\",\n  \"cloth\",\n  \"clothes\",\n  \"clothing\",\n  \"cloud\",\n  \"cloudy\",\n  \"clover\",\n  \"clown\",\n  \"club\",\n  \"cluck\",\n  \"clump\",\n  \"coach\",\n  \"coal\",\n  \"coast\",\n  \"coat\",\n  \"cob\",\n  \"cobbler\",\n  \"cocoa\",\n  \"coconut\",\n  \"cocoon\",\n  \"cod\",\n  \"codfish\",\n  \"coffee\",\n  \"coffeepot\",\n  \"coin\",\n  \"cold\",\n  \"collar\",\n  \"college\",\n  \"color\",\n  \"colored\",\n  \"colt\",\n  \"column\",\n  \"comb\",\n  \"come\",\n  \"comfort\",\n  \"comic\",\n  \"coming\",\n  \"company\",\n  \"compare\",\n  \"conductor\",\n  \"cone\",\n  \"connect\",\n  \"coo\",\n  \"cook\",\n  \"cooked\",\n  \"cookie\",\n  \"cookies\",\n  \"cooking\",\n  \"cool\",\n  \"cooler\",\n  \"coop\",\n  \"copper\",\n  \"copy\",\n  \"cord\",\n  \"cork\",\n  \"corn\",\n  \"corner\",\n  \"correct\",\n  \"cost\",\n  \"cot\",\n  \"cottage\",\n  \"cotton\",\n  \"couch\",\n  \"cough\",\n  \"could\",\n  \"couldn't\",\n  \"count\",\n  \"counter\",\n  \"country\",\n  \"county\",\n  \"course\",\n  \"court\",\n  \"cousin\",\n  \"cover\",\n  \"cow\",\n  \"coward\",\n  \"cowardly\",\n  \"cowboy\",\n  \"cozy\",\n  \"crab\",\n  \"crack\",\n  \"cracker\",\n  \"cradle\",\n  \"cramps\",\n  \"cranberry\",\n  \"crank\",\n  \"cranky\",\n  \"crash\",\n  \"crawl\",\n  \"crazy\",\n  \"cream\",\n  \"creamy\",\n  \"creek\",\n  \"creep\",\n  \"crept\",\n  \"cried\",\n  \"cries\",\n  \"croak\",\n  \"crook\",\n  \"crooked\",\n  \"crop\",\n  \"cross\",\n  \"cross-eyed\",\n  \"crossing\",\n  \"crow\",\n  \"crowd\",\n  \"crowded\",\n  \"crown\",\n  \"cruel\",\n  \"crumb\",\n  \"crumble\",\n  \"crush\",\n  \"crust\",\n  \"cry\",\n  \"cub\",\n  \"cuff\",\n  \"cup\",\n  \"cupboard\",\n  \"cupful\",\n  \"cure\",\n  \"curl\",\n  \"curly\",\n  \"curtain\",\n  \"curve\",\n  \"cushion\",\n  \"custard\",\n  \"customer\",\n  \"cut\",\n  \"cute\",\n  \"cutting\",\n  \"dab\",\n  \"dad\",\n  \"daddy\",\n  \"daily\",\n  \"dairy\",\n  \"daisy\",\n  \"dam\",\n  \"damage\",\n  \"dame\",\n  \"damp\",\n  \"dance\",\n  \"dancer\",\n  \"dancing\",\n  \"dandy\",\n  \"danger\",\n  \"dangerous\",\n  \"dare\",\n  \"dark\",\n  \"darkness\",\n  \"darling\",\n  \"darn\",\n  \"dart\",\n  \"dash\",\n  \"date\",\n  \"daughter\",\n  \"dawn\",\n  \"day\",\n  \"daybreak\",\n  \"daytime\",\n  \"dead\",\n  \"deaf\",\n  \"deal\",\n  \"dear\",\n  \"death\",\n  \"december\",\n  \"decide\",\n  \"deck\",\n  \"deed\",\n  \"deep\",\n  \"deer\",\n  \"defeat\",\n  \"defend\",\n  \"defense\",\n  \"delight\",\n  \"den\",\n  \"dentist\",\n  \"depend\",\n  \"deposit\",\n  \"describe\",\n  \"desert\",\n  \"deserve\",\n  \"desire\",\n  \"desk\",\n  \"destroy\",\n  \"devil\",\n  \"dew\",\n  \"diamond\",\n  \"did\",\n  \"didn't\",\n  \"die\",\n  \"died\",\n  \"dies\",\n  \"difference\",\n  \"different\",\n  \"dig\",\n  \"dim\",\n  \"dime\",\n  \"dine\",\n  \"ding-dong\",\n  \"dinner\",\n  \"dip\",\n  \"direct\",\n  \"direction\",\n  \"dirt\",\n  \"dirty\",\n  \"discover\",\n  \"dish\",\n  \"dislike\",\n  \"dismiss\",\n  \"ditch\",\n  \"dive\",\n  \"diver\",\n  \"divide\",\n  \"do\",\n  \"dock\",\n  \"doctor\",\n  \"does\",\n  \"doesn't\",\n  \"dog\",\n  \"doll\",\n  \"dollar\",\n  \"dolly\",\n  \"don't\",\n  \"done\",\n  \"donkey\",\n  \"door\",\n  \"doorbell\",\n  \"doorknob\",\n  \"doorstep\",\n  \"dope\",\n  \"dot\",\n  \"double\",\n  \"dough\",\n  \"dove\",\n  \"down\",\n  \"downstairs\",\n  \"downtown\",\n  \"dozen\",\n  \"drag\",\n  \"drain\",\n  \"drank\",\n  \"draw\",\n  \"drawer\",\n  \"drawing\",\n  \"dream\",\n  \"dress\",\n  \"dresser\",\n  \"dressmaker\",\n  \"drew\",\n  \"dried\",\n  \"drift\",\n  \"drill\",\n  \"drink\",\n  \"drip\",\n  \"drive\",\n  \"driven\",\n  \"driver\",\n  \"drop\",\n  \"drove\",\n  \"drown\",\n  \"drowsy\",\n  \"drub\",\n  \"drum\",\n  \"drunk\",\n  \"dry\",\n  \"duck\",\n  \"due\",\n  \"dug\",\n  \"dull\",\n  \"dumb\",\n  \"dump\",\n  \"during\",\n  \"dust\",\n  \"dusty\",\n  \"duty\",\n  \"dwarf\",\n  \"dwell\",\n  \"dwelt\",\n  \"dying\",\n  \"each\",\n  \"eager\",\n  \"eagle\",\n  \"ear\",\n  \"early\",\n  \"earn\",\n  \"earth\",\n  \"east\",\n  \"eastern\",\n  \"easy\",\n  \"eat\",\n  \"eaten\",\n  \"edge\",\n  \"egg\",\n  \"eh\",\n  \"eight\",\n  \"eighteen\",\n  \"eighth\",\n  \"eighty\",\n  \"either\",\n  \"elbow\",\n  \"elder\",\n  \"eldest\",\n  \"electric\",\n  \"electricity\",\n  \"elephant\",\n  \"eleven\",\n  \"elf\",\n  \"elm\",\n  \"else\",\n  \"elsewhere\",\n  \"empty\",\n  \"end\",\n  \"ending\",\n  \"enemy\",\n  \"engine\",\n  \"engineer\",\n  \"english\",\n  \"enjoy\",\n  \"enough\",\n  \"enter\",\n  \"envelope\",\n  \"equal\",\n  \"erase\",\n  \"eraser\",\n  \"errand\",\n  \"escape\",\n  \"eve\",\n  \"even\",\n  \"evening\",\n  \"ever\",\n  \"every\",\n  \"everybody\",\n  \"everyday\",\n  \"everyone\",\n  \"everything\",\n  \"everywhere\",\n  \"evil\",\n  \"exact\",\n  \"except\",\n  \"exchange\",\n  \"excited\",\n  \"exciting\",\n  \"excuse\",\n  \"exit\",\n  \"expect\",\n  \"explain\",\n  \"extra\",\n  \"eye\",\n  \"eyebrow\",\n  \"fable\",\n  \"face\",\n  \"facing\",\n  \"fact\",\n  \"factory\",\n  \"fail\",\n  \"faint\",\n  \"fair\",\n  \"fairy\",\n  \"faith\",\n  \"fake\",\n  \"fall\",\n  \"false\",\n  \"family\",\n  \"fan\",\n  \"fancy\",\n  \"far\",\n  \"far-off\",\n  \"faraway\",\n  \"fare\",\n  \"farm\",\n  \"farmer\",\n  \"farming\",\n  \"farther\",\n  \"fashion\",\n  \"fast\",\n  \"fasten\",\n  \"fat\",\n  \"father\",\n  \"fault\",\n  \"favor\",\n  \"favorite\",\n  \"fear\",\n  \"feast\",\n  \"feather\",\n  \"february\",\n  \"fed\",\n  \"feed\",\n  \"feel\",\n  \"feet\",\n  \"fell\",\n  \"fellow\",\n  \"felt\",\n  \"fence\",\n  \"fever\",\n  \"few\",\n  \"fib\",\n  \"fiddle\",\n  \"field\",\n  \"fife\",\n  \"fifteen\",\n  \"fifth\",\n  \"fifty\",\n  \"fig\",\n  \"fight\",\n  \"figure\",\n  \"file\",\n  \"fill\",\n  \"film\",\n  \"finally\",\n  \"find\",\n  \"fine\",\n  \"finger\",\n  \"finish\",\n  \"fire\",\n  \"firearm\",\n  \"firecracker\",\n  \"fireplace\",\n  \"fireworks\",\n  \"firing\",\n  \"first\",\n  \"fish\",\n  \"fisherman\",\n  \"fist\",\n  \"fit\",\n  \"fits\",\n  \"five\",\n  \"fix\",\n  \"flag\",\n  \"flake\",\n  \"flame\",\n  \"flap\",\n  \"flash\",\n  \"flashlight\",\n  \"flat\",\n  \"flea\",\n  \"flesh\",\n  \"flew\",\n  \"flies\",\n  \"flight\",\n  \"flip\",\n  \"flip-flop\",\n  \"float\",\n  \"flock\",\n  \"flood\",\n  \"floor\",\n  \"flop\",\n  \"flour\",\n  \"flow\",\n  \"flower\",\n  \"flowery\",\n  \"flutter\",\n  \"fly\",\n  \"foam\",\n  \"fog\",\n  \"foggy\",\n  \"fold\",\n  \"folks\",\n  \"follow\",\n  \"following\",\n  \"fond\",\n  \"food\",\n  \"fool\",\n  \"foolish\",\n  \"foot\",\n  \"football\",\n  \"footprint\",\n  \"for\",\n  \"forehead\",\n  \"forest\",\n  \"forget\",\n  \"forgive\",\n  \"forgot\",\n  \"forgotten\",\n  \"fork\",\n  \"form\",\n  \"fort\",\n  \"forth\",\n  \"fortune\",\n  \"forty\",\n  \"forward\",\n  \"fought\",\n  \"found\",\n  \"fountain\",\n  \"four\",\n  \"fourteen\",\n  \"fourth\",\n  \"fox\",\n  \"frame\",\n  \"free\",\n  \"freedom\",\n  \"freeze\",\n  \"freight\",\n  \"french\",\n  \"fresh\",\n  \"fret\",\n  \"friday\",\n  \"fried\",\n  \"friend\",\n  \"friendly\",\n  \"friendship\",\n  \"frighten\",\n  \"frog\",\n  \"from\",\n  \"front\",\n  \"frost\",\n  \"frown\",\n  \"froze\",\n  \"fruit\",\n  \"fry\",\n  \"fudge\",\n  \"fuel\",\n  \"full\",\n  \"fully\",\n  \"fun\",\n  \"funny\",\n  \"fur\",\n  \"furniture\",\n  \"further\",\n  \"fuzzy\",\n  \"gain\",\n  \"gallon\",\n  \"gallop\",\n  \"game\",\n  \"gang\",\n  \"garage\",\n  \"garbage\",\n  \"garden\",\n  \"gas\",\n  \"gasoline\",\n  \"gate\",\n  \"gather\",\n  \"gave\",\n  \"gay\",\n  \"gear\",\n  \"geese\",\n  \"general\",\n  \"gentle\",\n  \"gentleman\",\n  \"gentlemen\",\n  \"geography\",\n  \"get\",\n  \"getting\",\n  \"giant\",\n  \"gift\",\n  \"gingerbread\",\n  \"girl\",\n  \"give\",\n  \"given\",\n  \"giving\",\n  \"glad\",\n  \"gladly\",\n  \"glance\",\n  \"glass\",\n  \"glasses\",\n  \"gleam\",\n  \"glide\",\n  \"glory\",\n  \"glove\",\n  \"glow\",\n  \"glue\",\n  \"go\",\n  \"goal\",\n  \"goat\",\n  \"gobble\",\n  \"god\",\n  \"godmother\",\n  \"goes\",\n  \"going\",\n  \"gold\",\n  \"golden\",\n  \"goldfish\",\n  \"golf\",\n  \"gone\",\n  \"good\",\n  \"good-by\",\n  \"good-bye\",\n  \"good-looking\",\n  \"goodbye\",\n  \"goodness\",\n  \"goods\",\n  \"goody\",\n  \"goose\",\n  \"gooseberry\",\n  \"got\",\n  \"govern\",\n  \"government\",\n  \"gown\",\n  \"grab\",\n  \"gracious\",\n  \"grade\",\n  \"grain\",\n  \"grand\",\n  \"grandchild\",\n  \"grandchildren\",\n  \"granddaughter\",\n  \"grandfather\",\n  \"grandma\",\n  \"grandmother\",\n  \"grandpa\",\n  \"grandson\",\n  \"grandstand\",\n  \"grape\",\n  \"grapefruit\",\n  \"grapes\",\n  \"grass\",\n  \"grasshopper\",\n  \"grateful\",\n  \"grave\",\n  \"gravel\",\n  \"graveyard\",\n  \"gravy\",\n  \"gray\",\n  \"graze\",\n  \"grease\",\n  \"great\",\n  \"green\",\n  \"greet\",\n  \"grew\",\n  \"grind\",\n  \"groan\",\n  \"grocery\",\n  \"ground\",\n  \"group\",\n  \"grove\",\n  \"grow\",\n  \"guard\",\n  \"guess\",\n  \"guest\",\n  \"guide\",\n  \"gulf\",\n  \"gum\",\n  \"gun\",\n  \"gunpowder\",\n  \"guy\",\n  \"ha\",\n  \"habit\",\n  \"had\",\n  \"hadn't\",\n  \"hail\",\n  \"hair\",\n  \"haircut\",\n  \"hairpin\",\n  \"half\",\n  \"hall\",\n  \"halt\",\n  \"ham\",\n  \"hammer\",\n  \"hand\",\n  \"handful\",\n  \"handkerchief\",\n  \"handle\",\n  \"handwriting\",\n  \"hang\",\n  \"happen\",\n  \"happily\",\n  \"happiness\",\n  \"happy\",\n  \"harbor\",\n  \"hard\",\n  \"hardly\",\n  \"hardship\",\n  \"hardware\",\n  \"hare\",\n  \"hark\",\n  \"harm\",\n  \"harness\",\n  \"harp\",\n  \"harvest\",\n  \"has\",\n  \"hasn't\",\n  \"haste\",\n  \"hasten\",\n  \"hasty\",\n  \"hat\",\n  \"hatch\",\n  \"hatchet\",\n  \"hate\",\n  \"haul\",\n  \"have\",\n  \"haven't\",\n  \"having\",\n  \"hawk\",\n  \"hay\",\n  \"hayfield\",\n  \"haystack\",\n  \"he\",\n  \"he'd\",\n  \"he'll\",\n  \"he's\",\n  \"head\",\n  \"headache\",\n  \"heal\",\n  \"health\",\n  \"healthy\",\n  \"heap\",\n  \"hear\",\n  \"heard\",\n  \"hearing\",\n  \"heart\",\n  \"heat\",\n  \"heater\",\n  \"heaven\",\n  \"heavy\",\n  \"heel\",\n  \"height\",\n  \"held\",\n  \"hell\",\n  \"hello\",\n  \"helmet\",\n  \"help\",\n  \"helper\",\n  \"helpful\",\n  \"hem\",\n  \"hen\",\n  \"henhouse\",\n  \"her\",\n  \"herd\",\n  \"here\",\n  \"here's\",\n  \"hero\",\n  \"hers\",\n  \"herself\",\n  \"hey\",\n  \"hickory\",\n  \"hid\",\n  \"hidden\",\n  \"hide\",\n  \"high\",\n  \"highway\",\n  \"hill\",\n  \"hillside\",\n  \"hilltop\",\n  \"hilly\",\n  \"him\",\n  \"himself\",\n  \"hind\",\n  \"hint\",\n  \"hip\",\n  \"hire\",\n  \"his\",\n  \"hiss\",\n  \"history\",\n  \"hit\",\n  \"hitch\",\n  \"hive\",\n  \"ho\",\n  \"hoe\",\n  \"hog\",\n  \"hold\",\n  \"holder\",\n  \"hole\",\n  \"holiday\",\n  \"hollow\",\n  \"holy\",\n  \"home\",\n  \"homely\",\n  \"homesick\",\n  \"honest\",\n  \"honey\",\n  \"honeybee\",\n  \"honeymoon\",\n  \"honk\",\n  \"honor\",\n  \"hood\",\n  \"hoof\",\n  \"hook\",\n  \"hoop\",\n  \"hop\",\n  \"hope\",\n  \"hopeful\",\n  \"hopeless\",\n  \"horn\",\n  \"horse\",\n  \"horseback\",\n  \"horseshoe\",\n  \"hose\",\n  \"hospital\",\n  \"host\",\n  \"hot\",\n  \"hotel\",\n  \"hound\",\n  \"hour\",\n  \"house\",\n  \"housetop\",\n  \"housewife\",\n  \"housework\",\n  \"how\",\n  \"however\",\n  \"howl\",\n  \"hug\",\n  \"huge\",\n  \"hum\",\n  \"humble\",\n  \"hump\",\n  \"hundred\",\n  \"hung\",\n  \"hunger\",\n  \"hungry\",\n  \"hunk\",\n  \"hunt\",\n  \"hunter\",\n  \"hurrah\",\n  \"hurried\",\n  \"hurry\",\n  \"hurt\",\n  \"husband\",\n  \"hush\",\n  \"hut\",\n  \"hymn\",\n  \"i\",\n  \"i'd\",\n  \"i'll\",\n  \"i'm\",\n  \"i've\",\n  \"ice\",\n  \"icy\",\n  \"idea\",\n  \"ideal\",\n  \"if\",\n  \"ill\",\n  \"important\",\n  \"impossible\",\n  \"improve\",\n  \"in\",\n  \"inch\",\n  \"inches\",\n  \"income\",\n  \"indeed\",\n  \"indian\",\n  \"indoors\",\n  \"ink\",\n  \"inn\",\n  \"insect\",\n  \"inside\",\n  \"instant\",\n  \"instead\",\n  \"insult\",\n  \"intend\",\n  \"interested\",\n  \"interesting\",\n  \"into\",\n  \"invite\",\n  \"iron\",\n  \"is\",\n  \"island\",\n  \"isn't\",\n  \"it\",\n  \"it's\",\n  \"its\",\n  \"itself\",\n  \"ivory\",\n  \"ivy\",\n  \"jacket\",\n  \"jacks\",\n  \"jail\",\n  \"jam\",\n  \"january\",\n  \"jar\",\n  \"jaw\",\n  \"jay\",\n  \"jelly\",\n  \"jellyfish\",\n  \"jerk\",\n  \"jig\",\n  \"job\",\n  \"jockey\",\n  \"join\",\n  \"joke\",\n  \"joking\",\n  \"jolly\",\n  \"journey\",\n  \"joy\",\n  \"joyful\",\n  \"joyous\",\n  \"judge\",\n  \"jug\",\n  \"juice\",\n  \"juicy\",\n  \"july\",\n  \"jump\",\n  \"june\",\n  \"junior\",\n  \"junk\",\n  \"just\",\n  \"keen\",\n  \"keep\",\n  \"kept\",\n  \"kettle\",\n  \"key\",\n  \"kick\",\n  \"kid\",\n  \"kill\",\n  \"killed\",\n  \"kind\",\n  \"kindly\",\n  \"kindness\",\n  \"king\",\n  \"kingdom\",\n  \"kiss\",\n  \"kitchen\",\n  \"kite\",\n  \"kitten\",\n  \"kitty\",\n  \"knee\",\n  \"kneel\",\n  \"knew\",\n  \"knife\",\n  \"knit\",\n  \"knives\",\n  \"knob\",\n  \"knock\",\n  \"knot\",\n  \"know\",\n  \"known\",\n  \"lace\",\n  \"lad\",\n  \"ladder\",\n  \"ladies\",\n  \"lady\",\n  \"laid\",\n  \"lake\",\n  \"lamb\",\n  \"lame\",\n  \"lamp\",\n  \"land\",\n  \"lane\",\n  \"language\",\n  \"lantern\",\n  \"lap\",\n  \"lard\",\n  \"large\",\n  \"lash\",\n  \"lass\",\n  \"last\",\n  \"late\",\n  \"laugh\",\n  \"laundry\",\n  \"law\",\n  \"lawn\",\n  \"lawyer\",\n  \"lay\",\n  \"lazy\",\n  \"lead\",\n  \"leader\",\n  \"leaf\",\n  \"leak\",\n  \"lean\",\n  \"leap\",\n  \"learn\",\n  \"learned\",\n  \"least\",\n  \"leather\",\n  \"leave\",\n  \"leaving\",\n  \"led\",\n  \"left\",\n  \"leg\",\n  \"lemon\",\n  \"lemonade\",\n  \"lend\",\n  \"length\",\n  \"less\",\n  \"lesson\",\n  \"let\",\n  \"let's\",\n  \"letter\",\n  \"letting\",\n  \"lettuce\",\n  \"level\",\n  \"liberty\",\n  \"library\",\n  \"lice\",\n  \"lick\",\n  \"lid\",\n  \"lie\",\n  \"life\",\n  \"lift\",\n  \"light\",\n  \"lightness\",\n  \"lightning\",\n  \"like\",\n  \"likely\",\n  \"liking\",\n  \"lily\",\n  \"limb\",\n  \"lime\",\n  \"limp\",\n  \"line\",\n  \"linen\",\n  \"lion\",\n  \"lip\",\n  \"list\",\n  \"listen\",\n  \"lit\",\n  \"little\",\n  \"live\",\n  \"lively\",\n  \"liver\",\n  \"lives\",\n  \"living\",\n  \"lizard\",\n  \"load\",\n  \"loaf\",\n  \"loan\",\n  \"loaves\",\n  \"lock\",\n  \"locomotive\",\n  \"log\",\n  \"lone\",\n  \"lonely\",\n  \"lonesome\",\n  \"long\",\n  \"look\",\n  \"lookout\",\n  \"loop\",\n  \"loose\",\n  \"lord\",\n  \"lose\",\n  \"loser\",\n  \"loss\",\n  \"lost\",\n  \"lot\",\n  \"loud\",\n  \"love\",\n  \"lovely\",\n  \"lover\",\n  \"low\",\n  \"luck\",\n  \"lucky\",\n  \"lumber\",\n  \"lump\",\n  \"lunch\",\n  \"lying\",\n  \"ma\",\n  \"machine\",\n  \"machinery\",\n  \"mad\",\n  \"made\",\n  \"magazine\",\n  \"magic\",\n  \"maid\",\n  \"mail\",\n  \"mailbox\",\n  \"mailman\",\n  \"major\",\n  \"make\",\n  \"making\",\n  \"male\",\n  \"mama\",\n  \"mamma\",\n  \"man\",\n  \"manager\",\n  \"mane\",\n  \"manger\",\n  \"many\",\n  \"map\",\n  \"maple\",\n  \"marble\",\n  \"march\",\n  \"mare\",\n  \"mark\",\n  \"market\",\n  \"marriage\",\n  \"married\",\n  \"marry\",\n  \"mask\",\n  \"mast\",\n  \"master\",\n  \"mat\",\n  \"match\",\n  \"matter\",\n  \"mattress\",\n  \"may\",\n  \"maybe\",\n  \"mayor\",\n  \"maypole\",\n  \"me\",\n  \"meadow\",\n  \"meal\",\n  \"mean\",\n  \"means\",\n  \"meant\",\n  \"measure\",\n  \"meat\",\n  \"medicine\",\n  \"meet\",\n  \"meeting\",\n  \"melt\",\n  \"member\",\n  \"men\",\n  \"mend\",\n  \"meow\",\n  \"merry\",\n  \"mess\",\n  \"message\",\n  \"met\",\n  \"metal\",\n  \"mew\",\n  \"mice\",\n  \"middle\",\n  \"midnight\",\n  \"might\",\n  \"mighty\",\n  \"mile\",\n  \"miler\",\n  \"milk\",\n  \"milkman\",\n  \"mill\",\n  \"million\",\n  \"mind\",\n  \"mine\",\n  \"miner\",\n  \"mint\",\n  \"minute\",\n  \"mirror\",\n  \"mischief\",\n  \"miss\",\n  \"misspell\",\n  \"mistake\",\n  \"misty\",\n  \"mitt\",\n  \"mitten\",\n  \"mix\",\n  \"moment\",\n  \"monday\",\n  \"money\",\n  \"monkey\",\n  \"month\",\n  \"moo\",\n  \"moon\",\n  \"moonlight\",\n  \"moose\",\n  \"mop\",\n  \"more\",\n  \"morning\",\n  \"morrow\",\n  \"moss\",\n  \"most\",\n  \"mostly\",\n  \"mother\",\n  \"motor\",\n  \"mount\",\n  \"mountain\",\n  \"mouse\",\n  \"mouth\",\n  \"move\",\n  \"movie\",\n  \"movies\",\n  \"moving\",\n  \"mow\",\n  \"mr.\",\n  \"mrs.\",\n  \"much\",\n  \"mud\",\n  \"muddy\",\n  \"mug\",\n  \"mule\",\n  \"multiply\",\n  \"murder\",\n  \"music\",\n  \"must\",\n  \"my\",\n  \"myself\",\n  \"nail\",\n  \"name\",\n  \"nap\",\n  \"napkin\",\n  \"narrow\",\n  \"nasty\",\n  \"naughty\",\n  \"navy\",\n  \"near\",\n  \"nearby\",\n  \"nearly\",\n  \"neat\",\n  \"neck\",\n  \"necktie\",\n  \"need\",\n  \"needle\",\n  \"needn't\",\n  \"negro\",\n  \"neighbor\",\n  \"neighborhood\",\n  \"neither\",\n  \"nerve\",\n  \"nest\",\n  \"net\",\n  \"never\",\n  \"nevermore\",\n  \"new\",\n  \"news\",\n  \"newspaper\",\n  \"next\",\n  \"nibble\",\n  \"nice\",\n  \"nickel\",\n  \"night\",\n  \"nightgown\",\n  \"nine\",\n  \"nineteen\",\n  \"ninety\",\n  \"no\",\n  \"nobody\",\n  \"nod\",\n  \"noise\",\n  \"noisy\",\n  \"none\",\n  \"noon\",\n  \"nor\",\n  \"north\",\n  \"northern\",\n  \"nose\",\n  \"not\",\n  \"note\",\n  \"nothing\",\n  \"notice\",\n  \"november\",\n  \"now\",\n  \"nowhere\",\n  \"number\",\n  \"nurse\",\n  \"nut\",\n  \"o'clock\",\n  \"oak\",\n  \"oar\",\n  \"oatmeal\",\n  \"oats\",\n  \"obey\",\n  \"ocean\",\n  \"october\",\n  \"odd\",\n  \"of\",\n  \"off\",\n  \"offer\",\n  \"office\",\n  \"officer\",\n  \"often\",\n  \"oh\",\n  \"oil\",\n  \"old\",\n  \"old-fashioned\",\n  \"on\",\n  \"once\",\n  \"one\",\n  \"onion\",\n  \"only\",\n  \"onward\",\n  \"open\",\n  \"or\",\n  \"orange\",\n  \"orchard\",\n  \"order\",\n  \"ore\",\n  \"organ\",\n  \"other\",\n  \"otherwise\",\n  \"ouch\",\n  \"ought\",\n  \"our\",\n  \"ours\",\n  \"ourselves\",\n  \"out\",\n  \"outdoors\",\n  \"outfit\",\n  \"outlaw\",\n  \"outline\",\n  \"outside\",\n  \"outward\",\n  \"oven\",\n  \"over\",\n  \"overalls\",\n  \"overcoat\",\n  \"overeat\",\n  \"overhead\",\n  \"overhear\",\n  \"overnight\",\n  \"overturn\",\n  \"owe\",\n  \"owing\",\n  \"owl\",\n  \"own\",\n  \"owner\",\n  \"ox\",\n  \"pa\",\n  \"pace\",\n  \"pack\",\n  \"package\",\n  \"pad\",\n  \"page\",\n  \"paid\",\n  \"pail\",\n  \"pain\",\n  \"painful\",\n  \"paint\",\n  \"painter\",\n  \"painting\",\n  \"pair\",\n  \"pal\",\n  \"palace\",\n  \"pale\",\n  \"pan\",\n  \"pancake\",\n  \"pane\",\n  \"pansy\",\n  \"pants\",\n  \"papa\",\n  \"paper\",\n  \"parade\",\n  \"pardon\",\n  \"parent\",\n  \"park\",\n  \"part\",\n  \"partly\",\n  \"partner\",\n  \"party\",\n  \"pass\",\n  \"passenger\",\n  \"past\",\n  \"paste\",\n  \"pasture\",\n  \"pat\",\n  \"patch\",\n  \"path\",\n  \"patter\",\n  \"pave\",\n  \"pavement\",\n  \"paw\",\n  \"pay\",\n  \"payment\",\n  \"pea\",\n  \"peace\",\n  \"peaceful\",\n  \"peach\",\n  \"peaches\",\n  \"peak\",\n  \"peanut\",\n  \"pear\",\n  \"pearl\",\n  \"peas\",\n  \"peck\",\n  \"peek\",\n  \"peel\",\n  \"peep\",\n  \"peg\",\n  \"pen\",\n  \"pencil\",\n  \"penny\",\n  \"people\",\n  \"pepper\",\n  \"peppermint\",\n  \"perfume\",\n  \"perhaps\",\n  \"person\",\n  \"pet\",\n  \"phone\",\n  \"piano\",\n  \"pick\",\n  \"pickle\",\n  \"picnic\",\n  \"picture\",\n  \"pie\",\n  \"piece\",\n  \"pig\",\n  \"pigeon\",\n  \"piggy\",\n  \"pile\",\n  \"pill\",\n  \"pillow\",\n  \"pin\",\n  \"pine\",\n  \"pineapple\",\n  \"pink\",\n  \"pint\",\n  \"pipe\",\n  \"pistol\",\n  \"pit\",\n  \"pitch\",\n  \"pitcher\",\n  \"pity\",\n  \"place\",\n  \"plain\",\n  \"plan\",\n  \"plane\",\n  \"plant\",\n  \"plate\",\n  \"platform\",\n  \"platter\",\n  \"play\",\n  \"player\",\n  \"playground\",\n  \"playhouse\",\n  \"playmate\",\n  \"plaything\",\n  \"pleasant\",\n  \"please\",\n  \"pleasure\",\n  \"plenty\",\n  \"plow\",\n  \"plug\",\n  \"plum\",\n  \"pocket\",\n  \"pocketbook\",\n  \"poem\",\n  \"point\",\n  \"poison\",\n  \"poke\",\n  \"pole\",\n  \"police\",\n  \"policeman\",\n  \"polish\",\n  \"polite\",\n  \"pond\",\n  \"ponies\",\n  \"pony\",\n  \"pool\",\n  \"poor\",\n  \"pop\",\n  \"popcorn\",\n  \"popped\",\n  \"porch\",\n  \"pork\",\n  \"possible\",\n  \"post\",\n  \"postage\",\n  \"postman\",\n  \"pot\",\n  \"potato\",\n  \"potatoes\",\n  \"pound\",\n  \"pour\",\n  \"powder\",\n  \"power\",\n  \"powerful\",\n  \"praise\",\n  \"pray\",\n  \"prayer\",\n  \"prepare\",\n  \"present\",\n  \"pretty\",\n  \"price\",\n  \"prick\",\n  \"prince\",\n  \"princess\",\n  \"print\",\n  \"prison\",\n  \"prize\",\n  \"promise\",\n  \"proper\",\n  \"protect\",\n  \"proud\",\n  \"prove\",\n  \"prune\",\n  \"public\",\n  \"puddle\",\n  \"puff\",\n  \"pull\",\n  \"pump\",\n  \"pumpkin\",\n  \"punch\",\n  \"punish\",\n  \"pup\",\n  \"pupil\",\n  \"puppy\",\n  \"pure\",\n  \"purple\",\n  \"purse\",\n  \"push\",\n  \"puss\",\n  \"pussy\",\n  \"pussycat\",\n  \"put\",\n  \"putting\",\n  \"puzzle\",\n  \"quack\",\n  \"quart\",\n  \"quarter\",\n  \"queen\",\n  \"queer\",\n  \"question\",\n  \"quick\",\n  \"quickly\",\n  \"quiet\",\n  \"quilt\",\n  \"quit\",\n  \"quite\",\n  \"rabbit\",\n  \"race\",\n  \"rack\",\n  \"radio\",\n  \"radish\",\n  \"rag\",\n  \"rail\",\n  \"railroad\",\n  \"railway\",\n  \"rain\",\n  \"rainbow\",\n  \"rainy\",\n  \"raise\",\n  \"raisin\",\n  \"rake\",\n  \"ram\",\n  \"ran\",\n  \"ranch\",\n  \"rang\",\n  \"rap\",\n  \"rapidly\",\n  \"rat\",\n  \"rate\",\n  \"rather\",\n  \"rattle\",\n  \"raw\",\n  \"ray\",\n  \"reach\",\n  \"read\",\n  \"reader\",\n  \"reading\",\n  \"ready\",\n  \"real\",\n  \"really\",\n  \"reap\",\n  \"rear\",\n  \"reason\",\n  \"rebuild\",\n  \"receive\",\n  \"recess\",\n  \"record\",\n  \"red\",\n  \"redbird\",\n  \"redbreast\",\n  \"refuse\",\n  \"reindeer\",\n  \"rejoice\",\n  \"remain\",\n  \"remember\",\n  \"remind\",\n  \"remove\",\n  \"rent\",\n  \"repair\",\n  \"repay\",\n  \"repeat\",\n  \"report\",\n  \"rest\",\n  \"return\",\n  \"review\",\n  \"reward\",\n  \"rib\",\n  \"ribbon\",\n  \"rice\",\n  \"rich\",\n  \"rid\",\n  \"riddle\",\n  \"ride\",\n  \"rider\",\n  \"riding\",\n  \"right\",\n  \"rim\",\n  \"ring\",\n  \"rip\",\n  \"ripe\",\n  \"rise\",\n  \"rising\",\n  \"river\",\n  \"road\",\n  \"roadside\",\n  \"roar\",\n  \"roast\",\n  \"rob\",\n  \"robber\",\n  \"robe\",\n  \"robin\",\n  \"rock\",\n  \"rocket\",\n  \"rocky\",\n  \"rode\",\n  \"roll\",\n  \"roller\",\n  \"roof\",\n  \"room\",\n  \"rooster\",\n  \"root\",\n  \"rope\",\n  \"rose\",\n  \"rosebud\",\n  \"rot\",\n  \"rotten\",\n  \"rough\",\n  \"round\",\n  \"route\",\n  \"row\",\n  \"rowboat\",\n  \"royal\",\n  \"rub\",\n  \"rubbed\",\n  \"rubber\",\n  \"rubbish\",\n  \"rug\",\n  \"rule\",\n  \"ruler\",\n  \"rumble\",\n  \"run\",\n  \"rung\",\n  \"runner\",\n  \"running\",\n  \"rush\",\n  \"rust\",\n  \"rusty\",\n  \"rye\",\n  \"sack\",\n  \"sad\",\n  \"saddle\",\n  \"sadness\",\n  \"safe\",\n  \"safety\",\n  \"said\",\n  \"sail\",\n  \"sailboat\",\n  \"sailor\",\n  \"saint\",\n  \"salad\",\n  \"sale\",\n  \"salt\",\n  \"same\",\n  \"sand\",\n  \"sandwich\",\n  \"sandy\",\n  \"sang\",\n  \"sank\",\n  \"sap\",\n  \"sash\",\n  \"sat\",\n  \"satin\",\n  \"satisfactory\",\n  \"saturday\",\n  \"sausage\",\n  \"savage\",\n  \"save\",\n  \"savings\",\n  \"saw\",\n  \"say\",\n  \"scab\",\n  \"scales\",\n  \"scare\",\n  \"scarf\",\n  \"school\",\n  \"schoolboy\",\n  \"schoolhouse\",\n  \"schoolmaster\",\n  \"schoolroom\",\n  \"scorch\",\n  \"score\",\n  \"scrap\",\n  \"scrape\",\n  \"scratch\",\n  \"scream\",\n  \"screen\",\n  \"screw\",\n  \"scrub\",\n  \"sea\",\n  \"seal\",\n  \"seam\",\n  \"search\",\n  \"season\",\n  \"seat\",\n  \"second\",\n  \"secret\",\n  \"see\",\n  \"seed\",\n  \"seeing\",\n  \"seek\",\n  \"seem\",\n  \"seen\",\n  \"seesaw\",\n  \"select\",\n  \"self\",\n  \"selfish\",\n  \"sell\",\n  \"send\",\n  \"sense\",\n  \"sent\",\n  \"sentence\",\n  \"separate\",\n  \"september\",\n  \"servant\",\n  \"serve\",\n  \"service\",\n  \"set\",\n  \"setting\",\n  \"settle\",\n  \"settlement\",\n  \"seven\",\n  \"seventeen\",\n  \"seventh\",\n  \"seventy\",\n  \"several\",\n  \"sew\",\n  \"shade\",\n  \"shadow\",\n  \"shady\",\n  \"shake\",\n  \"shaker\",\n  \"shaking\",\n  \"shall\",\n  \"shame\",\n  \"shan't\",\n  \"shape\",\n  \"share\",\n  \"sharp\",\n  \"shave\",\n  \"she\",\n  \"she'd\",\n  \"she'll\",\n  \"she's\",\n  \"shear\",\n  \"shears\",\n  \"shed\",\n  \"sheep\",\n  \"sheet\",\n  \"shelf\",\n  \"shell\",\n  \"shepherd\",\n  \"shine\",\n  \"shining\",\n  \"shiny\",\n  \"ship\",\n  \"shirt\",\n  \"shock\",\n  \"shoe\",\n  \"shoemaker\",\n  \"shone\",\n  \"shook\",\n  \"shoot\",\n  \"shop\",\n  \"shopping\",\n  \"shore\",\n  \"short\",\n  \"shot\",\n  \"should\",\n  \"shoulder\",\n  \"shouldn't\",\n  \"shout\",\n  \"shovel\",\n  \"show\",\n  \"shower\",\n  \"shut\",\n  \"shy\",\n  \"sick\",\n  \"sickness\",\n  \"side\",\n  \"sidewalk\",\n  \"sideways\",\n  \"sigh\",\n  \"sight\",\n  \"sign\",\n  \"silence\",\n  \"silent\",\n  \"silk\",\n  \"sill\",\n  \"silly\",\n  \"silver\",\n  \"simple\",\n  \"sin\",\n  \"since\",\n  \"sing\",\n  \"singer\",\n  \"single\",\n  \"sink\",\n  \"sip\",\n  \"sir\",\n  \"sis\",\n  \"sissy\",\n  \"sister\",\n  \"sit\",\n  \"sitting\",\n  \"six\",\n  \"sixteen\",\n  \"sixth\",\n  \"sixty\",\n  \"size\",\n  \"skate\",\n  \"skater\",\n  \"ski\",\n  \"skin\",\n  \"skip\",\n  \"skirt\",\n  \"sky\",\n  \"slam\",\n  \"slap\",\n  \"slate\",\n  \"slave\",\n  \"sled\",\n  \"sleep\",\n  \"sleepy\",\n  \"sleeve\",\n  \"sleigh\",\n  \"slept\",\n  \"slice\",\n  \"slid\",\n  \"slide\",\n  \"sling\",\n  \"slip\",\n  \"slipped\",\n  \"slipper\",\n  \"slippery\",\n  \"slit\",\n  \"slow\",\n  \"slowly\",\n  \"sly\",\n  \"smack\",\n  \"small\",\n  \"smart\",\n  \"smell\",\n  \"smile\",\n  \"smoke\",\n  \"smooth\",\n  \"snail\",\n  \"snake\",\n  \"snap\",\n  \"snapping\",\n  \"sneeze\",\n  \"snow\",\n  \"snowball\",\n  \"snowflake\",\n  \"snowy\",\n  \"snuff\",\n  \"snug\",\n  \"so\",\n  \"soak\",\n  \"soap\",\n  \"sob\",\n  \"socks\",\n  \"sod\",\n  \"soda\",\n  \"sofa\",\n  \"soft\",\n  \"soil\",\n  \"sold\",\n  \"soldier\",\n  \"sole\",\n  \"some\",\n  \"somebody\",\n  \"somehow\",\n  \"someone\",\n  \"something\",\n  \"sometime\",\n  \"sometimes\",\n  \"somewhere\",\n  \"son\",\n  \"song\",\n  \"soon\",\n  \"sore\",\n  \"sorrow\",\n  \"sorry\",\n  \"sort\",\n  \"soul\",\n  \"sound\",\n  \"soup\",\n  \"sour\",\n  \"south\",\n  \"southern\",\n  \"space\",\n  \"spade\",\n  \"spank\",\n  \"sparrow\",\n  \"speak\",\n  \"speaker\",\n  \"spear\",\n  \"speech\",\n  \"speed\",\n  \"spell\",\n  \"spelling\",\n  \"spend\",\n  \"spent\",\n  \"spider\",\n  \"spike\",\n  \"spill\",\n  \"spin\",\n  \"spinach\",\n  \"spirit\",\n  \"spit\",\n  \"splash\",\n  \"spoil\",\n  \"spoke\",\n  \"spook\",\n  \"spoon\",\n  \"sport\",\n  \"spot\",\n  \"spread\",\n  \"spring\",\n  \"springtime\",\n  \"sprinkle\",\n  \"square\",\n  \"squash\",\n  \"squeak\",\n  \"squeeze\",\n  \"squirrel\",\n  \"stable\",\n  \"stack\",\n  \"stage\",\n  \"stair\",\n  \"stall\",\n  \"stamp\",\n  \"stand\",\n  \"star\",\n  \"stare\",\n  \"start\",\n  \"starve\",\n  \"state\",\n  \"states\",\n  \"station\",\n  \"stay\",\n  \"steak\",\n  \"steal\",\n  \"steam\",\n  \"steamboat\",\n  \"steamer\",\n  \"steel\",\n  \"steep\",\n  \"steeple\",\n  \"steer\",\n  \"stem\",\n  \"step\",\n  \"stepping\",\n  \"stick\",\n  \"sticky\",\n  \"stiff\",\n  \"still\",\n  \"stillness\",\n  \"sting\",\n  \"stir\",\n  \"stitch\",\n  \"stock\",\n  \"stocking\",\n  \"stole\",\n  \"stone\",\n  \"stood\",\n  \"stool\",\n  \"stoop\",\n  \"stop\",\n  \"stopped\",\n  \"stopping\",\n  \"store\",\n  \"stories\",\n  \"stork\",\n  \"storm\",\n  \"stormy\",\n  \"story\",\n  \"stove\",\n  \"straight\",\n  \"strange\",\n  \"stranger\",\n  \"strap\",\n  \"straw\",\n  \"strawberry\",\n  \"stream\",\n  \"street\",\n  \"stretch\",\n  \"string\",\n  \"strip\",\n  \"stripes\",\n  \"strong\",\n  \"stuck\",\n  \"study\",\n  \"stuff\",\n  \"stump\",\n  \"stung\",\n  \"subject\",\n  \"such\",\n  \"suck\",\n  \"sudden\",\n  \"suffer\",\n  \"sugar\",\n  \"suit\",\n  \"sum\",\n  \"summer\",\n  \"sun\",\n  \"sunday\",\n  \"sunflower\",\n  \"sung\",\n  \"sunk\",\n  \"sunlight\",\n  \"sunny\",\n  \"sunrise\",\n  \"sunset\",\n  \"sunshine\",\n  \"supper\",\n  \"suppose\",\n  \"sure\",\n  \"surely\",\n  \"surface\",\n  \"surprise\",\n  \"swallow\",\n  \"swam\",\n  \"swamp\",\n  \"swan\",\n  \"swat\",\n  \"swear\",\n  \"sweat\",\n  \"sweater\",\n  \"sweep\",\n  \"sweet\",\n  \"sweetheart\",\n  \"sweetness\",\n  \"swell\",\n  \"swept\",\n  \"swift\",\n  \"swim\",\n  \"swimming\",\n  \"swing\",\n  \"switch\",\n  \"sword\",\n  \"swore\",\n  \"table\",\n  \"tablecloth\",\n  \"tablespoon\",\n  \"tablet\",\n  \"tack\",\n  \"tag\",\n  \"tail\",\n  \"tailor\",\n  \"take\",\n  \"taken\",\n  \"taking\",\n  \"tale\",\n  \"talk\",\n  \"talker\",\n  \"tall\",\n  \"tame\",\n  \"tan\",\n  \"tank\",\n  \"tap\",\n  \"tape\",\n  \"tar\",\n  \"tardy\",\n  \"task\",\n  \"taste\",\n  \"taught\",\n  \"tax\",\n  \"tea\",\n  \"teach\",\n  \"teacher\",\n  \"team\",\n  \"tear\",\n  \"tease\",\n  \"teaspoon\",\n  \"teeth\",\n  \"telephone\",\n  \"tell\",\n  \"temper\",\n  \"ten\",\n  \"tennis\",\n  \"tent\",\n  \"term\",\n  \"terrible\",\n  \"test\",\n  \"than\",\n  \"thank\",\n  \"thankful\",\n  \"thanks\",\n  \"thanksgiving\",\n  \"that\",\n  \"that's\",\n  \"the\",\n  \"theater\",\n  \"thee\",\n  \"their\",\n  \"them\",\n  \"then\",\n  \"there\",\n  \"these\",\n  \"they\",\n  \"they'd\",\n  \"they'll\",\n  \"they're\",\n  \"they've\",\n  \"thick\",\n  \"thief\",\n  \"thimble\",\n  \"thin\",\n  \"thing\",\n  \"think\",\n  \"third\",\n  \"thirsty\",\n  \"thirteen\",\n  \"thirty\",\n  \"this\",\n  \"thorn\",\n  \"those\",\n  \"though\",\n  \"thought\",\n  \"thousand\",\n  \"thread\",\n  \"three\",\n  \"threw\",\n  \"throat\",\n  \"throne\",\n  \"through\",\n  \"throw\",\n  \"thrown\",\n  \"thumb\",\n  \"thunder\",\n  \"thursday\",\n  \"thy\",\n  \"tick\",\n  \"ticket\",\n  \"tickle\",\n  \"tie\",\n  \"tiger\",\n  \"tight\",\n  \"till\",\n  \"time\",\n  \"tin\",\n  \"tinkle\",\n  \"tiny\",\n  \"tip\",\n  \"tiptoe\",\n  \"tire\",\n  \"tired\",\n  \"title\",\n  \"to\",\n  \"toad\",\n  \"toadstool\",\n  \"toast\",\n  \"tobacco\",\n  \"today\",\n  \"toe\",\n  \"together\",\n  \"toilet\",\n  \"told\",\n  \"tomato\",\n  \"tomorrow\",\n  \"ton\",\n  \"tone\",\n  \"tongue\",\n  \"tonight\",\n  \"too\",\n  \"took\",\n  \"tool\",\n  \"toot\",\n  \"tooth\",\n  \"toothbrush\",\n  \"toothpick\",\n  \"top\",\n  \"tore\",\n  \"torn\",\n  \"toss\",\n  \"touch\",\n  \"tow\",\n  \"toward\",\n  \"towards\",\n  \"towel\",\n  \"tower\",\n  \"town\",\n  \"toy\",\n  \"trace\",\n  \"track\",\n  \"trade\",\n  \"train\",\n  \"tramp\",\n  \"trap\",\n  \"tray\",\n  \"treasure\",\n  \"treat\",\n  \"tree\",\n  \"trick\",\n  \"tricycle\",\n  \"tried\",\n  \"trim\",\n  \"trip\",\n  \"trolley\",\n  \"trouble\",\n  \"truck\",\n  \"true\",\n  \"truly\",\n  \"trunk\",\n  \"trust\",\n  \"truth\",\n  \"try\",\n  \"tub\",\n  \"tuesday\",\n  \"tug\",\n  \"tulip\",\n  \"tumble\",\n  \"tune\",\n  \"tunnel\",\n  \"turkey\",\n  \"turn\",\n  \"turtle\",\n  \"twelve\",\n  \"twenty\",\n  \"twice\",\n  \"twig\",\n  \"twin\",\n  \"two\",\n  \"ugly\",\n  \"umbrella\",\n  \"uncle\",\n  \"under\",\n  \"understand\",\n  \"underwear\",\n  \"undress\",\n  \"unfair\",\n  \"unfinished\",\n  \"unfold\",\n  \"unfriendly\",\n  \"unhappy\",\n  \"unhurt\",\n  \"uniform\",\n  \"united\",\n  \"unkind\",\n  \"unknown\",\n  \"unless\",\n  \"unpleasant\",\n  \"until\",\n  \"unwilling\",\n  \"up\",\n  \"upon\",\n  \"upper\",\n  \"upset\",\n  \"upside\",\n  \"upstairs\",\n  \"uptown\",\n  \"upward\",\n  \"us\",\n  \"use\",\n  \"used\",\n  \"useful\",\n  \"valentine\",\n  \"valley\",\n  \"valuable\",\n  \"value\",\n  \"vase\",\n  \"vegetable\",\n  \"velvet\",\n  \"very\",\n  \"vessel\",\n  \"victory\",\n  \"view\",\n  \"village\",\n  \"vine\",\n  \"violet\",\n  \"visit\",\n  \"visitor\",\n  \"voice\",\n  \"vote\",\n  \"wag\",\n  \"wagon\",\n  \"waist\",\n  \"wait\",\n  \"wake\",\n  \"waken\",\n  \"walk\",\n  \"wall\",\n  \"walnut\",\n  \"want\",\n  \"war\",\n  \"warm\",\n  \"warn\",\n  \"was\",\n  \"wash\",\n  \"washer\",\n  \"washtub\",\n  \"wasn't\",\n  \"waste\",\n  \"watch\",\n  \"watchman\",\n  \"water\",\n  \"watermelon\",\n  \"waterproof\",\n  \"wave\",\n  \"wax\",\n  \"way\",\n  \"wayside\",\n  \"we\",\n  \"we'd\",\n  \"we'll\",\n  \"we're\",\n  \"we've\",\n  \"weak\",\n  \"weaken\",\n  \"weakness\",\n  \"wealth\",\n  \"weapon\",\n  \"wear\",\n  \"weary\",\n  \"weather\",\n  \"weave\",\n  \"web\",\n  \"wedding\",\n  \"wednesday\",\n  \"wee\",\n  \"weed\",\n  \"week\",\n  \"weep\",\n  \"weigh\",\n  \"welcome\",\n  \"well\",\n  \"went\",\n  \"were\",\n  \"west\",\n  \"western\",\n  \"wet\",\n  \"whale\",\n  \"what\",\n  \"what's\",\n  \"wheat\",\n  \"wheel\",\n  \"when\",\n  \"whenever\",\n  \"where\",\n  \"which\",\n  \"while\",\n  \"whip\",\n  \"whipped\",\n  \"whirl\",\n  \"whiskey\",\n  \"whisky\",\n  \"whisper\",\n  \"whistle\",\n  \"white\",\n  \"who\",\n  \"who'd\",\n  \"who'll\",\n  \"who's\",\n  \"whole\",\n  \"whom\",\n  \"whose\",\n  \"why\",\n  \"wicked\",\n  \"wide\",\n  \"wife\",\n  \"wiggle\",\n  \"wild\",\n  \"wildcat\",\n  \"will\",\n  \"willing\",\n  \"willow\",\n  \"win\",\n  \"wind\",\n  \"windmill\",\n  \"window\",\n  \"windy\",\n  \"wine\",\n  \"wing\",\n  \"wink\",\n  \"winner\",\n  \"winter\",\n  \"wipe\",\n  \"wire\",\n  \"wise\",\n  \"wish\",\n  \"wit\",\n  \"witch\",\n  \"with\",\n  \"without\",\n  \"woke\",\n  \"wolf\",\n  \"woman\",\n  \"women\",\n  \"won\",\n  \"won't\",\n  \"wonder\",\n  \"wonderful\",\n  \"wood\",\n  \"wooden\",\n  \"woodpecker\",\n  \"woods\",\n  \"wool\",\n  \"woolen\",\n  \"word\",\n  \"wore\",\n  \"work\",\n  \"worker\",\n  \"workman\",\n  \"world\",\n  \"worm\",\n  \"worn\",\n  \"worry\",\n  \"worse\",\n  \"worst\",\n  \"worth\",\n  \"would\",\n  \"wouldn't\",\n  \"wound\",\n  \"wove\",\n  \"wrap\",\n  \"wrapped\",\n  \"wreck\",\n  \"wren\",\n  \"wring\",\n  \"write\",\n  \"writing\",\n  \"written\",\n  \"wrong\",\n  \"wrote\",\n  \"wrung\",\n  \"yard\",\n  \"yarn\",\n  \"year\",\n  \"yell\",\n  \"yellow\",\n  \"yes\",\n  \"yesterday\",\n  \"yet\",\n  \"yolk\",\n  \"yonder\",\n  \"you\",\n  \"you'd\",\n  \"you'll\",\n  \"you're\",\n  \"you've\",\n  \"young\",\n  \"youngster\",\n  \"your\",\n  \"yours\",\n  \"yourself\",\n  \"yourselves\",\n  \"youth\"\n]\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","'use strict';\n\nmodule.exports = flesch;\n\nvar SENTENCE_WEIGHT = 1.015;\nvar WORD_WEIGHT = 84.6;\nvar BASE = 206.835;\n\nfunction flesch(counts) {\n  if (!counts || !counts.sentence || !counts.word || !counts.syllable) {\n    return NaN;\n  }\n\n  return BASE -\n    (SENTENCE_WEIGHT * (counts.word / counts.sentence)) -\n    (WORD_WEIGHT * (counts.syllable / counts.word));\n}\n","'use strict';\n\nmodule.exports = gunningFog;\n\nvar COMPLEX_WORD_WEIGHT = 100;\nvar WEIGHT = 0.4;\n\nfunction gunningFog(counts) {\n  if (!counts || !counts.sentence || !counts.word) {\n    return NaN;\n  }\n\n  return WEIGHT * (\n    (counts.word / counts.sentence) +\n    (\n      COMPLEX_WORD_WEIGHT *\n      ((counts.complexPolysillabicWord || 0) /\n      counts.word))\n  );\n}\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","'use strict';\nvar toString = Object.prototype.toString;\n\nmodule.exports = function (x) {\n\tvar prototype;\n\treturn toString.call(x) === '[object Object]' && (prototype = Object.getPrototypeOf(x), prototype === null || prototype === Object.getPrototypeOf({}));\n};\n","'use strict';\n\nmodule.exports = nlcstToString;\n\n/* Stringify a NLCST node or list of nodes. */\nfunction nlcstToString(node, separator) {\n  var sep = separator || '';\n  var values;\n  var length;\n  var children;\n\n  if (!node || (!('length' in node) && !node.type)) {\n    throw new Error('Expected node, not `' + node + '`');\n  }\n\n  if (typeof node.value === 'string') {\n    return node.value;\n  }\n\n  children = 'length' in node ? node : node.children;\n  length = children.length;\n\n  /* Shortcut: This is pretty common, and a small performance win. */\n  if (length === 1 && 'value' in children[0]) {\n    return children[0].value;\n  }\n\n  values = [];\n\n  while (length--) {\n    values[length] = nlcstToString(children[length], sep);\n  }\n\n  return values.join(sep);\n}\n","module.exports={\"105\":\"i\",\"192\":\"A\",\"193\":\"A\",\"194\":\"A\",\"195\":\"A\",\"196\":\"A\",\"197\":\"A\",\"199\":\"C\",\"200\":\"E\",\"201\":\"E\",\"202\":\"E\",\"203\":\"E\",\"204\":\"I\",\"205\":\"I\",\"206\":\"I\",\"207\":\"I\",\"209\":\"N\",\"210\":\"O\",\"211\":\"O\",\"212\":\"O\",\"213\":\"O\",\"214\":\"O\",\"216\":\"O\",\"217\":\"U\",\"218\":\"U\",\"219\":\"U\",\"220\":\"U\",\"221\":\"Y\",\"224\":\"a\",\"225\":\"a\",\"226\":\"a\",\"227\":\"a\",\"228\":\"a\",\"229\":\"a\",\"231\":\"c\",\"232\":\"e\",\"233\":\"e\",\"234\":\"e\",\"235\":\"e\",\"236\":\"i\",\"237\":\"i\",\"238\":\"i\",\"239\":\"i\",\"241\":\"n\",\"242\":\"o\",\"243\":\"o\",\"244\":\"o\",\"245\":\"o\",\"246\":\"o\",\"248\":\"o\",\"249\":\"u\",\"250\":\"u\",\"251\":\"u\",\"252\":\"u\",\"253\":\"y\",\"255\":\"y\",\"256\":\"A\",\"257\":\"a\",\"258\":\"A\",\"259\":\"a\",\"260\":\"A\",\"261\":\"a\",\"262\":\"C\",\"263\":\"c\",\"264\":\"C\",\"265\":\"c\",\"266\":\"C\",\"267\":\"c\",\"268\":\"C\",\"269\":\"c\",\"270\":\"D\",\"271\":\"d\",\"272\":\"D\",\"273\":\"d\",\"274\":\"E\",\"275\":\"e\",\"276\":\"E\",\"277\":\"e\",\"278\":\"E\",\"279\":\"e\",\"280\":\"E\",\"281\":\"e\",\"282\":\"E\",\"283\":\"e\",\"284\":\"G\",\"285\":\"g\",\"286\":\"G\",\"287\":\"g\",\"288\":\"G\",\"289\":\"g\",\"290\":\"G\",\"291\":\"g\",\"292\":\"H\",\"293\":\"h\",\"294\":\"H\",\"295\":\"h\",\"296\":\"I\",\"297\":\"i\",\"298\":\"I\",\"299\":\"i\",\"300\":\"I\",\"301\":\"i\",\"302\":\"I\",\"303\":\"i\",\"304\":\"I\",\"308\":\"J\",\"309\":\"j\",\"310\":\"K\",\"311\":\"k\",\"313\":\"L\",\"314\":\"l\",\"315\":\"L\",\"316\":\"l\",\"317\":\"L\",\"318\":\"l\",\"319\":\"L\",\"320\":\"l\",\"321\":\"L\",\"322\":\"l\",\"323\":\"N\",\"324\":\"n\",\"325\":\"N\",\"326\":\"n\",\"327\":\"N\",\"328\":\"n\",\"332\":\"O\",\"333\":\"o\",\"334\":\"O\",\"335\":\"o\",\"336\":\"O\",\"337\":\"o\",\"338\":\"O\",\"339\":\"o\",\"340\":\"R\",\"341\":\"r\",\"342\":\"R\",\"343\":\"r\",\"344\":\"R\",\"345\":\"r\",\"346\":\"S\",\"347\":\"s\",\"348\":\"S\",\"349\":\"s\",\"350\":\"S\",\"351\":\"s\",\"352\":\"S\",\"353\":\"s\",\"354\":\"T\",\"355\":\"t\",\"356\":\"T\",\"357\":\"t\",\"358\":\"T\",\"359\":\"t\",\"360\":\"U\",\"361\":\"u\",\"362\":\"U\",\"363\":\"u\",\"364\":\"U\",\"365\":\"u\",\"366\":\"U\",\"367\":\"u\",\"368\":\"U\",\"369\":\"u\",\"370\":\"U\",\"371\":\"u\",\"372\":\"W\",\"373\":\"w\",\"374\":\"Y\",\"375\":\"y\",\"376\":\"Y\",\"377\":\"Z\",\"378\":\"z\",\"379\":\"Z\",\"380\":\"z\",\"381\":\"Z\",\"382\":\"z\",\"384\":\"b\",\"385\":\"B\",\"386\":\"B\",\"387\":\"b\",\"390\":\"O\",\"391\":\"C\",\"392\":\"c\",\"393\":\"D\",\"394\":\"D\",\"395\":\"D\",\"396\":\"d\",\"398\":\"E\",\"400\":\"E\",\"401\":\"F\",\"402\":\"f\",\"403\":\"G\",\"407\":\"I\",\"408\":\"K\",\"409\":\"k\",\"410\":\"l\",\"412\":\"M\",\"413\":\"N\",\"414\":\"n\",\"415\":\"O\",\"416\":\"O\",\"417\":\"o\",\"420\":\"P\",\"421\":\"p\",\"422\":\"R\",\"427\":\"t\",\"428\":\"T\",\"429\":\"t\",\"430\":\"T\",\"431\":\"U\",\"432\":\"u\",\"434\":\"V\",\"435\":\"Y\",\"436\":\"y\",\"437\":\"Z\",\"438\":\"z\",\"461\":\"A\",\"462\":\"a\",\"463\":\"I\",\"464\":\"i\",\"465\":\"O\",\"466\":\"o\",\"467\":\"U\",\"468\":\"u\",\"477\":\"e\",\"484\":\"G\",\"485\":\"g\",\"486\":\"G\",\"487\":\"g\",\"488\":\"K\",\"489\":\"k\",\"490\":\"O\",\"491\":\"o\",\"500\":\"G\",\"501\":\"g\",\"504\":\"N\",\"505\":\"n\",\"512\":\"A\",\"513\":\"a\",\"514\":\"A\",\"515\":\"a\",\"516\":\"E\",\"517\":\"e\",\"518\":\"E\",\"519\":\"e\",\"520\":\"I\",\"521\":\"i\",\"522\":\"I\",\"523\":\"i\",\"524\":\"O\",\"525\":\"o\",\"526\":\"O\",\"527\":\"o\",\"528\":\"R\",\"529\":\"r\",\"530\":\"R\",\"531\":\"r\",\"532\":\"U\",\"533\":\"u\",\"534\":\"U\",\"535\":\"u\",\"536\":\"S\",\"537\":\"s\",\"538\":\"T\",\"539\":\"t\",\"542\":\"H\",\"543\":\"h\",\"544\":\"N\",\"545\":\"d\",\"548\":\"Z\",\"549\":\"z\",\"550\":\"A\",\"551\":\"a\",\"552\":\"E\",\"553\":\"e\",\"558\":\"O\",\"559\":\"o\",\"562\":\"Y\",\"563\":\"y\",\"564\":\"l\",\"565\":\"n\",\"566\":\"t\",\"567\":\"j\",\"570\":\"A\",\"571\":\"C\",\"572\":\"c\",\"573\":\"L\",\"574\":\"T\",\"575\":\"s\",\"576\":\"z\",\"579\":\"B\",\"580\":\"U\",\"581\":\"V\",\"582\":\"E\",\"583\":\"e\",\"584\":\"J\",\"585\":\"j\",\"586\":\"Q\",\"587\":\"q\",\"588\":\"R\",\"589\":\"r\",\"590\":\"Y\",\"591\":\"y\",\"592\":\"a\",\"593\":\"a\",\"595\":\"b\",\"596\":\"o\",\"597\":\"c\",\"598\":\"d\",\"599\":\"d\",\"600\":\"e\",\"603\":\"e\",\"604\":\"e\",\"605\":\"e\",\"606\":\"e\",\"607\":\"j\",\"608\":\"g\",\"609\":\"g\",\"610\":\"g\",\"613\":\"h\",\"614\":\"h\",\"616\":\"i\",\"618\":\"i\",\"619\":\"l\",\"620\":\"l\",\"621\":\"l\",\"623\":\"m\",\"624\":\"m\",\"625\":\"m\",\"626\":\"n\",\"627\":\"n\",\"628\":\"n\",\"629\":\"o\",\"633\":\"r\",\"634\":\"r\",\"635\":\"r\",\"636\":\"r\",\"637\":\"r\",\"638\":\"r\",\"639\":\"r\",\"640\":\"r\",\"641\":\"r\",\"642\":\"s\",\"647\":\"t\",\"648\":\"t\",\"649\":\"u\",\"651\":\"v\",\"652\":\"v\",\"653\":\"w\",\"654\":\"y\",\"655\":\"y\",\"656\":\"z\",\"657\":\"z\",\"663\":\"c\",\"665\":\"b\",\"666\":\"e\",\"667\":\"g\",\"668\":\"h\",\"669\":\"j\",\"670\":\"k\",\"671\":\"l\",\"672\":\"q\",\"686\":\"h\",\"688\":\"h\",\"690\":\"j\",\"691\":\"r\",\"692\":\"r\",\"694\":\"r\",\"695\":\"w\",\"696\":\"y\",\"737\":\"l\",\"738\":\"s\",\"739\":\"x\",\"780\":\"v\",\"829\":\"x\",\"851\":\"x\",\"867\":\"a\",\"868\":\"e\",\"869\":\"i\",\"870\":\"o\",\"871\":\"u\",\"872\":\"c\",\"873\":\"d\",\"874\":\"h\",\"875\":\"m\",\"876\":\"r\",\"877\":\"t\",\"878\":\"v\",\"879\":\"x\",\"7424\":\"a\",\"7427\":\"b\",\"7428\":\"c\",\"7429\":\"d\",\"7431\":\"e\",\"7432\":\"e\",\"7433\":\"i\",\"7434\":\"j\",\"7435\":\"k\",\"7436\":\"l\",\"7437\":\"m\",\"7438\":\"n\",\"7439\":\"o\",\"7440\":\"o\",\"7441\":\"o\",\"7442\":\"o\",\"7443\":\"o\",\"7446\":\"o\",\"7447\":\"o\",\"7448\":\"p\",\"7449\":\"r\",\"7450\":\"r\",\"7451\":\"t\",\"7452\":\"u\",\"7453\":\"u\",\"7454\":\"u\",\"7455\":\"m\",\"7456\":\"v\",\"7457\":\"w\",\"7458\":\"z\",\"7522\":\"i\",\"7523\":\"r\",\"7524\":\"u\",\"7525\":\"v\",\"7680\":\"A\",\"7681\":\"a\",\"7682\":\"B\",\"7683\":\"b\",\"7684\":\"B\",\"7685\":\"b\",\"7686\":\"B\",\"7687\":\"b\",\"7690\":\"D\",\"7691\":\"d\",\"7692\":\"D\",\"7693\":\"d\",\"7694\":\"D\",\"7695\":\"d\",\"7696\":\"D\",\"7697\":\"d\",\"7698\":\"D\",\"7699\":\"d\",\"7704\":\"E\",\"7705\":\"e\",\"7706\":\"E\",\"7707\":\"e\",\"7710\":\"F\",\"7711\":\"f\",\"7712\":\"G\",\"7713\":\"g\",\"7714\":\"H\",\"7715\":\"h\",\"7716\":\"H\",\"7717\":\"h\",\"7718\":\"H\",\"7719\":\"h\",\"7720\":\"H\",\"7721\":\"h\",\"7722\":\"H\",\"7723\":\"h\",\"7724\":\"I\",\"7725\":\"i\",\"7728\":\"K\",\"7729\":\"k\",\"7730\":\"K\",\"7731\":\"k\",\"7732\":\"K\",\"7733\":\"k\",\"7734\":\"L\",\"7735\":\"l\",\"7738\":\"L\",\"7739\":\"l\",\"7740\":\"L\",\"7741\":\"l\",\"7742\":\"M\",\"7743\":\"m\",\"7744\":\"M\",\"7745\":\"m\",\"7746\":\"M\",\"7747\":\"m\",\"7748\":\"N\",\"7749\":\"n\",\"7750\":\"N\",\"7751\":\"n\",\"7752\":\"N\",\"7753\":\"n\",\"7754\":\"N\",\"7755\":\"n\",\"7764\":\"P\",\"7765\":\"p\",\"7766\":\"P\",\"7767\":\"p\",\"7768\":\"R\",\"7769\":\"r\",\"7770\":\"R\",\"7771\":\"r\",\"7774\":\"R\",\"7775\":\"r\",\"7776\":\"S\",\"7777\":\"s\",\"7778\":\"S\",\"7779\":\"s\",\"7786\":\"T\",\"7787\":\"t\",\"7788\":\"T\",\"7789\":\"t\",\"7790\":\"T\",\"7791\":\"t\",\"7792\":\"T\",\"7793\":\"t\",\"7794\":\"U\",\"7795\":\"u\",\"7796\":\"U\",\"7797\":\"u\",\"7798\":\"U\",\"7799\":\"u\",\"7804\":\"V\",\"7805\":\"v\",\"7806\":\"V\",\"7807\":\"v\",\"7808\":\"W\",\"7809\":\"w\",\"7810\":\"W\",\"7811\":\"w\",\"7812\":\"W\",\"7813\":\"w\",\"7814\":\"W\",\"7815\":\"w\",\"7816\":\"W\",\"7817\":\"w\",\"7818\":\"X\",\"7819\":\"x\",\"7820\":\"X\",\"7821\":\"x\",\"7822\":\"Y\",\"7823\":\"y\",\"7824\":\"Z\",\"7825\":\"z\",\"7826\":\"Z\",\"7827\":\"z\",\"7828\":\"Z\",\"7829\":\"z\",\"7835\":\"s\",\"7840\":\"A\",\"7841\":\"a\",\"7842\":\"A\",\"7843\":\"a\",\"7864\":\"E\",\"7865\":\"e\",\"7866\":\"E\",\"7867\":\"e\",\"7868\":\"E\",\"7869\":\"e\",\"7880\":\"I\",\"7881\":\"i\",\"7882\":\"I\",\"7883\":\"i\",\"7884\":\"O\",\"7885\":\"o\",\"7886\":\"O\",\"7887\":\"o\",\"7908\":\"U\",\"7909\":\"u\",\"7910\":\"U\",\"7911\":\"u\",\"7922\":\"Y\",\"7923\":\"y\",\"7924\":\"Y\",\"7925\":\"y\",\"7926\":\"Y\",\"7927\":\"y\",\"7928\":\"Y\",\"7929\":\"y\",\"8305\":\"i\",\"8341\":\"h\",\"8342\":\"k\",\"8343\":\"l\",\"8344\":\"m\",\"8345\":\"n\",\"8346\":\"p\",\"8347\":\"s\",\"8348\":\"t\",\"8450\":\"c\",\"8458\":\"g\",\"8459\":\"h\",\"8460\":\"h\",\"8461\":\"h\",\"8464\":\"i\",\"8465\":\"i\",\"8466\":\"l\",\"8467\":\"l\",\"8468\":\"l\",\"8469\":\"n\",\"8472\":\"p\",\"8473\":\"p\",\"8474\":\"q\",\"8475\":\"r\",\"8476\":\"r\",\"8477\":\"r\",\"8484\":\"z\",\"8488\":\"z\",\"8492\":\"b\",\"8493\":\"c\",\"8495\":\"e\",\"8496\":\"e\",\"8497\":\"f\",\"8498\":\"F\",\"8499\":\"m\",\"8500\":\"o\",\"8506\":\"q\",\"8513\":\"g\",\"8514\":\"l\",\"8515\":\"l\",\"8516\":\"y\",\"8517\":\"d\",\"8518\":\"d\",\"8519\":\"e\",\"8520\":\"i\",\"8521\":\"j\",\"8526\":\"f\",\"8579\":\"C\",\"8580\":\"c\",\"8765\":\"s\",\"8766\":\"s\",\"8959\":\"z\",\"8999\":\"x\",\"9746\":\"x\",\"9776\":\"i\",\"9866\":\"i\",\"10005\":\"x\",\"10006\":\"x\",\"10007\":\"x\",\"10008\":\"x\",\"10625\":\"z\",\"10626\":\"z\",\"11362\":\"L\",\"11364\":\"R\",\"11365\":\"a\",\"11366\":\"t\",\"11373\":\"A\",\"11374\":\"M\",\"11375\":\"A\",\"11390\":\"S\",\"11391\":\"Z\",\"19904\":\"i\",\"42893\":\"H\",\"42922\":\"H\",\"42923\":\"E\",\"42924\":\"G\",\"42925\":\"L\",\"42928\":\"K\",\"42929\":\"T\",\"62937\":\"x\"}","(function(global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(function() {\n      return factory(global, global.document);\n    });\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = factory(global, global.document);\n  } else {\n      global.normalize = factory(global, global.document);\n  }\n} (typeof window !== 'undefined' ? window : this, function (window, document) {\n  var charmap = require('./charmap');\n  var regex = null;\n  var current_charmap;\n  var old_charmap;\n\n  function normalize(str, custom_charmap) {\n    old_charmap = current_charmap;\n    current_charmap = custom_charmap || charmap;\n\n    regex = (regex && old_charmap === current_charmap) ? regex : buildRegExp(current_charmap);\n\n    return str.replace(regex, function(charToReplace) {\n      return current_charmap[charToReplace.charCodeAt(0)] || charToReplace;\n    });\n  }\n\n  function buildRegExp(charmap){\n     return new RegExp('[' + Object.keys(charmap).map(function(code) {return String.fromCharCode(code); }).join(' ') + ']', 'g');\n   }\n\n  return normalize;\n}));\n","'use strict';\n\nvar Parser = require('parse-latin');\nvar toString = require('nlcst-to-string');\nvar visitChildren = require('unist-util-visit-children');\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = ParseEnglish;\n\n/* Inherit from `ParseLatin`. */\nParserPrototype.prototype = Parser.prototype;\n\nvar proto = new ParserPrototype();\n\nParseEnglish.prototype = proto;\n\n/* Add modifiers to `parser`. */\nproto.tokenizeSentencePlugins = [\n  visitChildren(mergeEnglishElisionExceptions)\n].concat(proto.tokenizeSentencePlugins);\n\nproto.tokenizeParagraphPlugins = [\n  modifyChildren(mergeEnglishPrefixExceptions)\n].concat(proto.tokenizeParagraphPlugins);\n\n/* Transform English natural language into an NLCST-tree. */\nfunction ParseEnglish(doc, file) {\n  if (!(this instanceof ParseEnglish)) {\n    return new ParseEnglish(doc, file);\n  }\n\n  Parser.apply(this, arguments);\n}\n\n/* Constructor to create a `ParseEnglish` prototype. */\nfunction ParserPrototype() {}\n\n/* Match a blacklisted (case-insensitive) abbreviation\n * which when followed by a full-stop does not depict\n * a sentence terminal marker. */\nvar ABBREVIATION = new RegExp(\n  '^(' +\n    /* Business Abbreviations:\n     * Incorporation, Limited company. */\n    'inc|ltd|' +\n\n    /* English unit abbreviations:\n     * - Note that *Metric abbreviations* do not use\n     *   full stops.\n     * - Note that some common plurals are included,\n     *   although units should not be pluralised.\n     *\n     * barrel, cubic, dozen, fluid (ounce), foot, gallon, grain, gross,\n     * inch, karat / knot, pound, mile, ounce, pint, quart, square,\n     * tablespoon, teaspoon, yard. */\n    'bbls?|cu|doz|fl|ft|gal|gr|gro|in|kt|lbs?|mi|oz|pt|qt|sq|tbsp|' +\n    'tsp|yds?|' +\n\n    /* Abbreviations of time references:\n     * seconds, minutes, hours, Monday, Tuesday, *, Wednesday,\n     * Thursday, *, Friday, Saturday, Sunday, January, Februari, March,\n     * April, June, July, August, September, *, October, November,\n     * December. */\n\n    'sec|min|hr|mon|tue|tues|wed|thu|thurs|fri|sat|sun|jan|feb|mar|' +\n    'apr|jun|jul|aug|sep|sept|oct|nov|dec' +\n  ')$'\n  /*\n   * NOTE! There's no `i` flag here because the value to\n   * test against should be all lowercase!\n   */\n);\n\n/* Match a blacklisted (case-sensitive) abbreviation\n * which when followed by a full-stop does not depict\n * a sentence terminal marker. */\nvar ABBREVIATION_SENSITIVE = new RegExp(\n  '^(' +\n    /* Social:\n     * Mister, Mistress, Mistress, woman, Mademoiselle, Madame, Monsieur,\n     * Misters, Mesdames, Junior, Senior, *. */\n    'Mr|Mrs|Miss|Ms|Mss|Mses|Mlle|Mme|M|Messrs|Mmes|Jr|Sr|Snr|' +\n\n    /* Rank and academic:\n     * Doctor, Magister, Attorney, Profesor, Honourable, Reverend,\n     * Father, Monsignor, Sister, Brother, Saint, President,\n     * Superintendent, Representative, Senator. */\n    'Dr|Mgr|Atty|Prof|Hon|Rev|Fr|Msgr|Sr|Br|St|Pres|Supt|Rep|Sen|' +\n\n    /* Rank and military:\n     * Governor, Ambassador, Treasurer, Secretary, Admiral, Brigadier,\n     * General, Commander, Colonel, Captain, Lieutenant, Major,\n     * Sergeant, Petty Officer, Warrant Officer, Purple Heart. */\n    'Gov|Amb|Treas|Sec|Amd|Brig|Gen|Cdr|Col|Capt|Lt|Maj|Sgt|Po|Wo|Ph|' +\n\n    /* Common geographical abbreviations:\n     *\n     * Avenue, Boulevard, Mountain, Road, Building, National, *, Route, *,\n     * County, Park, Square, Drive, Port or Point, Street or State, Fort,\n     * Peninsula, Territory, Highway, Freeway, Parkway. */\n    'Ave|Blvd|Mt|Rd|Bldgs?|Nat|Natl|Rt|Rte|Co|Pk|Sq|Dr|Pt|St|' +\n    'Ft|Pen|Terr|Hwy|Fwy|Pkwy|' +\n\n    /* American state abbreviations:\n     * Alabama, Arizona, Arkansas, California, *, Colorado, *,\n     * Connecticut, Delaware, Florida, Georgia, Idaho, *, Illinois,\n     * Indiana, Iowa, Kansas, *, Kentucky, *, Louisiana, Maine, Maryland,\n     * Massachusetts, Michigan, Minnesota, Mississippi, Missouri, Montana,\n     * Nebraska, *, Nevada, Mexico, Dakota, Oklahoma, *, Oregon,\n     * Pennsylvania, *, *, Tennessee, Texas, Utah, Vermont, Virginia,\n     * Washington, Wisconsin, *, Wyoming. */\n    'Ala|Ariz|Ark|Cal|Calif|Col|Colo|Conn|Del|Fla|Ga|Ida|Id|Ill|Ind|' +\n    'Ia|Kan|Kans|Ken|Ky|La|Me|Md|Mass|Mich|Minn|Miss|Mo|Mont|Neb|' +\n    'Nebr|Nev|Mex|Dak|Okla|Ok|Ore|Penna|Penn|Pa|Tenn|Tex|Ut|Vt|Va|' +\n    'Wash|Wis|Wisc|Wyo|' +\n\n    /* Canadian province abbreviations:\n     * Alberta, Manitoba, Ontario, Quebec, *, Saskatchewan,\n     * Yukon Territory. */\n    'Alta|Man|Ont|Qu\\u00E9|Que|Sask|Yuk|' +\n\n    /* English county abbreviations:\n     * Bedfordshire, Berkshire, Buckinghamshire, Cambridgeshire,\n     * Cheshire, Cornwall, Cumberland, Derbyshire, *, Devon, Dorset,\n     * Durham, Gloucestershire, Hampshire, Herefordshire, *,\n     * Hertfordshire, Huntingdonshire, Lancashire, Leicestershire,\n     * Lincolnshire, Middlesex, *, *, Norfolk, Northamptonshire,\n     * Northumberland, *, Nottinghamshire, Oxfordshire, Rutland,\n     * Shropshire, Somerset, Staffordshire, *, Suffolk, Surrey,\n     * Sussex, *, Warwickshire, *, *, Westmorland, Wiltshire,\n     * Worcestershire, Yorkshire. */\n    'Beds|Berks|Bucks|Cambs|Ches|Corn|Cumb|Derbys|Derbs|Dev|Dor|Dur|' +\n    'Glos|Hants|Here|Heref|Herts|Hunts|Lancs|Leics|Lincs|Mx|Middx|Mddx|' +\n    'Norf|Northants|Northumb|Northd|Notts|Oxon|Rut|Shrops|Salop|Som|' +\n    'Staffs|Staf|Suff|Sy|Sx|Ssx|Warks|War|Warw|Westm|Wilts|Worcs|Yorks' +\n  ')$'\n);\n\n/* Match a blacklisted word which when followed by\n * an apostrophe depicts elision. */\nvar ELISION_PREFIX = new RegExp(\n  '^(' +\n    /* Includes:\n     * - o' > of;\n     * - ol' > old. */\n    'o|ol' +\n  ')$'\n);\n\n/* Match a blacklisted word which when preceded by\n * an apostrophe depicts elision. */\nvar ELISION_AFFIX = new RegExp(\n  '^(' +\n    /* Includes:\n     * - 'im > him;\n     * - 'er > her;\n     * - 'em > them.\n     * - 'cause > because. */\n    'im|er|em|cause|' +\n\n    /* Includes:\n     * - 'twas > it was;\n     * - 'tis > it is;\n     * - 'twere > it were. */\n    'twas|tis|twere|' +\n\n    /* Matches groups of year, optionally followed\n     * by an `s`. */\n    '\\\\d\\\\ds?' +\n  ')$'\n);\n\n/* Match one apostrophe. */\nvar APOSTROPHE = /^['\\u2019]$/;\n\n/* Merge a sentence into its next sentence,\n * when the sentence ends with a certain word. */\nfunction mergeEnglishPrefixExceptions(sentence, index, paragraph) {\n  var children = sentence.children;\n  var period = children[children.length - 1];\n  var word = children[children.length - 2];\n  var value;\n  var next;\n\n  if (period && toString(period) === '.' && word && word.type === 'WordNode') {\n    value = toString(word);\n\n    if (ABBREVIATION.test(lower(value)) || ABBREVIATION_SENSITIVE.test(value)) {\n      /* Merge period into abbreviation. */\n      word.children.push(period);\n      children.pop();\n\n      if (period.position && word.position) {\n        word.position.end = period.position.end;\n      }\n\n      /* Merge sentences. */\n      next = paragraph.children[index + 1];\n\n      if (next) {\n        sentence.children = children.concat(next.children);\n\n        paragraph.children.splice(index + 1, 1);\n\n        /* Update position. */\n        if (next.position && sentence.position) {\n          sentence.position.end = next.position.end;\n        }\n\n        /* Next, iterate over the current node again. */\n        return index - 1;\n      }\n    }\n  }\n}\n\n/* Merge an apostrophe depicting elision into\n * its surrounding word. */\nfunction mergeEnglishElisionExceptions(child, index, sentence) {\n  var siblings;\n  var sibling;\n  var other;\n  var length;\n  var value;\n\n  if (child.type !== 'PunctuationNode' && child.type !== 'SymbolNode') {\n    return;\n  }\n\n  siblings = sentence.children;\n  length = siblings.length;\n  value = toString(child);\n\n  /* Match abbreviation of `with`, `w/` */\n  if (value === '/') {\n    sibling = siblings[index - 1];\n\n    if (sibling && lower(toString(sibling)) === 'w') {\n      /* Remove the slash from the sentence. */\n      siblings.splice(index, 1);\n\n      /* Append the slash into the children of the\n       * previous node. */\n      sibling.children.push(child);\n\n      /* Update position. */\n      if (sibling.position && child.position) {\n        sibling.position.end = child.position.end;\n      }\n    }\n  } else if (APOSTROPHE.test(value)) {\n    /* If two preceding (the first white space and the\n     * second a word), and one following (white space)\n     * nodes exist... */\n    sibling = siblings[index - 1];\n\n    if (\n      index > 2 &&\n      index < length - 1 &&\n      sibling.type === 'WordNode' &&\n      siblings[index - 2].type === 'WhiteSpaceNode' &&\n      siblings[index + 1].type === 'WhiteSpaceNode' &&\n      ELISION_PREFIX.test(lower(toString(sibling)))\n    ) {\n      /* Remove the apostrophe from the sentence. */\n      siblings.splice(index, 1);\n\n      /* Append the apostrophe into the children of\n       * node. */\n      sibling.children.push(child);\n\n      /* Update position. */\n      if (sibling.position && child.position) {\n        sibling.position.end = child.position.end;\n      }\n\n      return;\n    }\n\n    /* If a following word exists, and the preceding node\n     * is not a word... */\n    if (\n      index !== length - 1 &&\n      siblings[index + 1].type === 'WordNode' &&\n      (index === 0 || siblings[index - 1].type !== 'WordNode')\n    ) {\n      sibling = siblings[index + 1];\n      value = lower(toString(sibling));\n\n      if (ELISION_AFFIX.test(value)) {\n        /* Remove the apostrophe from the sentence. */\n        siblings.splice(index, 1);\n\n        /* Prepend the apostrophe into the children of\n         * node. */\n        sibling.children = [child].concat(sibling.children);\n\n        /* Update position. */\n        if (sibling.position && child.position) {\n          sibling.position.start = child.position.start;\n        }\n      /* If both preceded and followed by an apostrophe,\n       * and the word is `n`... */\n      } else if (\n        value === 'n' &&\n        index < length - 2 &&\n        APOSTROPHE.test(toString(siblings[index + 2]))\n      ) {\n        other = siblings[index + 2];\n\n        /* Remove the apostrophe from the sentence. */\n        siblings.splice(index, 1);\n        siblings.splice(index + 1, 1);\n\n        /* Prepend the preceding apostrophe and append\n         * the into the following apostrophe into\n         * the children of node. */\n        sibling.children = [child].concat(sibling.children, other);\n\n        /* Update position. */\n        if (sibling.position) {\n          /* istanbul ignore else */\n          if (child.position) {\n            sibling.position.start = child.position.start;\n          }\n\n          /* istanbul ignore else */\n          if (other.position) {\n            sibling.position.end = other.position.end;\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction lower(value) {\n  return value.toLowerCase();\n}\n","'use strict';\nmodule.exports = require('./lib/index.js');\n","/* This module is generated by `script/build-expressions.js` */\n'use strict';\n\nmodule.exports = {\n  affixSymbol: /^([\\)\\]\\}\\u0F3B\\u0F3D\\u169C\\u2046\\u207E\\u208E\\u2309\\u230B\\u232A\\u2769\\u276B\\u276D\\u276F\\u2771\\u2773\\u2775\\u27C6\\u27E7\\u27E9\\u27EB\\u27ED\\u27EF\\u2984\\u2986\\u2988\\u298A\\u298C\\u298E\\u2990\\u2992\\u2994\\u2996\\u2998\\u29D9\\u29DB\\u29FD\\u2E23\\u2E25\\u2E27\\u2E29\\u3009\\u300B\\u300D\\u300F\\u3011\\u3015\\u3017\\u3019\\u301B\\u301E\\u301F\\uFD3E\\uFE18\\uFE36\\uFE38\\uFE3A\\uFE3C\\uFE3E\\uFE40\\uFE42\\uFE44\\uFE48\\uFE5A\\uFE5C\\uFE5E\\uFF09\\uFF3D\\uFF5D\\uFF60\\uFF63]|[\"'\\xBB\\u2019\\u201D\\u203A\\u2E03\\u2E05\\u2E0A\\u2E0D\\u2E1D\\u2E21]|[!\\.\\?\\u2026\\u203D])\\1*$/,\n  newLine: /^[ \\t]*((\\r?\\n|\\r)[\\t ]*)+$/,\n  newLineMulti: /^[ \\t]*((\\r?\\n|\\r)[\\t ]*){2,}$/,\n  terminalMarker: /^((?:[!\\.\\?\\u2026\\u203D])+)$/,\n  wordSymbolInner: /^((?:[&'\\-\\.:=\\?@\\xAD\\xB7\\u2010\\u2011\\u2019\\u2027])|(?:_)+)$/,\n  numerical: /^(?:[0-9\\xB2\\xB3\\xB9\\xBC-\\xBE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0DE6-\\u0DEF\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uA9F0-\\uA9F9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19]|\\uD800[\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDEE1-\\uDEFB\\uDF20-\\uDF23\\uDF41\\uDF4A\\uDFD1-\\uDFD5]|\\uD801[\\uDCA0-\\uDCA9]|\\uD802[\\uDC58-\\uDC5F\\uDC79-\\uDC7F\\uDCA7-\\uDCAF\\uDCFB-\\uDCFF\\uDD16-\\uDD1B\\uDDBC\\uDDBD\\uDDC0-\\uDDCF\\uDDD2-\\uDDFF\\uDE40-\\uDE47\\uDE7D\\uDE7E\\uDE9D-\\uDE9F\\uDEEB-\\uDEEF\\uDF58-\\uDF5F\\uDF78-\\uDF7F\\uDFA9-\\uDFAF]|\\uD803[\\uDCFA-\\uDCFF\\uDE60-\\uDE7E]|\\uD804[\\uDC52-\\uDC6F\\uDCF0-\\uDCF9\\uDD36-\\uDD3F\\uDDD0-\\uDDD9\\uDDE1-\\uDDF4\\uDEF0-\\uDEF9]|\\uD805[\\uDCD0-\\uDCD9\\uDE50-\\uDE59\\uDEC0-\\uDEC9\\uDF30-\\uDF3B]|\\uD806[\\uDCE0-\\uDCF2]|\\uD809[\\uDC00-\\uDC6E]|\\uD81A[\\uDE60-\\uDE69\\uDF50-\\uDF59\\uDF5B-\\uDF61]|\\uD834[\\uDF60-\\uDF71]|\\uD835[\\uDFCE-\\uDFFF]|\\uD83A[\\uDCC7-\\uDCCF]|\\uD83C[\\uDD00-\\uDD0C])+$/,\n  digitStart: /^[0-9]/,\n  lowerInitial: /^(?:[a-z\\xB5\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0529\\u052B\\u052D\\u052F\\u0561-\\u0587\\u13F8-\\u13FD\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6\\u1FC7\\u1FD0-\\u1FD3\\u1FD6\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6\\u1FF7\\u210A\\u210E\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73\\u2C74\\u2C76-\\u2C7B\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA699\\uA69B\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793-\\uA795\\uA797\\uA799\\uA79B\\uA79D\\uA79F\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7B5\\uA7B7\\uA7FA\\uAB30-\\uAB5A\\uAB60-\\uAB65\\uAB70-\\uABBF\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A]|\\uD801[\\uDC28-\\uDC4F]|\\uD803[\\uDCC0-\\uDCF2]|\\uD806[\\uDCC0-\\uDCDF]|\\uD835[\\uDC1A-\\uDC33\\uDC4E-\\uDC54\\uDC56-\\uDC67\\uDC82-\\uDC9B\\uDCB6-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDCCF\\uDCEA-\\uDD03\\uDD1E-\\uDD37\\uDD52-\\uDD6B\\uDD86-\\uDD9F\\uDDBA-\\uDDD3\\uDDEE-\\uDE07\\uDE22-\\uDE3B\\uDE56-\\uDE6F\\uDE8A-\\uDEA5\\uDEC2-\\uDEDA\\uDEDC-\\uDEE1\\uDEFC-\\uDF14\\uDF16-\\uDF1B\\uDF36-\\uDF4E\\uDF50-\\uDF55\\uDF70-\\uDF88\\uDF8A-\\uDF8F\\uDFAA-\\uDFC2\\uDFC4-\\uDFC9\\uDFCB])/,\n  surrogates: /[\\uD800-\\uDFFF]/,\n  punctuation: /[!\"'-\\),-\\/:;\\?\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u201F\\u2022-\\u2027\\u2032-\\u203A\\u203C-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E42\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDF3C-\\uDF3E]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]/,\n  word: /[0-9A-Za-z\\xAA\\xB2\\xB3\\xB5\\xB9\\xBA\\xBC-\\xBE\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u09F4-\\u09F9\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71-\\u0B77\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BF2\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D75\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F33\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u137C\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u17F0-\\u17F9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABE\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2070\\u2071\\u2074-\\u2079\\u207F-\\u2089\\u2090-\\u209C\\u20D0-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2CFD\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u3192-\\u3195\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA672\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA830-\\uA835\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0-\\uDEFB\\uDF00-\\uDF23\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC58-\\uDC76\\uDC79-\\uDC9E\\uDCA7-\\uDCAF\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDCFB-\\uDD1B\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBC-\\uDDCF\\uDDD2-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F-\\uDE47\\uDE60-\\uDE7E\\uDE80-\\uDE9F\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDEEB-\\uDEEF\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF58-\\uDF72\\uDF78-\\uDF91\\uDFA9-\\uDFAF]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDCFA-\\uDCFF\\uDE60-\\uDE7E]|\\uD804[\\uDC00-\\uDC46\\uDC52-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDDE1-\\uDDF4\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF3B]|\\uD806[\\uDCA0-\\uDCF2\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF5B-\\uDF61\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44\\uDF60-\\uDF71]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCC7-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD83C[\\uDD00-\\uDD0C]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/,\n  whiteSpace: /[\\t-\\r \\x85\\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000]/\n};\n","'use strict';\n\nvar createParser = require('./parser');\nvar expressions = require('./expressions');\n\nmodule.exports = ParseLatin;\n\n/* == PARSE LATIN ================================================== */\n\n/* Transform Latin-script natural language into\n * an NLCST-tree. */\nfunction ParseLatin(doc, file) {\n  var value = file || doc;\n\n  if (!(this instanceof ParseLatin)) {\n    return new ParseLatin(doc, file);\n  }\n\n  this.doc = value ? String(value) : null;\n}\n\n/* Quick access to the prototype. */\nvar proto = ParseLatin.prototype;\n\n/* Default position. */\nproto.position = true;\n\n/* Create text nodes. */\nproto.tokenizeSymbol = createTextFactory('Symbol');\nproto.tokenizeWhiteSpace = createTextFactory('WhiteSpace');\nproto.tokenizePunctuation = createTextFactory('Punctuation');\nproto.tokenizeSource = createTextFactory('Source');\nproto.tokenizeText = createTextFactory('Text');\n\n/* Expose `run`. */\nproto.run = run;\n\n/* Inject `plugins` to modifiy the result of the method\n * at `key` on the operated on context. */\nproto.use = useFactory(function (context, key, plugins) {\n  context[key] = context[key].concat(plugins);\n});\n\n/* Inject `plugins` to modifiy the result of the method\n * at `key` on the operated on context, before any other. */\nproto.useFirst = useFactory(function (context, key, plugins) {\n  context[key] = plugins.concat(context[key]);\n});\n\n/* Easy access to the document parser. This additionally\n * supports retext-style invocation: where an instance is\n * created for each file, and the file is given on\n * construction. */\nproto.parse = function (value) {\n  return this.tokenizeRoot(value || this.doc);\n};\n\n/* Transform a `value` into a list of `NLCSTNode`s. */\nproto.tokenize = function (value) {\n  return tokenize(this, value);\n};\n\n/* == PARENT NODES =================================================\n *\n * All these nodes are `pluggable`: they come with a\n * `use` method which accepts a plugin\n * (`function(NLCSTNode)`). Every time one of these\n * methods are called, the plugin is invoked with the\n * node, allowing for easy modification.\n *\n * In fact, the internal transformation from `tokenize`\n * (a list of words, white space, punctuation, and\n * symbols) to `tokenizeRoot` (an NLCST tree), is also\n * implemented through this mechanism. */\n\n/* Create a `WordNode` with its children set to a single\n * `TextNode`, its value set to the given `value`. */\npluggable(ParseLatin, 'tokenizeWord', function (value, eat) {\n  var add = (eat || noopEat)('');\n  var parent = {type: 'WordNode', children: []};\n\n  this.tokenizeText(value, eat, parent);\n\n  return add(parent);\n});\n\n/* Create a `SentenceNode` with its children set to\n * `Node`s, their values set to the tokenized given\n * `value`.\n *\n * Unless plugins add new nodes, the sentence is\n * populated by `WordNode`s, `SymbolNode`s,\n * `PunctuationNode`s, and `WhiteSpaceNode`s. */\npluggable(ParseLatin, 'tokenizeSentence', createParser({\n  type: 'SentenceNode',\n  tokenizer: 'tokenize'\n}));\n\n/* Create a `ParagraphNode` with its children set to\n * `Node`s, their values set to the tokenized given\n * `value`.\n *\n * Unless plugins add new nodes, the paragraph is\n * populated by `SentenceNode`s and `WhiteSpaceNode`s. */\npluggable(ParseLatin, 'tokenizeParagraph', createParser({\n  type: 'ParagraphNode',\n  delimiter: expressions.terminalMarker,\n  delimiterType: 'PunctuationNode',\n  tokenizer: 'tokenizeSentence'\n}));\n\n/* Create a `RootNode` with its children set to `Node`s,\n * their values set to the tokenized given `value`. */\npluggable(ParseLatin, 'tokenizeRoot', createParser({\n  type: 'RootNode',\n  delimiter: expressions.newLine,\n  delimiterType: 'WhiteSpaceNode',\n  tokenizer: 'tokenizeParagraph'\n}));\n\n/* == PLUGINS ====================================================== */\n\nproto.use('tokenizeSentence', [\n  require('./plugin/merge-initial-word-symbol'),\n  require('./plugin/merge-final-word-symbol'),\n  require('./plugin/merge-inner-word-symbol'),\n  require('./plugin/merge-inner-word-slash'),\n  require('./plugin/merge-initialisms'),\n  require('./plugin/merge-words'),\n  require('./plugin/patch-position')\n]);\n\nproto.use('tokenizeParagraph', [\n  require('./plugin/merge-non-word-sentences'),\n  require('./plugin/merge-affix-symbol'),\n  require('./plugin/merge-initial-lower-case-letter-sentences'),\n  require('./plugin/merge-initial-digit-sentences'),\n  require('./plugin/merge-prefix-exceptions'),\n  require('./plugin/merge-affix-exceptions'),\n  require('./plugin/merge-remaining-full-stops'),\n  require('./plugin/make-initial-white-space-siblings'),\n  require('./plugin/make-final-white-space-siblings'),\n  require('./plugin/break-implicit-sentences'),\n  require('./plugin/remove-empty-nodes'),\n  require('./plugin/patch-position')\n]);\n\nproto.use('tokenizeRoot', [\n  require('./plugin/make-initial-white-space-siblings'),\n  require('./plugin/make-final-white-space-siblings'),\n  require('./plugin/remove-empty-nodes'),\n  require('./plugin/patch-position')\n]);\n\n/* == TEXT NODES =================================================== */\n\n/* Factory to create a `Text`. */\nfunction createTextFactory(type) {\n  type += 'Node';\n\n  return createText;\n\n  /* Construct a `Text` from a bound `type` */\n  function createText(value, eat, parent) {\n    if (value === null || value === undefined) {\n      value = '';\n    }\n\n    return (eat || noopEat)(value)({\n      type: type,\n      value: String(value)\n    }, parent);\n  }\n}\n\n/* Run transform plug-ins for `key` on `nodes`. */\nfunction run(key, nodes) {\n  var wareKey = key + 'Plugins';\n  var plugins = this[wareKey];\n  var index = -1;\n\n  if (plugins) {\n    while (plugins[++index]) {\n      plugins[index](nodes);\n    }\n  }\n\n  return nodes;\n}\n\n/* Make a method “pluggable”. */\nfunction pluggable(Constructor, key, callback) {\n  /* Set a pluggable version of `callback`\n   * on `Constructor`. */\n  Constructor.prototype[key] = function () {\n    return this.run(key, callback.apply(this, arguments));\n  };\n}\n\n/* Factory to inject `plugins`. Takes `callback` for\n * the actual inserting. */\nfunction useFactory(callback) {\n  return use;\n\n  /* Validate if `plugins` can be inserted. Invokes\n   * the bound `callback` to do the actual inserting. */\n  function use(key, plugins) {\n    var self = this;\n    var wareKey;\n\n    /* Throw if the method is not pluggable. */\n    if (!(key in self)) {\n      throw new Error(\n        'Illegal Invocation: Unsupported `key` for ' +\n        '`use(key, plugins)`. Make sure `key` is a ' +\n        'supported function'\n      );\n    }\n\n    /* Fail silently when no plugins are given. */\n    if (!plugins) {\n      return;\n    }\n\n    wareKey = key + 'Plugins';\n\n    /* Make sure `plugins` is a list. */\n    if (typeof plugins === 'function') {\n      plugins = [plugins];\n    } else {\n      plugins = plugins.concat();\n    }\n\n    /* Make sure `wareKey` exists. */\n    if (!self[wareKey]) {\n      self[wareKey] = [];\n    }\n\n    /* Invoke callback with the ware key and plugins. */\n    callback(self, wareKey, plugins);\n  }\n}\n\n/* == CLASSIFY ===================================================== */\n\n/* Match a word character. */\nvar WORD = expressions.word;\n\n/* Match a surrogate character. */\nvar SURROGATES = expressions.surrogates;\n\n/* Match a punctuation character. */\nvar PUNCTUATION = expressions.punctuation;\n\n/* Match a white space character. */\nvar WHITE_SPACE = expressions.whiteSpace;\n\n/* Transform a `value` into a list of `NLCSTNode`s. */\nfunction tokenize(parser, value) {\n  var tokens;\n  var offset;\n  var line;\n  var column;\n  var index;\n  var length;\n  var character;\n  var queue;\n  var prev;\n  var left;\n  var right;\n  var eater;\n\n  if (value === null || value === undefined) {\n    value = '';\n  } else if (value instanceof String) {\n    value = value.toString();\n  }\n\n  if (typeof value !== 'string') {\n    /* Return the given nodes if this is either an\n     * empty array, or an array with a node as a first\n     * child. */\n    if ('length' in value && (!value[0] || value[0].type)) {\n      return value;\n    }\n\n    throw new Error(\n      'Illegal invocation: \\'' + value + '\\'' +\n      ' is not a valid argument for \\'ParseLatin\\''\n    );\n  }\n\n  tokens = [];\n\n  if (!value) {\n    return tokens;\n  }\n\n  index = 0;\n  offset = 0;\n  line = 1;\n  column = 1;\n\n  /* Eat mechanism to use. */\n  eater = parser.position ? eat : noPositionEat;\n\n  length = value.length;\n  prev = '';\n  queue = '';\n\n  while (index < length) {\n    character = value.charAt(index);\n\n    if (WHITE_SPACE.test(character)) {\n      right = 'WhiteSpace';\n    } else if (PUNCTUATION.test(character)) {\n      right = 'Punctuation';\n    } else if (WORD.test(character)) {\n      right = 'Word';\n    } else {\n      right = 'Symbol';\n    }\n\n    tick();\n\n    prev = character;\n    character = '';\n    left = right;\n    right = null;\n\n    index++;\n  }\n\n  tick();\n\n  return tokens;\n\n  /* Check one character. */\n  function tick() {\n    if (\n      left === right &&\n      (\n        left === 'Word' ||\n        left === 'WhiteSpace' ||\n        character === prev ||\n        SURROGATES.test(character)\n      )\n    ) {\n      queue += character;\n    } else {\n      /* Flush the previous queue. */\n      if (queue) {\n        parser['tokenize' + left](queue, eater);\n      }\n\n      queue = character;\n    }\n  }\n\n  /* Remove `subvalue` from `value`.\n   * Expects `subvalue` to be at the start from\n   * `value`, and applies no validation. */\n  function eat(subvalue) {\n    var pos = position();\n\n    update(subvalue);\n\n    return apply;\n\n    /* Add the given arguments, add `position` to\n     * the returned node, and return the node. */\n    function apply() {\n      return pos(add.apply(null, arguments));\n    }\n  }\n\n  /* Remove `subvalue` from `value`. Does not patch\n   * positional information. */\n  function noPositionEat() {\n    return apply;\n\n    /* Add the given arguments and return the node. */\n    function apply() {\n      return add.apply(null, arguments);\n    }\n  }\n\n  /* Add mechanism. */\n  function add(node, parent) {\n    if (parent) {\n      parent.children.push(node);\n    } else {\n      tokens.push(node);\n    }\n\n    return node;\n  }\n\n  /* Mark position and patch `node.position`. */\n  function position() {\n    var before = now();\n\n    /* Add the position to a node. */\n    function patch(node) {\n      node.position = new Position(before);\n\n      return node;\n    }\n\n    return patch;\n  }\n\n  /* Update line and column based on `value`. */\n  function update(subvalue) {\n    var subvalueLength = subvalue.length;\n    var character = -1;\n    var lastIndex = -1;\n\n    offset += subvalueLength;\n\n    while (++character < subvalueLength) {\n      if (subvalue.charAt(character) === '\\n') {\n        lastIndex = character;\n        line++;\n      }\n    }\n\n    if (lastIndex === -1) {\n      column += subvalueLength;\n    } else {\n      column = subvalueLength - lastIndex;\n    }\n  }\n\n  /* Store position information for a node. */\n  function Position(start) {\n    this.start = start;\n    this.end = now();\n  }\n\n  /* Get the current position. */\n  function now() {\n    return {\n      line: line,\n      column: column,\n      offset: offset\n    };\n  }\n}\n\n/* Add mechanism used when text-tokenisers are called\n * directly outside of the `tokenize` function. */\nfunction noopAdd(node, parent) {\n  if (parent) {\n    parent.children.push(node);\n  }\n\n  return node;\n}\n\n/* Eat and add mechanism without adding positional\n * information, used when text-tokenisers are called\n * directly outside of the `tokenize` function. */\nfunction noopEat() {\n  return noopAdd;\n}\n","'use strict';\n\nvar tokenizer = require('./tokenizer');\n\nmodule.exports = parserFactory;\n\n/* Construct a parser based on `options`. */\nfunction parserFactory(options) {\n  var type = options.type;\n  var tokenizerProperty = options.tokenizer;\n  var delimiter = options.delimiter;\n  var tokenize = delimiter && tokenizer(options.delimiterType, delimiter);\n\n  return parser;\n\n  function parser(value) {\n    var children = this[tokenizerProperty](value);\n\n    return {\n      type: type,\n      children: tokenize ? tokenize(children) : children\n    };\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\nvar expressions = require('../expressions');\n\nmodule.exports = modifyChildren(breakImplicitSentences);\n\n/* Two or more new line characters. */\nvar MULTI_NEW_LINE = expressions.newLineMulti;\n\n/* Break a sentence if a white space with more\n * than one new-line is found. */\nfunction breakImplicitSentences(child, index, parent) {\n  var children;\n  var position;\n  var length;\n  var tail;\n  var head;\n  var end;\n  var insertion;\n  var node;\n\n  if (child.type !== 'SentenceNode') {\n    return;\n  }\n\n  children = child.children;\n\n  /* Ignore first and last child. */\n  length = children.length - 1;\n  position = 0;\n\n  while (++position < length) {\n    node = children[position];\n\n    if (\n      node.type !== 'WhiteSpaceNode' ||\n      !MULTI_NEW_LINE.test(toString(node))\n    ) {\n      continue;\n    }\n\n    child.children = children.slice(0, position);\n\n    insertion = {\n      type: 'SentenceNode',\n      children: children.slice(position + 1)\n    };\n\n    tail = children[position - 1];\n    head = children[position + 1];\n\n    parent.children.splice(index + 1, 0, node, insertion);\n\n    if (child.position && tail.position && head.position) {\n      end = child.position.end;\n\n      child.position.end = tail.position.end;\n\n      insertion.position = {\n        start: head.position.start,\n        end: end\n      };\n    }\n\n    return index + 1;\n  }\n}\n","'use strict';\n\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(makeFinalWhiteSpaceSiblings);\n\n/* Move white space ending a paragraph up, so they are\n * the siblings of paragraphs. */\nfunction makeFinalWhiteSpaceSiblings(child, index, parent) {\n  var children = child.children;\n  var prev;\n\n  if (\n    children &&\n    children.length !== 0 &&\n    children[children.length - 1].type === 'WhiteSpaceNode'\n  ) {\n    parent.children.splice(index + 1, 0, child.children.pop());\n    prev = children[children.length - 1];\n\n    if (prev && prev.position && child.position) {\n      child.position.end = prev.position.end;\n    }\n\n    /* Next, iterate over the current node again. */\n    return index;\n  }\n}\n","'use strict';\n\nvar visitChildren = require('unist-util-visit-children');\n\nmodule.exports = visitChildren(makeInitialWhiteSpaceSiblings);\n\n/* Move white space starting a sentence up, so they are\n * the siblings of sentences. */\nfunction makeInitialWhiteSpaceSiblings(child, index, parent) {\n  var children = child.children;\n  var next;\n\n  if (children && children.length !== 0 && children[0].type === 'WhiteSpaceNode') {\n    parent.children.splice(index, 0, children.shift());\n    next = children[0];\n\n    if (next && next.position && child.position) {\n      child.position.start = next.position.start;\n    }\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(mergeAffixExceptions);\n\n/* Merge a sentence into its previous sentence, when\n * the sentence starts with a comma. */\nfunction mergeAffixExceptions(child, index, parent) {\n  var children = child.children;\n  var node;\n  var position;\n  var value;\n  var previousChild;\n\n  if (!children || children.length === 0 || index === 0) {\n    return;\n  }\n\n  position = -1;\n\n  while (children[++position]) {\n    node = children[position];\n\n    if (node.type === 'WordNode') {\n      return;\n    }\n\n    if (node.type === 'SymbolNode' || node.type === 'PunctuationNode') {\n      value = toString(node);\n\n      if (value !== ',' && value !== ';') {\n        return;\n      }\n\n      previousChild = parent.children[index - 1];\n\n      previousChild.children = previousChild.children.concat(children);\n\n      /* Update position. */\n      if (previousChild.position && child.position) {\n        previousChild.position.end = child.position.end;\n      }\n\n      parent.children.splice(index, 1);\n\n      /* Next, iterate over the node *now* at the current\n       * position. */\n      return index;\n    }\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\nvar expressions = require('../expressions');\n\nmodule.exports = modifyChildren(mergeAffixSymbol);\n\n/* Closing or final punctuation, or terminal markers\n * that should still be included in the previous\n * sentence, even though they follow the sentence's\n * terminal marker. */\nvar AFFIX_SYMBOL = expressions.affixSymbol;\n\n/* Move certain punctuation following a terminal\n * marker (thus in the next sentence) to the\n * previous sentence. */\nfunction mergeAffixSymbol(child, index, parent) {\n  var children = child.children;\n  var first;\n  var second;\n  var prev;\n\n  if (children && children.length !== 0 && index !== 0) {\n    first = children[0];\n    second = children[1];\n    prev = parent.children[index - 1];\n\n    if (\n      (first.type === 'SymbolNode' || first.type === 'PunctuationNode') &&\n      AFFIX_SYMBOL.test(toString(first))\n    ) {\n      prev.children.push(children.shift());\n\n      /* Update position. */\n      if (first.position && prev.position) {\n        prev.position.end = first.position.end;\n      }\n\n      if (second && second.position && child.position) {\n        child.position.start = second.position.start;\n      }\n\n      /* Next, iterate over the previous node again. */\n      return index - 1;\n    }\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(mergeFinalWordSymbol);\n\n/* Merge certain punctuation marks into their\n * preceding words. */\nfunction mergeFinalWordSymbol(child, index, parent) {\n  var children;\n  var prev;\n  var next;\n\n  if (\n    index !== 0 &&\n    (child.type === 'SymbolNode' || child.type === 'PunctuationNode') &&\n    toString(child) === '-'\n  ) {\n    children = parent.children;\n\n    prev = children[index - 1];\n    next = children[index + 1];\n\n    if (\n      (!next || next.type !== 'WordNode') &&\n      (prev && prev.type === 'WordNode')\n    ) {\n      /* Remove `child` from parent. */\n      children.splice(index, 1);\n\n      /* Add the punctuation mark at the end of the\n       * previous node. */\n      prev.children.push(child);\n\n      /* Update position. */\n      if (prev.position && child.position) {\n        prev.position.end = child.position.end;\n      }\n\n      /* Next, iterate over the node *now* at the\n       * current position (which was the next node). */\n      return index;\n    }\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\nvar expressions = require('../expressions');\n\nmodule.exports = modifyChildren(mergeInitialDigitSentences);\n\n/* Initial lowercase letter. */\nvar DIGIT = expressions.digitStart;\n\n/* Merge a sentence into its previous sentence, when\n * the sentence starts with a lower case letter. */\nfunction mergeInitialDigitSentences(child, index, parent) {\n  var children = child.children;\n  var siblings = parent.children;\n  var prev = siblings[index - 1];\n  var head = children[0];\n\n  if (prev && head && head.type === 'WordNode' && DIGIT.test(toString(head))) {\n    prev.children = prev.children.concat(children);\n    siblings.splice(index, 1);\n\n    /* Update position. */\n    if (prev.position && child.position) {\n      prev.position.end = child.position.end;\n    }\n\n    /* Next, iterate over the node *now* at\n     * the current position. */\n    return index;\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\nvar expressions = require('../expressions');\n\nmodule.exports = modifyChildren(mergeInitialLowerCaseLetterSentences);\n\n/* Initial lowercase letter. */\nvar LOWER_INITIAL = expressions.lowerInitial;\n\n/* Merge a sentence into its previous sentence, when\n * the sentence starts with a lower case letter. */\nfunction mergeInitialLowerCaseLetterSentences(child, index, parent) {\n  var children = child.children;\n  var position;\n  var node;\n  var siblings;\n  var prev;\n\n  if (children && children.length !== 0 && index !== 0) {\n    position = -1;\n\n    while (children[++position]) {\n      node = children[position];\n\n      if (node.type === 'WordNode') {\n        if (!LOWER_INITIAL.test(toString(node))) {\n          return;\n        }\n\n        siblings = parent.children;\n\n        prev = siblings[index - 1];\n\n        prev.children = prev.children.concat(children);\n\n        siblings.splice(index, 1);\n\n        /* Update position. */\n        if (prev.position && child.position) {\n          prev.position.end = child.position.end;\n        }\n\n        /* Next, iterate over the node *now* at\n         * the current position. */\n        return index;\n      }\n\n      if (node.type === 'SymbolNode' || node.type === 'PunctuationNode') {\n        return;\n      }\n    }\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(mergeInitialWordSymbol);\n\n/* Merge certain punctuation marks into their\n * following words. */\nfunction mergeInitialWordSymbol(child, index, parent) {\n  var children;\n  var next;\n\n  if (\n    (child.type !== 'SymbolNode' && child.type !== 'PunctuationNode') ||\n    toString(child) !== '&'\n  ) {\n    return;\n  }\n\n  children = parent.children;\n\n  next = children[index + 1];\n\n  /* If either a previous word, or no following word,\n   * exists, exit early. */\n  if (\n    (index !== 0 && children[index - 1].type === 'WordNode') ||\n    !(next && next.type === 'WordNode')\n  ) {\n    return;\n  }\n\n  /* Remove `child` from parent. */\n  children.splice(index, 1);\n\n  /* Add the punctuation mark at the start of the\n   * next node. */\n  next.children.unshift(child);\n\n  /* Update position. */\n  if (next.position && child.position) {\n    next.position.start = child.position.start;\n  }\n\n  /* Next, iterate over the node at the previous\n   * position, as it's now adjacent to a following\n   * word. */\n  return index - 1;\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\nvar expressions = require('../expressions');\n\nmodule.exports = modifyChildren(mergeInitialisms);\n\nvar NUMERICAL = expressions.numerical;\n\n/* Merge initialisms. */\nfunction mergeInitialisms(child, index, parent) {\n  var siblings;\n  var prev;\n  var children;\n  var length;\n  var position;\n  var otherChild;\n  var isAllDigits;\n  var value;\n\n  if (index !== 0 && toString(child) === '.') {\n    siblings = parent.children;\n\n    prev = siblings[index - 1];\n    children = prev.children;\n\n    length = children && children.length;\n\n    if (\n      prev.type === 'WordNode' &&\n      length !== 1 &&\n      length % 2 !== 0\n    ) {\n      position = length;\n\n      isAllDigits = true;\n\n      while (children[--position]) {\n        otherChild = children[position];\n\n        value = toString(otherChild);\n\n        if (position % 2 === 0) {\n          /* Initialisms consist of one\n           * character values. */\n          if (value.length > 1) {\n            return;\n          }\n\n          if (!NUMERICAL.test(value)) {\n            isAllDigits = false;\n          }\n        } else if (value !== '.') {\n          if (position < length - 2) {\n            break;\n          } else {\n            return;\n          }\n        }\n      }\n\n      if (!isAllDigits) {\n        /* Remove `child` from parent. */\n        siblings.splice(index, 1);\n\n        /* Add child to the previous children. */\n        children.push(child);\n\n        /* Update position. */\n        if (prev.position && child.position) {\n          prev.position.end = child.position.end;\n        }\n\n        /* Next, iterate over the node *now* at the current\n         * position. */\n        return index;\n      }\n    }\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(mergeInnerWordSlash);\n\nvar C_SLASH = '/';\n\n/* Merge words joined by certain punctuation marks. */\nfunction mergeInnerWordSlash(child, index, parent) {\n  var siblings = parent.children;\n  var prev;\n  var next;\n  var prevValue;\n  var nextValue;\n  var queue;\n  var tail;\n  var count;\n\n  prev = siblings[index - 1];\n  next = siblings[index + 1];\n\n  if (\n    prev &&\n    prev.type === 'WordNode' &&\n    (child.type === 'SymbolNode' || child.type === 'PunctuationNode') &&\n    toString(child) === C_SLASH\n  ) {\n    prevValue = toString(prev);\n    tail = child;\n    queue = [child];\n    count = 1;\n\n    if (next && next.type === 'WordNode') {\n      nextValue = toString(next);\n      tail = next;\n      queue = queue.concat(next.children);\n      count++;\n    }\n\n    if (\n      prevValue.length < 3 &&\n      (!nextValue || nextValue.length < 3)\n    ) {\n      /* Add all found tokens to `prev`s children. */\n      prev.children = prev.children.concat(queue);\n\n      siblings.splice(index, count);\n\n      /* Update position. */\n      if (prev.position && tail.position) {\n        prev.position.end = tail.position.end;\n      }\n\n      /* Next, iterate over the node *now* at the current\n       * position. */\n      return index;\n    }\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\nvar expressions = require('../expressions');\n\nmodule.exports = modifyChildren(mergeInnerWordSymbol);\n\n/* Symbols part of surrounding words. */\nvar INNER_WORD_SYMBOL = expressions.wordSymbolInner;\n\n/* Merge words joined by certain punctuation marks. */\nfunction mergeInnerWordSymbol(child, index, parent) {\n  var siblings;\n  var sibling;\n  var prev;\n  var last;\n  var position;\n  var tokens;\n  var queue;\n\n  if (index !== 0 && (child.type === 'SymbolNode' || child.type === 'PunctuationNode')) {\n    siblings = parent.children;\n    prev = siblings[index - 1];\n\n    if (prev && prev.type === 'WordNode') {\n      position = index - 1;\n\n      tokens = [];\n      queue = [];\n\n      /* - If a token which is neither word nor\n       *   inner word symbol is found, the loop\n       *   is broken.\n       * - If an inner word symbol is found,\n       *   it's queued.\n       * - If a word is found, it's queued (and\n       *   the queue stored and emptied). */\n      while (siblings[++position]) {\n        sibling = siblings[position];\n\n        if (sibling.type === 'WordNode') {\n          tokens = tokens.concat(queue, sibling.children);\n\n          queue = [];\n        } else if (\n          (\n            sibling.type === 'SymbolNode' ||\n            sibling.type === 'PunctuationNode'\n          ) &&\n          INNER_WORD_SYMBOL.test(toString(sibling))\n        ) {\n          queue.push(sibling);\n        } else {\n          break;\n        }\n      }\n\n      if (tokens.length !== 0) {\n        /* If there is a queue, remove its length\n         * from `position`. */\n        if (queue.length !== 0) {\n          position -= queue.length;\n        }\n\n        /* Remove every (one or more) inner-word punctuation\n         * marks and children of words. */\n        siblings.splice(index, position - index);\n\n        /* Add all found tokens to `prev`s children. */\n        prev.children = prev.children.concat(tokens);\n\n        last = tokens[tokens.length - 1];\n\n        /* Update position. */\n        if (prev.position && last.position) {\n          prev.position.end = last.position.end;\n        }\n\n        /* Next, iterate over the node *now* at the current\n         * position. */\n        return index;\n      }\n    }\n  }\n}\n","'use strict';\n\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(mergeNonWordSentences);\n\n/* Merge a sentence into the following sentence, when\n * the sentence does not contain word tokens. */\nfunction mergeNonWordSentences(child, index, parent) {\n  var children = child.children;\n  var position = -1;\n  var prev;\n  var next;\n\n  while (children[++position]) {\n    if (children[position].type === 'WordNode') {\n      return;\n    }\n  }\n\n  prev = parent.children[index - 1];\n\n  if (prev) {\n    prev.children = prev.children.concat(children);\n\n    /* Remove the child. */\n    parent.children.splice(index, 1);\n\n    /* Patch position. */\n    if (prev.position && child.position) {\n      prev.position.end = child.position.end;\n    }\n\n    /* Next, iterate over the node *now* at\n     * the current position (which was the\n     * next node). */\n    return index;\n  }\n\n  next = parent.children[index + 1];\n\n  if (next) {\n    next.children = children.concat(next.children);\n\n    /* Patch position. */\n    if (next.position && child.position) {\n      next.position.start = child.position.start;\n    }\n\n    /* Remove the child. */\n    parent.children.splice(index, 1);\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(mergePrefixExceptions);\n\n/* Blacklist of full stop characters that should not\n * be treated as terminal sentence markers: A case-insensitive\n * abbreviation. */\nvar ABBREVIATION_PREFIX = new RegExp(\n  '^(' +\n    '[0-9]{1,3}|' +\n    '[a-z]|' +\n\n    /* Common Latin Abbreviations:\n     * Based on: http://en.wikipedia.org/wiki/List_of_Latin_abbreviations\n     * Where only the abbreviations written without joining full stops,\n     * but with a final full stop, were extracted.\n     *\n     * circa, capitulus, confer, compare, centum weight, eadem, (et) alii,\n     * et cetera, floruit, foliis, ibidem, idem, nemine && contradicente,\n     * opere && citato, (per) cent, (per) procurationem, (pro) tempore,\n     * sic erat scriptum, (et) sequentia, statim, videlicet. */\n    'al|ca|cap|cca|cent|cf|cit|con|cp|cwt|ead|etc|ff|' +\n    'fl|ibid|id|nem|op|pro|seq|sic|stat|tem|viz' +\n  ')$'\n);\n\n/* Merge a sentence into its next sentence, when the\n * sentence ends with a certain word. */\nfunction mergePrefixExceptions(child, index, parent) {\n  var children = child.children;\n  var period;\n  var node;\n  var next;\n\n  if (children && children.length > 1) {\n    period = children[children.length - 1];\n\n    if (period && toString(period) === '.') {\n      node = children[children.length - 2];\n\n      if (\n        node &&\n        node.type === 'WordNode' &&\n        ABBREVIATION_PREFIX.test(toString(node).toLowerCase())\n      ) {\n        /* Merge period into abbreviation. */\n        node.children.push(period);\n        children.pop();\n\n        /* Update position. */\n        if (period.position && node.position) {\n          node.position.end = period.position.end;\n        }\n\n        /* Merge sentences. */\n        next = parent.children[index + 1];\n\n        if (next) {\n          child.children = children.concat(next.children);\n\n          parent.children.splice(index + 1, 1);\n\n          /* Update position. */\n          if (next.position && child.position) {\n            child.position.end = next.position.end;\n          }\n\n          /* Next, iterate over the current node again. */\n          return index - 1;\n        }\n      }\n    }\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\nvar visitChildren = require('unist-util-visit-children');\nvar expressions = require('../expressions');\n\nmodule.exports = visitChildren(mergeRemainingFullStops);\n\n/* Blacklist of full stop characters that should not\n * be treated as terminal sentence markers: A\n * case-insensitive abbreviation. */\nvar TERMINAL_MARKER = expressions.terminalMarker;\n\n/* Merge non-terminal-marker full stops into\n * the previous word (if available), or the next\n * word (if available). */\nfunction mergeRemainingFullStops(child) {\n  var children = child.children;\n  var position = children.length;\n  var hasFoundDelimiter = false;\n  var grandchild;\n  var prev;\n  var next;\n  var nextNext;\n\n  while (children[--position]) {\n    grandchild = children[position];\n\n    if (grandchild.type !== 'SymbolNode' && grandchild.type !== 'PunctuationNode') {\n      /* This is a sentence without terminal marker,\n       * so we 'fool' the code to make it think we\n       * have found one. */\n      if (grandchild.type === 'WordNode') {\n        hasFoundDelimiter = true;\n      }\n\n      continue;\n    }\n\n    /* Exit when this token is not a terminal marker. */\n    if (!TERMINAL_MARKER.test(toString(grandchild))) {\n      continue;\n    }\n\n    /* Ignore the first terminal marker found\n     * (starting at the end), as it should not\n     * be merged. */\n    if (!hasFoundDelimiter) {\n      hasFoundDelimiter = true;\n\n      continue;\n    }\n\n    /* Only merge a single full stop. */\n    if (toString(grandchild) !== '.') {\n      continue;\n    }\n\n    prev = children[position - 1];\n    next = children[position + 1];\n\n    if (prev && prev.type === 'WordNode') {\n      nextNext = children[position + 2];\n\n      /* Continue when the full stop is followed by\n       * a space and another full stop, such as:\n       * `{.} .` */\n      if (\n        next &&\n        nextNext &&\n        next.type === 'WhiteSpaceNode' &&\n        toString(nextNext) === '.'\n      ) {\n        continue;\n      }\n\n      /* Remove `child` from parent. */\n      children.splice(position, 1);\n\n      /* Add the punctuation mark at the end of the\n       * previous node. */\n      prev.children.push(grandchild);\n\n      /* Update position. */\n      if (grandchild.position && prev.position) {\n        prev.position.end = grandchild.position.end;\n      }\n\n      position--;\n    } else if (next && next.type === 'WordNode') {\n      /* Remove `child` from parent. */\n      children.splice(position, 1);\n\n      /* Add the punctuation mark at the start of\n       * the next node. */\n      next.children.unshift(grandchild);\n\n      if (grandchild.position && next.position) {\n        next.position.start = grandchild.position.start;\n      }\n    }\n  }\n}\n","'use strict';\n\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(mergeFinalWordSymbol);\n\n/* Merge multiple words. This merges the children of\n * adjacent words, something which should not occur\n * naturally by parse-latin, but might happen when\n * custom tokens were passed in. */\nfunction mergeFinalWordSymbol(child, index, parent) {\n  var siblings = parent.children;\n  var next;\n\n  if (child.type === 'WordNode') {\n    next = siblings[index + 1];\n\n    if (next && next.type === 'WordNode') {\n      /* Remove `next` from parent. */\n      siblings.splice(index + 1, 1);\n\n      /* Add the punctuation mark at the end of the\n       * previous node. */\n      child.children = child.children.concat(next.children);\n\n      /* Update position. */\n      if (next.position && child.position) {\n        child.position.end = next.position.end;\n      }\n\n      /* Next, re-iterate the current node. */\n      return index;\n    }\n  }\n}\n","'use strict';\n\nvar visitChildren = require('unist-util-visit-children');\n\nmodule.exports = visitChildren(patchPosition);\n\n/* Patch the position on a parent node based on its first\n * and last child. */\nfunction patchPosition(child, index, node) {\n  var siblings = node.children;\n\n  if (!child.position) {\n    return;\n  }\n\n  if (index === 0 && (!node.position || /* istanbul ignore next */ !node.position.start)) {\n    patch(node);\n    node.position.start = child.position.start;\n  }\n\n  if (\n    index === siblings.length - 1 &&\n    (!node.position || !node.position.end)\n  ) {\n    patch(node);\n    node.position.end = child.position.end;\n  }\n}\n\n/* Add a `position` object when it does not yet exist\n * on `node`. */\nfunction patch(node) {\n  if (!node.position) {\n    node.position = {};\n  }\n}\n","'use strict';\n\nvar modifyChildren = require('unist-util-modify-children');\n\nmodule.exports = modifyChildren(removeEmptyNodes);\n\n/* Remove empty children. */\nfunction removeEmptyNodes(child, index, parent) {\n  if ('children' in child && child.children.length === 0) {\n    parent.children.splice(index, 1);\n\n    /* Next, iterate over the node *now* at\n     * the current position (which was the\n     * next node). */\n    return index;\n  }\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\n\nmodule.exports = tokenizerFactory;\n\n/* Factory to create a tokenizer based on a given\n * `expression`. */\nfunction tokenizerFactory(childType, expression) {\n  return tokenizer;\n\n  /* A function that splits. */\n  function tokenizer(node) {\n    var children = [];\n    var tokens = node.children;\n    var type = node.type;\n    var length = tokens.length;\n    var index = -1;\n    var lastIndex = length - 1;\n    var start = 0;\n    var first;\n    var last;\n    var parent;\n\n    while (++index < length) {\n      if (\n        index === lastIndex ||\n        (\n          tokens[index].type === childType &&\n          expression.test(toString(tokens[index]))\n        )\n      ) {\n        first = tokens[start];\n        last = tokens[index];\n\n        parent = {\n          type: type,\n          children: tokens.slice(start, index + 1)\n        };\n\n        if (first.position && last.position) {\n          parent.position = {\n            start: first.position.start,\n            end: last.position.end\n          };\n        }\n\n        children.push(parent);\n\n        start = index + 1;\n      }\n    }\n\n    return children;\n  }\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","/* global define */\n\n(function (root, pluralize) {\n  /* istanbul ignore else */\n  if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n    // Node.\n    module.exports = pluralize();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD, registers as an anonymous module.\n    define(function () {\n      return pluralize();\n    });\n  } else {\n    // Browser global.\n    root.pluralize = pluralize();\n  }\n})(this, function () {\n  // Rule storage - pluralize and singularize need to be run sequentially,\n  // while other rules can be optimized using an object for instant lookups.\n  var pluralRules = [];\n  var singularRules = [];\n  var uncountables = {};\n  var irregularPlurals = {};\n  var irregularSingles = {};\n\n  /**\n   * Sanitize a pluralization rule to a usable regular expression.\n   *\n   * @param  {(RegExp|string)} rule\n   * @return {RegExp}\n   */\n  function sanitizeRule (rule) {\n    if (typeof rule === 'string') {\n      return new RegExp('^' + rule + '$', 'i');\n    }\n\n    return rule;\n  }\n\n  /**\n   * Pass in a word token to produce a function that can replicate the case on\n   * another word.\n   *\n   * @param  {string}   word\n   * @param  {string}   token\n   * @return {Function}\n   */\n  function restoreCase (word, token) {\n    // Tokens are an exact match.\n    if (word === token) return token;\n\n    // Upper cased words. E.g. \"HELLO\".\n    if (word === word.toUpperCase()) return token.toUpperCase();\n\n    // Title cased words. E.g. \"Title\".\n    if (word[0] === word[0].toUpperCase()) {\n      return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();\n    }\n\n    // Lower cased words. E.g. \"test\".\n    return token.toLowerCase();\n  }\n\n  /**\n   * Interpolate a regexp string.\n   *\n   * @param  {string} str\n   * @param  {Array}  args\n   * @return {string}\n   */\n  function interpolate (str, args) {\n    return str.replace(/\\$(\\d{1,2})/g, function (match, index) {\n      return args[index] || '';\n    });\n  }\n\n  /**\n   * Replace a word using a rule.\n   *\n   * @param  {string} word\n   * @param  {Array}  rule\n   * @return {string}\n   */\n  function replace (word, rule) {\n    return word.replace(rule[0], function (match, index) {\n      var result = interpolate(rule[1], arguments);\n\n      if (match === '') {\n        return restoreCase(word[index - 1], result);\n      }\n\n      return restoreCase(match, result);\n    });\n  }\n\n  /**\n   * Sanitize a word by passing in the word and sanitization rules.\n   *\n   * @param  {string}   token\n   * @param  {string}   word\n   * @param  {Array}    rules\n   * @return {string}\n   */\n  function sanitizeWord (token, word, rules) {\n    // Empty string or doesn't need fixing.\n    if (!token.length || uncountables.hasOwnProperty(token)) {\n      return word;\n    }\n\n    var len = rules.length;\n\n    // Iterate over the sanitization rules and use the first one to match.\n    while (len--) {\n      var rule = rules[len];\n\n      if (rule[0].test(word)) return replace(word, rule);\n    }\n\n    return word;\n  }\n\n  /**\n   * Replace a word with the updated word.\n   *\n   * @param  {Object}   replaceMap\n   * @param  {Object}   keepMap\n   * @param  {Array}    rules\n   * @return {Function}\n   */\n  function replaceWord (replaceMap, keepMap, rules) {\n    return function (word) {\n      // Get the correct token and case restoration functions.\n      var token = word.toLowerCase();\n\n      // Check against the keep object map.\n      if (keepMap.hasOwnProperty(token)) {\n        return restoreCase(word, token);\n      }\n\n      // Check against the replacement map for a direct word replacement.\n      if (replaceMap.hasOwnProperty(token)) {\n        return restoreCase(word, replaceMap[token]);\n      }\n\n      // Run all the rules against the word.\n      return sanitizeWord(token, word, rules);\n    };\n  }\n\n  /**\n   * Check if a word is part of the map.\n   */\n  function checkWord (replaceMap, keepMap, rules, bool) {\n    return function (word) {\n      var token = word.toLowerCase();\n\n      if (keepMap.hasOwnProperty(token)) return true;\n      if (replaceMap.hasOwnProperty(token)) return false;\n\n      return sanitizeWord(token, token, rules) === token;\n    };\n  }\n\n  /**\n   * Pluralize or singularize a word based on the passed in count.\n   *\n   * @param  {string}  word\n   * @param  {number}  count\n   * @param  {boolean} inclusive\n   * @return {string}\n   */\n  function pluralize (word, count, inclusive) {\n    var pluralized = count === 1\n      ? pluralize.singular(word) : pluralize.plural(word);\n\n    return (inclusive ? count + ' ' : '') + pluralized;\n  }\n\n  /**\n   * Pluralize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.plural = replaceWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Check if a word is plural.\n   *\n   * @type {Function}\n   */\n  pluralize.isPlural = checkWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Singularize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.singular = replaceWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Check if a word is singular.\n   *\n   * @type {Function}\n   */\n  pluralize.isSingular = checkWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Add a pluralization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addPluralRule = function (rule, replacement) {\n    pluralRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add a singularization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addSingularRule = function (rule, replacement) {\n    singularRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add an uncountable word rule.\n   *\n   * @param {(string|RegExp)} word\n   */\n  pluralize.addUncountableRule = function (word) {\n    if (typeof word === 'string') {\n      uncountables[word.toLowerCase()] = true;\n      return;\n    }\n\n    // Set singular and plural references for the word.\n    pluralize.addPluralRule(word, '$0');\n    pluralize.addSingularRule(word, '$0');\n  };\n\n  /**\n   * Add an irregular word definition.\n   *\n   * @param {string} single\n   * @param {string} plural\n   */\n  pluralize.addIrregularRule = function (single, plural) {\n    plural = plural.toLowerCase();\n    single = single.toLowerCase();\n\n    irregularSingles[single] = plural;\n    irregularPlurals[plural] = single;\n  };\n\n  /**\n   * Irregular rules.\n   */\n  [\n    // Pronouns.\n    ['I', 'we'],\n    ['me', 'us'],\n    ['he', 'they'],\n    ['she', 'they'],\n    ['them', 'them'],\n    ['myself', 'ourselves'],\n    ['yourself', 'yourselves'],\n    ['itself', 'themselves'],\n    ['herself', 'themselves'],\n    ['himself', 'themselves'],\n    ['themself', 'themselves'],\n    ['is', 'are'],\n    ['was', 'were'],\n    ['has', 'have'],\n    ['this', 'these'],\n    ['that', 'those'],\n    // Words ending in with a consonant and `o`.\n    ['echo', 'echoes'],\n    ['dingo', 'dingoes'],\n    ['volcano', 'volcanoes'],\n    ['tornado', 'tornadoes'],\n    ['torpedo', 'torpedoes'],\n    // Ends with `us`.\n    ['genus', 'genera'],\n    ['viscus', 'viscera'],\n    // Ends with `ma`.\n    ['stigma', 'stigmata'],\n    ['stoma', 'stomata'],\n    ['dogma', 'dogmata'],\n    ['lemma', 'lemmata'],\n    ['schema', 'schemata'],\n    ['anathema', 'anathemata'],\n    // Other irregular rules.\n    ['ox', 'oxen'],\n    ['axe', 'axes'],\n    ['die', 'dice'],\n    ['yes', 'yeses'],\n    ['foot', 'feet'],\n    ['eave', 'eaves'],\n    ['goose', 'geese'],\n    ['tooth', 'teeth'],\n    ['quiz', 'quizzes'],\n    ['human', 'humans'],\n    ['proof', 'proofs'],\n    ['carve', 'carves'],\n    ['valve', 'valves'],\n    ['looey', 'looies'],\n    ['thief', 'thieves'],\n    ['groove', 'grooves'],\n    ['pickaxe', 'pickaxes'],\n    ['whiskey', 'whiskies']\n  ].forEach(function (rule) {\n    return pluralize.addIrregularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Pluralization rules.\n   */\n  [\n    [/s?$/i, 's'],\n    [/[^\\u0000-\\u007F]$/i, '$0'],\n    [/([^aeiou]ese)$/i, '$1'],\n    [/(ax|test)is$/i, '$1es'],\n    [/(alias|[^aou]us|tlas|gas|ris)$/i, '$1es'],\n    [/(e[mn]u)s?$/i, '$1s'],\n    [/([^l]ias|[aeiou]las|[emjzr]as|[iu]am)$/i, '$1'],\n    [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],\n    [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],\n    [/(seraph|cherub)(?:im)?$/i, '$1im'],\n    [/(her|at|gr)o$/i, '$1oes'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],\n    [/sis$/i, 'ses'],\n    [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],\n    [/([^aeiouy]|qu)y$/i, '$1ies'],\n    [/([^ch][ieo][ln])ey$/i, '$1ies'],\n    [/(x|ch|ss|sh|zz)$/i, '$1es'],\n    [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],\n    [/(m|l)(?:ice|ouse)$/i, '$1ice'],\n    [/(pe)(?:rson|ople)$/i, '$1ople'],\n    [/(child)(?:ren)?$/i, '$1ren'],\n    [/eaux$/i, '$0'],\n    [/m[ae]n$/i, 'men'],\n    ['thou', 'you']\n  ].forEach(function (rule) {\n    return pluralize.addPluralRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Singularization rules.\n   */\n  [\n    [/s$/i, ''],\n    [/(ss)$/i, '$1'],\n    [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\\w]|^)li)ves$/i, '$1fe'],\n    [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],\n    [/ies$/i, 'y'],\n    [/\\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, '$1ie'],\n    [/\\b(mon|smil)ies$/i, '$1ey'],\n    [/(m|l)ice$/i, '$1ouse'],\n    [/(seraph|cherub)im$/i, '$1'],\n    [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|tlas|gas|(?:her|at|gr)o|ris)(?:es)?$/i, '$1'],\n    [/(analy|ba|diagno|parenthe|progno|synop|the|empha|cri)(?:sis|ses)$/i, '$1sis'],\n    [/(movie|twelve|abuse|e[mn]u)s$/i, '$1'],\n    [/(test)(?:is|es)$/i, '$1is'],\n    [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],\n    [/(alumn|alg|vertebr)ae$/i, '$1a'],\n    [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],\n    [/(matr|append)ices$/i, '$1ix'],\n    [/(pe)(rson|ople)$/i, '$1rson'],\n    [/(child)ren$/i, '$1'],\n    [/(eau)x?$/i, '$1'],\n    [/men$/i, 'man']\n  ].forEach(function (rule) {\n    return pluralize.addSingularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Uncountable rules.\n   */\n  [\n    // Singular words with no plurals.\n    'adulthood',\n    'advice',\n    'agenda',\n    'aid',\n    'alcohol',\n    'ammo',\n    'anime',\n    'athletics',\n    'audio',\n    'bison',\n    'blood',\n    'bream',\n    'buffalo',\n    'butter',\n    'carp',\n    'cash',\n    'chassis',\n    'chess',\n    'clothing',\n    'cod',\n    'commerce',\n    'cooperation',\n    'corps',\n    'debris',\n    'diabetes',\n    'digestion',\n    'elk',\n    'energy',\n    'equipment',\n    'excretion',\n    'expertise',\n    'flounder',\n    'fun',\n    'gallows',\n    'garbage',\n    'graffiti',\n    'headquarters',\n    'health',\n    'herpes',\n    'highjinks',\n    'homework',\n    'housework',\n    'information',\n    'jeans',\n    'justice',\n    'kudos',\n    'labour',\n    'literature',\n    'machinery',\n    'mackerel',\n    'mail',\n    'media',\n    'mews',\n    'moose',\n    'music',\n    'manga',\n    'news',\n    'pike',\n    'plankton',\n    'pliers',\n    'pollution',\n    'premises',\n    'rain',\n    'research',\n    'rice',\n    'salmon',\n    'scissors',\n    'series',\n    'sewage',\n    'shambles',\n    'shrimp',\n    'species',\n    'staff',\n    'swine',\n    'tennis',\n    'traffic',\n    'transporation',\n    'trout',\n    'tuna',\n    'wealth',\n    'welfare',\n    'whiting',\n    'wildebeest',\n    'wildlife',\n    'you',\n    // Regexes.\n    /[^aeiou]ese$/i, // \"chinese\", \"japanese\"\n    /deer$/i, // \"deer\", \"reindeer\"\n    /fish$/i, // \"fish\", \"blowfish\", \"angelfish\"\n    /measles$/i,\n    /o[iu]s$/i, // \"carnivorous\"\n    /pox$/i, // \"chickpox\", \"smallpox\"\n    /sheep$/i\n  ].forEach(pluralize.addUncountableRule);\n\n  return pluralize;\n});\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","'use strict';\n\nvar unherit = require('unherit');\nvar English = require('parse-english');\n\nmodule.exports = parse;\nparse.Parser = English;\n\nfunction parse() {\n  this.Parser = unherit(English);\n}\n","'use strict';\n\nvar toString = require('nlcst-to-string');\n\nmodule.exports = stringify;\n\nfunction stringify() {\n  this.Compiler = compiler;\n}\n\nfunction compiler(tree) {\n  return toString(tree);\n}\n","'use strict';\n\nmodule.exports = smog;\n\nvar SENTENCE_SIZE = 30;\nvar WEIGHT = 1.0430;\nvar BASE = 3.1291;\n\n/* Get the grade level of a given value according to the\n * SMOG formula.  More information is available at\n * WikiPedia: See http://en.wikipedia.org/wiki/SMOG. */\nfunction smog(counts) {\n  if (!counts || !counts.sentence) {\n    return NaN;\n  }\n\n  return BASE +\n    (\n      WEIGHT *\n      Math.sqrt(\n        (counts.polysillabicWord || 0) *\n        (SENTENCE_SIZE / counts.sentence)\n      )\n    );\n}\n","'use strict';\n\nmodule.exports = spache;\n\nvar SENTENCE_WEIGHT = 0.121;\nvar WORD_WEIGHT = 0.082;\nvar PERCENTAGE = 100;\nvar BASE = 0.659;\n\n/* Get the grade level of a given value according to\n * the Spache Readability Formula. More information\n * is available at WikiPedia:\n * See: http://en.wikipedia.org/wiki/Spache_Readability_Formula. */\nfunction spache(counts) {\n  if (!counts || !counts.sentence || !counts.word) {\n    return NaN;\n  }\n\n  return BASE +\n    (SENTENCE_WEIGHT * counts.word / counts.sentence) +\n    (WORD_WEIGHT * (counts.unfamiliarWord || 0) / counts.word * PERCENTAGE);\n}\n","module.exports=[\n  \"a\",\n  \"able\",\n  \"about\",\n  \"above\",\n  \"across\",\n  \"act\",\n  \"add\",\n  \"afraid\",\n  \"after\",\n  \"afternoon\",\n  \"again\",\n  \"against\",\n  \"ago\",\n  \"air\",\n  \"airplane\",\n  \"alarm\",\n  \"all\",\n  \"almost\",\n  \"alone\",\n  \"along\",\n  \"already\",\n  \"also\",\n  \"always\",\n  \"am\",\n  \"among\",\n  \"an\",\n  \"and\",\n  \"angry\",\n  \"animal\",\n  \"another\",\n  \"answer\",\n  \"any\",\n  \"anyone\",\n  \"appear\",\n  \"apple\",\n  \"are\",\n  \"arm\",\n  \"around\",\n  \"arrow\",\n  \"as\",\n  \"ask\",\n  \"asleep\",\n  \"at\",\n  \"ate\",\n  \"attention\",\n  \"aunt\",\n  \"awake\",\n  \"away\",\n  \"b\",\n  \"baby\",\n  \"back\",\n  \"bad\",\n  \"bag\",\n  \"ball\",\n  \"balloon\",\n  \"bang\",\n  \"bank\",\n  \"bark\",\n  \"barn\",\n  \"basket\",\n  \"be\",\n  \"bean\",\n  \"bear\",\n  \"beat\",\n  \"beautiful\",\n  \"became\",\n  \"because\",\n  \"become\",\n  \"bed\",\n  \"bee\",\n  \"been\",\n  \"before\",\n  \"began\",\n  \"begin\",\n  \"behind\",\n  \"believe\",\n  \"bell\",\n  \"belong\",\n  \"bend\",\n  \"bent\",\n  \"beside\",\n  \"best\",\n  \"better\",\n  \"between\",\n  \"big\",\n  \"bird\",\n  \"birthday\",\n  \"bit\",\n  \"bite\",\n  \"black\",\n  \"blanket\",\n  \"blew\",\n  \"block\",\n  \"blow\",\n  \"blue\",\n  \"board\",\n  \"boat\",\n  \"book\",\n  \"boot\",\n  \"born\",\n  \"borrow\",\n  \"both\",\n  \"bother\",\n  \"bottle\",\n  \"bottom\",\n  \"bought\",\n  \"bow\",\n  \"box\",\n  \"boy\",\n  \"branch\",\n  \"brave\",\n  \"bread\",\n  \"break\",\n  \"breakfast\",\n  \"breath\",\n  \"brick\",\n  \"bridge\",\n  \"bright\",\n  \"bring\",\n  \"broke\",\n  \"broken\",\n  \"brother\",\n  \"brought\",\n  \"brown\",\n  \"brush\",\n  \"build\",\n  \"bump\",\n  \"burn\",\n  \"bus\",\n  \"busy\",\n  \"but\",\n  \"butter\",\n  \"button\",\n  \"buy\",\n  \"by\",\n  \"c\",\n  \"cabin\",\n  \"cage\",\n  \"cake\",\n  \"call\",\n  \"came\",\n  \"camp\",\n  \"can\",\n  \"can\\\\'t\",\n  \"candle\",\n  \"candy\",\n  \"cap\",\n  \"captain\",\n  \"car\",\n  \"card\",\n  \"care\",\n  \"careful\",\n  \"carrot\",\n  \"carry\",\n  \"case\",\n  \"castle\",\n  \"cat\",\n  \"catch\",\n  \"cattle\",\n  \"caught\",\n  \"cause\",\n  \"cent\",\n  \"certain\",\n  \"chair\",\n  \"chance\",\n  \"change\",\n  \"chase\",\n  \"chicken\",\n  \"chief\",\n  \"child\",\n  \"children\",\n  \"church\",\n  \"circle\",\n  \"circus\",\n  \"city\",\n  \"clap\",\n  \"clean\",\n  \"clever\",\n  \"cliff\",\n  \"climb\",\n  \"clock\",\n  \"close\",\n  \"cloth\",\n  \"clothes\",\n  \"clown\",\n  \"coat\",\n  \"cold\",\n  \"color\",\n  \"come\",\n  \"comfortable\",\n  \"company\",\n  \"contest\",\n  \"continue\",\n  \"cook\",\n  \"cool\",\n  \"corner\",\n  \"could\",\n  \"count\",\n  \"country\",\n  \"course\",\n  \"cover\",\n  \"cow\",\n  \"crawl\",\n  \"cream\",\n  \"cry\",\n  \"cup\",\n  \"curtain\",\n  \"cut\",\n  \"d\",\n  \"dad\",\n  \"dance\",\n  \"danger\",\n  \"dangerous\",\n  \"dark\",\n  \"dash\",\n  \"daughter\",\n  \"day\",\n  \"dear\",\n  \"decide\",\n  \"deep\",\n  \"desk\",\n  \"did\",\n  \"didn\\\\'t\",\n  \"die\",\n  \"different\",\n  \"dig\",\n  \"dinner\",\n  \"direction\",\n  \"disappear\",\n  \"disappoint\",\n  \"discover\",\n  \"distance\",\n  \"do\",\n  \"doctor\",\n  \"does\",\n  \"dog\",\n  \"dollar\",\n  \"don\\\\'t\",\n  \"done\",\n  \"door\",\n  \"down\",\n  \"dragon\",\n  \"dream\",\n  \"dress\",\n  \"drink\",\n  \"drive\",\n  \"drop\",\n  \"drove\",\n  \"dry\",\n  \"duck\",\n  \"during\",\n  \"dust\",\n  \"e\",\n  \"each\",\n  \"eager\",\n  \"ear\",\n  \"early\",\n  \"earn\",\n  \"earth\",\n  \"easy\",\n  \"eat\",\n  \"edge\",\n  \"egg\",\n  \"eight\",\n  \"eighteen\",\n  \"either\",\n  \"elephant\",\n  \"else\",\n  \"empty\",\n  \"end\",\n  \"enemy\",\n  \"enough\",\n  \"enter\",\n  \"even\",\n  \"ever\",\n  \"every\",\n  \"everything\",\n  \"exact\",\n  \"except\",\n  \"excite\",\n  \"exclaim\",\n  \"explain\",\n  \"eye\",\n  \"face\",\n  \"fact\",\n  \"fair\",\n  \"fall\",\n  \"family\",\n  \"far\",\n  \"farm\",\n  \"farmer\",\n  \"farther\",\n  \"fast\",\n  \"fat\",\n  \"father\",\n  \"feather\",\n  \"feed\",\n  \"feel\",\n  \"feet\",\n  \"fell\",\n  \"fellow\",\n  \"felt\",\n  \"fence\",\n  \"few\",\n  \"field\",\n  \"fierce\",\n  \"fight\",\n  \"figure\",\n  \"fill\",\n  \"final\",\n  \"find\",\n  \"fine\",\n  \"finger\",\n  \"finish\",\n  \"fire\",\n  \"first\",\n  \"fish\",\n  \"five\",\n  \"flag\",\n  \"flash\",\n  \"flat\",\n  \"flew\",\n  \"floor\",\n  \"flower\",\n  \"fly\",\n  \"follow\",\n  \"food\",\n  \"for\",\n  \"forest\",\n  \"forget\",\n  \"forth\",\n  \"found\",\n  \"four\",\n  \"fourth\",\n  \"fox\",\n  \"fresh\",\n  \"friend\",\n  \"frighten\",\n  \"frog\",\n  \"from\",\n  \"front\",\n  \"fruit\",\n  \"full\",\n  \"fun\",\n  \"funny\",\n  \"fur\",\n  \"g\",\n  \"game\",\n  \"garden\",\n  \"gasp\",\n  \"gate\",\n  \"gave\",\n  \"get\",\n  \"giant\",\n  \"gift\",\n  \"girl\",\n  \"give\",\n  \"glad\",\n  \"glass\",\n  \"go\",\n  \"goat\",\n  \"gone\",\n  \"good\",\n  \"got\",\n  \"grandfather\",\n  \"grandmother\",\n  \"grass\",\n  \"gray\",\n  \"great\",\n  \"green\",\n  \"grew\",\n  \"grin\",\n  \"ground\",\n  \"group\",\n  \"grow\",\n  \"growl\",\n  \"guess\",\n  \"gun\",\n  \"h\",\n  \"had\",\n  \"hair\",\n  \"half\",\n  \"hall\",\n  \"hand\",\n  \"handle\",\n  \"hang\",\n  \"happen\",\n  \"happiness\",\n  \"happy\",\n  \"hard\",\n  \"harm\",\n  \"has\",\n  \"hat\",\n  \"hate\",\n  \"have\",\n  \"he\",\n  \"he\\\\'s\",\n  \"head\",\n  \"hear\",\n  \"heard\",\n  \"heavy\",\n  \"held\",\n  \"hello\",\n  \"help\",\n  \"hen\",\n  \"her\",\n  \"here\",\n  \"herself\",\n  \"hid\",\n  \"hide\",\n  \"high\",\n  \"hill\",\n  \"him\",\n  \"himself\",\n  \"his\",\n  \"hit\",\n  \"hold\",\n  \"hole\",\n  \"holiday\",\n  \"home\",\n  \"honey\",\n  \"hop\",\n  \"horn\",\n  \"horse\",\n  \"hot\",\n  \"hour\",\n  \"house\",\n  \"how\",\n  \"howl\",\n  \"hum\",\n  \"hundred\",\n  \"hung\",\n  \"hungry\",\n  \"hunt\",\n  \"hurry\",\n  \"hurt\",\n  \"husband\",\n  \"i\",\n  \"i\\\\'ll\",\n  \"i\\\\'m\",\n  \"ice\",\n  \"idea\",\n  \"if\",\n  \"imagine\",\n  \"important\",\n  \"in\",\n  \"inch\",\n  \"indeed\",\n  \"inside\",\n  \"instead\",\n  \"into\",\n  \"invite\",\n  \"is\",\n  \"it\",\n  \"it\\\\'s\",\n  \"its\",\n  \"j\",\n  \"jacket\",\n  \"jar\",\n  \"jet\",\n  \"job\",\n  \"join\",\n  \"joke\",\n  \"joy\",\n  \"jump\",\n  \"just\",\n  \"k\",\n  \"keep\",\n  \"kept\",\n  \"key\",\n  \"kick\",\n  \"kill\",\n  \"kind\",\n  \"king\",\n  \"kitchen\",\n  \"kitten\",\n  \"knee\",\n  \"knew\",\n  \"knock\",\n  \"know\",\n  \"l\",\n  \"ladder\",\n  \"lady\",\n  \"laid\",\n  \"lake\",\n  \"land\",\n  \"large\",\n  \"last\",\n  \"late\",\n  \"laugh\",\n  \"lay\",\n  \"lazy\",\n  \"lead\",\n  \"leap\",\n  \"learn\",\n  \"least\",\n  \"leave\",\n  \"left\",\n  \"leg\",\n  \"less\",\n  \"let\",\n  \"let\\\\'s\",\n  \"letter\",\n  \"lick\",\n  \"lift\",\n  \"light\",\n  \"like\",\n  \"line\",\n  \"lion\",\n  \"list\",\n  \"listen\",\n  \"little\",\n  \"live\",\n  \"load\",\n  \"long\",\n  \"look\",\n  \"lost\",\n  \"lot\",\n  \"loud\",\n  \"love\",\n  \"low\",\n  \"luck\",\n  \"lump\",\n  \"lunch\",\n  \"m\",\n  \"machine\",\n  \"made\",\n  \"magic\",\n  \"mail\",\n  \"make\",\n  \"man\",\n  \"many\",\n  \"march\",\n  \"mark\",\n  \"market\",\n  \"master\",\n  \"matter\",\n  \"may\",\n  \"maybe\",\n  \"me\",\n  \"mean\",\n  \"meant\",\n  \"meat\",\n  \"meet\",\n  \"melt\",\n  \"men\",\n  \"merry\",\n  \"met\",\n  \"middle\",\n  \"might\",\n  \"mile\",\n  \"milk\",\n  \"milkman\",\n  \"mind\",\n  \"mine\",\n  \"minute\",\n  \"miss\",\n  \"mistake\",\n  \"moment\",\n  \"money\",\n  \"monkey\",\n  \"month\",\n  \"more\",\n  \"morning\",\n  \"most\",\n  \"mother\",\n  \"mountain\",\n  \"mouse\",\n  \"mouth\",\n  \"move\",\n  \"much\",\n  \"mud\",\n  \"music\",\n  \"must\",\n  \"my\",\n  \"n\",\n  \"name\",\n  \"near\",\n  \"neck\",\n  \"need\",\n  \"needle\",\n  \"neighbor\",\n  \"neighborhood\",\n  \"nest\",\n  \"never\",\n  \"new\",\n  \"next\",\n  \"nibble\",\n  \"nice\",\n  \"night\",\n  \"nine\",\n  \"no\",\n  \"nod\",\n  \"noise\",\n  \"none\",\n  \"north\",\n  \"nose\",\n  \"not\",\n  \"note\",\n  \"nothing\",\n  \"notice\",\n  \"now\",\n  \"number\",\n  \"o\",\n  \"ocean\",\n  \"of\",\n  \"off\",\n  \"offer\",\n  \"often\",\n  \"oh\",\n  \"old\",\n  \"on\",\n  \"once\",\n  \"one\",\n  \"only\",\n  \"open\",\n  \"or\",\n  \"orange\",\n  \"order\",\n  \"other\",\n  \"our\",\n  \"out\",\n  \"outside\",\n  \"over\",\n  \"owl\",\n  \"own\",\n  \"p\",\n  \"pack\",\n  \"paid\",\n  \"pail\",\n  \"paint\",\n  \"pair\",\n  \"palace\",\n  \"pan\",\n  \"paper\",\n  \"parade\",\n  \"parent\",\n  \"park\",\n  \"part\",\n  \"party\",\n  \"pass\",\n  \"past\",\n  \"pasture\",\n  \"path\",\n  \"paw\",\n  \"pay\",\n  \"peanut\",\n  \"peek\",\n  \"pen\",\n  \"penny\",\n  \"people\",\n  \"perfect\",\n  \"perhaps\",\n  \"person\",\n  \"pet\",\n  \"pick\",\n  \"picket\",\n  \"picnic\",\n  \"picture\",\n  \"pie\",\n  \"piece\",\n  \"pig\",\n  \"pile\",\n  \"pin\",\n  \"place\",\n  \"plan\",\n  \"plant\",\n  \"play\",\n  \"pleasant\",\n  \"please\",\n  \"plenty\",\n  \"plow\",\n  \"point\",\n  \"poke\",\n  \"pole\",\n  \"policeman\",\n  \"pond\",\n  \"poor\",\n  \"pop\",\n  \"postman\",\n  \"pot\",\n  \"potato\",\n  \"pound\",\n  \"pour\",\n  \"practice\",\n  \"prepare\",\n  \"present\",\n  \"pretend\",\n  \"pretty\",\n  \"princess\",\n  \"prize\",\n  \"probably\",\n  \"problem\",\n  \"promise\",\n  \"protect\",\n  \"proud\",\n  \"puff\",\n  \"pull\",\n  \"puppy\",\n  \"push\",\n  \"put\",\n  \"q\",\n  \"queen\",\n  \"queer\",\n  \"quick\",\n  \"quiet\",\n  \"quite\",\n  \"r\",\n  \"rabbit\",\n  \"raccoon\",\n  \"race\",\n  \"radio\",\n  \"rag\",\n  \"rain\",\n  \"raise\",\n  \"ran\",\n  \"ranch\",\n  \"rang\",\n  \"reach\",\n  \"read\",\n  \"ready\",\n  \"real\",\n  \"red\",\n  \"refuse\",\n  \"remember\",\n  \"reply\",\n  \"rest\",\n  \"return\",\n  \"reward\",\n  \"rich\",\n  \"ride\",\n  \"right\",\n  \"ring\",\n  \"river\",\n  \"road\",\n  \"roar\",\n  \"rock\",\n  \"rode\",\n  \"roll\",\n  \"roof\",\n  \"room\",\n  \"rope\",\n  \"round\",\n  \"row\",\n  \"rub\",\n  \"rule\",\n  \"run\",\n  \"rush\",\n  \"s\",\n  \"sad\",\n  \"safe\",\n  \"said\",\n  \"sail\",\n  \"sale\",\n  \"salt\",\n  \"same\",\n  \"sand\",\n  \"sang\",\n  \"sat\",\n  \"save\",\n  \"saw\",\n  \"say\",\n  \"scare\",\n  \"school\",\n  \"scold\",\n  \"scratch\",\n  \"scream\",\n  \"sea\",\n  \"seat\",\n  \"second\",\n  \"secret\",\n  \"see\",\n  \"seed\",\n  \"seem\",\n  \"seen\",\n  \"sell\",\n  \"send\",\n  \"sent\",\n  \"seven\",\n  \"several\",\n  \"sew\",\n  \"shadow\",\n  \"shake\",\n  \"shall\",\n  \"shape\",\n  \"she\",\n  \"sheep\",\n  \"shell\",\n  \"shine\",\n  \"ship\",\n  \"shoe\",\n  \"shone\",\n  \"shook\",\n  \"shoot\",\n  \"shop\",\n  \"shore\",\n  \"short\",\n  \"shot\",\n  \"should\",\n  \"show\",\n  \"sick\",\n  \"side\",\n  \"sight\",\n  \"sign\",\n  \"signal\",\n  \"silent\",\n  \"silly\",\n  \"silver\",\n  \"since\",\n  \"sing\",\n  \"sister\",\n  \"sit\",\n  \"six\",\n  \"size\",\n  \"skip\",\n  \"sky\",\n  \"sled\",\n  \"sleep\",\n  \"slid\",\n  \"slide\",\n  \"slow\",\n  \"small\",\n  \"smart\",\n  \"smell\",\n  \"smile\",\n  \"smoke\",\n  \"snap\",\n  \"sniff\",\n  \"snow\",\n  \"so\",\n  \"soft\",\n  \"sold\",\n  \"some\",\n  \"something\",\n  \"sometimes\",\n  \"son\",\n  \"song\",\n  \"soon\",\n  \"sorry\",\n  \"sound\",\n  \"speak\",\n  \"special\",\n  \"spend\",\n  \"spill\",\n  \"splash\",\n  \"spoke\",\n  \"spot\",\n  \"spread\",\n  \"spring\",\n  \"squirrel\",\n  \"stand\",\n  \"star\",\n  \"start\",\n  \"station\",\n  \"stay\",\n  \"step\",\n  \"stick\",\n  \"still\",\n  \"stone\",\n  \"stood\",\n  \"stop\",\n  \"store\",\n  \"story\",\n  \"straight\",\n  \"strange\",\n  \"street\",\n  \"stretch\",\n  \"strike\",\n  \"strong\",\n  \"such\",\n  \"sudden\",\n  \"sugar\",\n  \"suit\",\n  \"summer\",\n  \"sun\",\n  \"supper\",\n  \"suppose\",\n  \"sure\",\n  \"surprise\",\n  \"swallow\",\n  \"sweet\",\n  \"swim\",\n  \"swing\",\n  \"t\",\n  \"table\",\n  \"tail\",\n  \"take\",\n  \"talk\",\n  \"tall\",\n  \"tap\",\n  \"taste\",\n  \"teach\",\n  \"teacher\",\n  \"team\",\n  \"tear\",\n  \"teeth\",\n  \"telephone\",\n  \"tell\",\n  \"ten\",\n  \"tent\",\n  \"than\",\n  \"thank\",\n  \"that\",\n  \"that\\\\'s\",\n  \"the\",\n  \"their\",\n  \"them\",\n  \"then\",\n  \"there\",\n  \"these\",\n  \"they\",\n  \"thick\",\n  \"thin\",\n  \"thing\",\n  \"think\",\n  \"third\",\n  \"this\",\n  \"those\",\n  \"though\",\n  \"thought\",\n  \"three\",\n  \"threw\",\n  \"through\",\n  \"throw\",\n  \"tie\",\n  \"tiger\",\n  \"tight\",\n  \"time\",\n  \"tiny\",\n  \"tip\",\n  \"tire\",\n  \"to\",\n  \"today\",\n  \"toe\",\n  \"together\",\n  \"told\",\n  \"tomorrow\",\n  \"too\",\n  \"took\",\n  \"tooth\",\n  \"top\",\n  \"touch\",\n  \"toward\",\n  \"tower\",\n  \"town\",\n  \"toy\",\n  \"track\",\n  \"traffic\",\n  \"train\",\n  \"trap\",\n  \"tree\",\n  \"trick\",\n  \"trip\",\n  \"trot\",\n  \"truck\",\n  \"true\",\n  \"trunk\",\n  \"try\",\n  \"turkey\",\n  \"turn\",\n  \"turtle\",\n  \"twelve\",\n  \"twin\",\n  \"two\",\n  \"u\",\n  \"ugly\",\n  \"uncle\",\n  \"under\",\n  \"unhappy\",\n  \"until\",\n  \"up\",\n  \"upon\",\n  \"upstairs\",\n  \"us\",\n  \"use\",\n  \"usual\",\n  \"v\",\n  \"valley\",\n  \"vegetable\",\n  \"very\",\n  \"village\",\n  \"visit\",\n  \"voice\",\n  \"w\",\n  \"wag\",\n  \"wagon\",\n  \"wait\",\n  \"wake\",\n  \"walk\",\n  \"want\",\n  \"war\",\n  \"warm\",\n  \"was\",\n  \"wash\",\n  \"waste\",\n  \"watch\",\n  \"water\",\n  \"wave\",\n  \"way\",\n  \"we\",\n  \"wear\",\n  \"weather\",\n  \"week\",\n  \"well\",\n  \"went\",\n  \"were\",\n  \"wet\",\n  \"what\",\n  \"wheel\",\n  \"when\",\n  \"where\",\n  \"which\",\n  \"while\",\n  \"whisper\",\n  \"whistle\",\n  \"white\",\n  \"who\",\n  \"whole\",\n  \"whose\",\n  \"why\",\n  \"wide\",\n  \"wife\",\n  \"will\",\n  \"win\",\n  \"wind\",\n  \"window\",\n  \"wing\",\n  \"wink\",\n  \"winter\",\n  \"wire\",\n  \"wise\",\n  \"wish\",\n  \"with\",\n  \"without\",\n  \"woke\",\n  \"wolf\",\n  \"woman\",\n  \"women\",\n  \"won\\\\'t\",\n  \"wonder\",\n  \"wood\",\n  \"word\",\n  \"wore\",\n  \"work\",\n  \"world\",\n  \"worm\",\n  \"worry\",\n  \"worth\",\n  \"would\",\n  \"wrong\",\n  \"x\",\n  \"y\",\n  \"yard\",\n  \"year\",\n  \"yell\",\n  \"yellow\",\n  \"yes\",\n  \"yet\",\n  \"you\",\n  \"young\",\n  \"your\",\n  \"z\",\n  \"zoo\"\n]\n","'use strict';\n\nvar pluralize = require('pluralize');\nvar normalize = require('normalize-strings');\nvar problematic = require('./problematic.json');\n\nmodule.exports = syllables;\n\nvar own = {}.hasOwnProperty;\n\n/* Two expressions of occurrences which normally would\n * be counted as two syllables, but should be counted\n * as one. */\nvar EXPRESSION_MONOSYLLABIC_ONE = new RegExp(\n  'cia(l|$)|' +\n  'tia|' +\n  'cius|' +\n  'cious|' +\n  '[^aeiou]giu|' +\n  '[aeiouy][^aeiouy]ion|' +\n  'iou|' +\n  'sia$|' +\n  'eous$|' +\n  '[oa]gue$|' +\n  '.[^aeiuoycgltdb]{2,}ed$|' +\n  '.ely$|' +\n  '^jua|' +\n  'uai|' +\n  'eau|' +\n  '^busi$|' +\n  '(' +\n    '[aeiouy]' +\n    '(' +\n      'b|' +\n      'c|' +\n      'ch|' +\n      'dg|' +\n      'f|' +\n      'g|' +\n      'gh|' +\n      'gn|' +\n      'k|' +\n      'l|' +\n      'lch|' +\n      'll|' +\n      'lv|' +\n      'm|' +\n      'mm|' +\n      'n|' +\n      'nc|' +\n      'ng|' +\n      'nch|' +\n      'nn|' +\n      'p|' +\n      'r|' +\n      'rc|' +\n      'rn|' +\n      'rs|' +\n      'rv|' +\n      's|' +\n      'sc|' +\n      'sk|' +\n      'sl|' +\n      'squ|' +\n      'ss|' +\n      'th|' +\n      'v|' +\n      'y|' +\n      'z' +\n    ')' +\n    'ed$' +\n  ')|' +\n  '(' +\n    '[aeiouy]' +\n    '(' +\n      'b|' +\n      'ch|' +\n      'd|' +\n      'f|' +\n      'gh|' +\n      'gn|' +\n      'k|' +\n      'l|' +\n      'lch|' +\n      'll|' +\n      'lv|' +\n      'm|' +\n      'mm|' +\n      'n|' +\n      'nch|' +\n      'nn|' +\n      'p|' +\n      'r|' +\n      'rn|' +\n      'rs|' +\n      'rv|' +\n      's|' +\n      'sc|' +\n      'sk|' +\n      'sl|' +\n      'squ|' +\n      'ss|' +\n      'st|' +\n      't|' +\n      'th|' +\n      'v|' +\n      'y' +\n    ')' +\n    'es$' +\n  ')',\n  'g'\n);\n\nvar EXPRESSION_MONOSYLLABIC_TWO = new RegExp(\n  '[aeiouy]' +\n  '(' +\n    'b|' +\n    'c|' +\n    'ch|' +\n    'd|' +\n    'dg|' +\n    'f|' +\n    'g|' +\n    'gh|' +\n    'gn|' +\n    'k|' +\n    'l|' +\n    'll|' +\n    'lv|' +\n    'm|' +\n    'mm|' +\n    'n|' +\n    'nc|' +\n    'ng|' +\n    'nn|' +\n    'p|' +\n    'r|' +\n    'rc|' +\n    'rn|' +\n    'rs|' +\n    'rv|' +\n    's|' +\n    'sc|' +\n    'sk|' +\n    'sl|' +\n    'squ|' +\n    'ss|' +\n    'st|' +\n    't|' +\n    'th|' +\n    'v|' +\n    'y|' +\n    'z' +\n  ')' +\n  'e$',\n  'g'\n);\n\n/* Four expression of occurrences which normally would be\n * counted as one syllable, but should be counted as two. */\nvar EXPRESSION_DOUBLE_SYLLABIC_ONE = new RegExp(\n  '(' +\n    '(' +\n      '[^aeiouy]' +\n    ')\\\\2l|' +\n    '[^aeiouy]ie' +\n    '(' +\n      'r|' +\n      'st|' +\n      't' +\n    ')|' +\n    '[aeiouym]bl|' +\n    'eo|' +\n    'ism|' +\n    'asm|' +\n    'thm|' +\n    'dnt|' +\n    'uity|' +\n    'dea|' +\n    'gean|' +\n    'oa|' +\n    'ua|' +\n    'eings?|' +\n    '[aeiouy]sh?e[rsd]' +\n  ')$',\n  'g'\n);\n\nvar EXPRESSION_DOUBLE_SYLLABIC_TWO = new RegExp(\n  '[^gq]ua[^auieo]|' +\n  '[aeiou]{3}|' +\n  '^(' +\n    'ia|' +\n    'mc|' +\n    'coa[dglx].' +\n  ')',\n  'g'\n);\n\nvar EXPRESSION_DOUBLE_SYLLABIC_THREE = new RegExp(\n  '[^aeiou]y[ae]|' +\n  '[^l]lien|' +\n  'riet|' +\n  'dien|' +\n  'iu|' +\n  'io|' +\n  'ii|' +\n  'uen|' +\n  'real|' +\n  'iell|' +\n  'eo[^aeiou]|' +\n  '[aeiou]y[aeiou]',\n  'g'\n);\n\nvar EXPRESSION_DOUBLE_SYLLABIC_FOUR = /[^s]ia/;\n\n/* Expression to match single syllable pre- and suffixes. */\nvar EXPRESSION_SINGLE = new RegExp(\n  '^' +\n  '(' +\n    'un|' +\n    'fore|' +\n    'ware|' +\n    'none?|' +\n    'out|' +\n    'post|' +\n    'sub|' +\n    'pre|' +\n    'pro|' +\n    'dis|' +\n    'side' +\n  ')' +\n  '|' +\n  '(' +\n    'ly|' +\n    'less|' +\n    'some|' +\n    'ful|' +\n    'ers?|' +\n    'ness|' +\n    'cians?|' +\n    'ments?|' +\n    'ettes?|' +\n    'villes?|' +\n    'ships?|' +\n    'sides?|' +\n    'ports?|' +\n    'shires?|' +\n    'tion(ed)?' +\n  ')' +\n  '$',\n  'g'\n);\n\n/* Expression to match double syllable pre- and suffixes. */\nvar EXPRESSION_DOUBLE = new RegExp(\n  '^' +\n  '(' +\n    'above|' +\n    'anti|' +\n    'ante|' +\n    'counter|' +\n    'hyper|' +\n    'afore|' +\n    'agri|' +\n    'infra|' +\n    'intra|' +\n    'inter|' +\n    'over|' +\n    'semi|' +\n    'ultra|' +\n    'under|' +\n    'extra|' +\n    'dia|' +\n    'micro|' +\n    'mega|' +\n    'kilo|' +\n    'pico|' +\n    'nano|' +\n    'macro' +\n  ')' +\n  '|' +\n  '(' +\n    'fully|' +\n    'berry|' +\n    'woman|' +\n    'women' +\n  ')' +\n  '$',\n  'g'\n);\n\n/* Expression to match triple syllable suffixes. */\nvar EXPRESSION_TRIPLE = /(ology|ologist|onomy|onomist)$/g;\n\n/* Expression to split on word boundaries. */\nvar SPLIT = /\\b/g;\n\n/* Expression to remove non-alphabetic characters from\n * a given value. */\nvar EXPRESSION_NONALPHABETIC = /[^a-z]/g;\n\n/* Wrapper to support multiple word-parts (GH-11). */\nfunction syllables(value) {\n  var values = normalize(String(value)).toLowerCase().split(SPLIT);\n  var length = values.length;\n  var index = -1;\n  var total = 0;\n\n  while (++index < length) {\n    total += syllable(values[index].replace(EXPRESSION_NONALPHABETIC, ''));\n  }\n\n  return total;\n}\n\n/* Get syllables in a given value. */\nfunction syllable(value) {\n  var count = 0;\n  var index;\n  var length;\n  var singular;\n  var parts;\n  var addOne;\n  var subtractOne;\n\n  if (value.length === 0) {\n    return count;\n  }\n\n  /* Return early when possible. */\n  if (value.length < 3) {\n    return 1;\n  }\n\n  /* If `value` is a hard to count, it might be\n   * in `problematic`. */\n  if (own.call(problematic, value)) {\n    return problematic[value];\n  }\n\n  /* Additionally, the singular word might be\n   * in `problematic`. */\n  singular = pluralize(value, 1);\n\n  if (own.call(problematic, singular)) {\n    return problematic[singular];\n  }\n\n  addOne = returnFactory(1);\n  subtractOne = returnFactory(-1);\n\n  /* Count some prefixes and suffixes, and remove\n   * their matched ranges. */\n  value = value\n    .replace(EXPRESSION_TRIPLE, countFactory(3))\n    .replace(EXPRESSION_DOUBLE, countFactory(2))\n    .replace(EXPRESSION_SINGLE, countFactory(1));\n\n  /* Count multiple consonants. */\n  parts = value.split(/[^aeiouy]+/);\n  index = -1;\n  length = parts.length;\n\n  while (++index < length) {\n    if (parts[index] !== '') {\n      count++;\n    }\n  }\n\n  /* Subtract one for occurrences which should be\n   * counted as one (but are counted as two). */\n  value\n    .replace(EXPRESSION_MONOSYLLABIC_ONE, subtractOne)\n    .replace(EXPRESSION_MONOSYLLABIC_TWO, subtractOne);\n\n  /* Add one for occurrences which should be counted\n   * as two (but are counted as one). */\n  value\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_ONE, addOne)\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_TWO, addOne)\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_THREE, addOne)\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_FOUR, addOne);\n\n  /* Make sure at least on is returned. */\n  return count || 1;\n\n /* Define scoped counters, to be used\n  * in `String#replace()` calls.\n  * The scoped counter removes the matched value\n  * from the input. */\n  function countFactory(addition) {\n    return counter;\n    function counter() {\n      count += addition;\n      return '';\n    }\n  }\n\n /* Define scoped counters, to be used\n  * in `String#replace()` calls.\n  * The scoped counter does not remove the matched\n  * value from the input. */\n  function returnFactory(addition) {\n    return returner;\n    function returner($0) {\n      count += addition;\n      return $0;\n    }\n  }\n}\n","module.exports={\n  \"abalone\": 4,\n  \"abare\": 3,\n  \"abed\": 2,\n  \"abruzzese\": 4,\n  \"abbruzzese\": 4,\n  \"aborigine\": 5,\n  \"acreage\": 3,\n  \"adame\": 3,\n  \"adieu\": 2,\n  \"adobe\": 3,\n  \"anemone\": 4,\n  \"apache\": 3,\n  \"aphrodite\": 4,\n  \"apostrophe\": 4,\n  \"ariadne\": 4,\n  \"cafe\": 2,\n  \"calliope\": 4,\n  \"catastrophe\": 4,\n  \"chile\": 2,\n  \"chloe\": 2,\n  \"circe\": 2,\n  \"coyote\": 3,\n  \"epitome\": 4,\n  \"forever\": 3,\n  \"gethsemane\": 4,\n  \"guacamole\": 4,\n  \"hyperbole\": 4,\n  \"jesse\": 2,\n  \"jukebox\": 2,\n  \"karate\": 3,\n  \"machete\": 3,\n  \"maybe\": 2,\n  \"people\": 2,\n  \"recipe\": 3,\n  \"sesame\": 3,\n  \"shoreline\": 2,\n  \"simile\": 3,\n  \"syncope\": 3,\n  \"tamale\": 3,\n  \"yosemite\": 4,\n  \"daphne\": 2,\n  \"eurydice\": 4,\n  \"euterpe\": 3,\n  \"hermione\": 4,\n  \"penelope\": 4,\n  \"persephone\": 4,\n  \"phoebe\": 2,\n  \"zoe\": 2\n}\n","'use strict';\n\nvar buffer = require('is-buffer');\nvar vfile = require('vfile');\n\nmodule.exports = toVFile;\n\n/* Create a virtual file from a description.\n * If `options` is a string or a buffer, it’s used as the\n * path.  In all other cases, the options are passed through\n * to `vfile()`. */\nfunction toVFile(options) {\n  if (typeof options === 'string' || buffer(options)) {\n    options = {path: String(options)};\n  }\n\n  return vfile(options);\n}\n","'use strict';\n\n/* Expose. */\nmodule.exports = trough;\n\n/* Methods. */\nvar slice = [].slice;\n\n/* Create new middleware. */\nfunction trough() {\n  var fns = [];\n  var middleware = {};\n\n  middleware.run = run;\n  middleware.use = use;\n\n  return middleware;\n\n  /* Run `fns`.  Last argument must be\n   * a completion handler. */\n  function run() {\n    var index = -1;\n    var input = slice.call(arguments, 0, -1);\n    var done = arguments[arguments.length - 1];\n\n    if (typeof done !== 'function') {\n      throw new Error('Expected function as last argument, not ' + done);\n    }\n\n    next.apply(null, [null].concat(input));\n\n    /* Run the next `fn`, if any. */\n    function next(err) {\n      var fn = fns[++index];\n      var params = slice.call(arguments, 0);\n      var values = params.slice(1);\n      var length = input.length;\n      var pos = -1;\n\n      if (err) {\n        done(err);\n        return;\n      }\n\n      /* Copy non-nully input into values. */\n      while (++pos < length) {\n        if (values[pos] === null || values[pos] === undefined) {\n          values[pos] = input[pos];\n        }\n      }\n\n      input = values;\n\n      /* Next or done. */\n      if (fn) {\n        wrap(fn, next).apply(null, input);\n      } else {\n        done.apply(null, [null].concat(input));\n      }\n    }\n  }\n\n  /* Add `fn` to the list. */\n  function use(fn) {\n    if (typeof fn !== 'function') {\n      throw new Error('Expected `fn` to be a function, not ' + fn);\n    }\n\n    fns.push(fn);\n\n    return middleware;\n  }\n}\n\n/* Wrap `fn`.  Can be sync or async; return a promise,\n * receive a completion handler, return new values and\n * errors. */\nfunction wrap(fn, next) {\n  var invoked;\n\n  return wrapped;\n\n  function wrapped() {\n    var params = slice.call(arguments, 0);\n    var callback = fn.length > params.length;\n    var result;\n\n    if (callback) {\n      params.push(done);\n    }\n\n    try {\n      result = fn.apply(null, params);\n    } catch (err) {\n      /* Well, this is quite the pickle.  `fn` received\n       * a callback and invoked it (thus continuing the\n       * pipeline), but later also threw an error.\n       * We’re not about to restart the pipeline again,\n       * so the only thing left to do is to throw the\n       * thing instea. */\n      if (callback && invoked) {\n        throw err;\n      }\n\n      return done(err);\n    }\n\n    if (!callback) {\n      if (result && typeof result.then === 'function') {\n        result.then(then, done);\n      } else if (result instanceof Error) {\n        done(result);\n      } else {\n        then(result);\n      }\n    }\n  }\n\n  /* Invoke `next`, only once. */\n  function done() {\n    if (!invoked) {\n      invoked = true;\n\n      next.apply(null, arguments);\n    }\n  }\n\n  /* Invoke `done` with one value.\n   * Tracks if an error is passed, too. */\n  function then(value) {\n    done(null, value);\n  }\n}\n","/**\n * @author Titus Wormer\n * @copyright 2015 Titus Wormer\n * @license MIT\n * @module unherit\n * @fileoverview Create a custom constructor which can be modified\n *   without affecting the original class.\n */\n\n'use strict';\n\n/* Dependencies. */\nvar xtend = require('xtend');\nvar inherits = require('inherits');\n\n/* Expose. */\nmodule.exports = unherit;\n\n/**\n * Create a custom constructor which can be modified\n * without affecting the original class.\n *\n * @param {Function} Super - Super-class.\n * @return {Function} - Constructor acting like `Super`,\n *   which can be modified without affecting the original\n *   class.\n */\nfunction unherit(Super) {\n  var result;\n  var key;\n  var value;\n\n  inherits(Of, Super);\n  inherits(From, Of);\n\n  /* Clone values. */\n  result = Of.prototype;\n\n  for (key in result) {\n    value = result[key];\n\n    if (value && typeof value === 'object') {\n      result[key] = 'concat' in value ? value.concat() : xtend(value);\n    }\n  }\n\n  return Of;\n\n  /**\n   * Constructor accepting a single argument,\n   * which itself is an `arguments` object.\n   */\n  function From(parameters) {\n    return Super.apply(this, parameters);\n  }\n\n  /**\n   * Constructor accepting variadic arguments.\n   */\n  function Of() {\n    if (!(this instanceof Of)) {\n      return new From(arguments);\n    }\n\n    return Super.apply(this, arguments);\n  }\n}\n","'use strict';\n\n/* Dependencies. */\nvar extend = require('extend');\nvar bail = require('bail');\nvar vfile = require('vfile');\nvar trough = require('trough');\nvar string = require('x-is-string');\nvar func = require('x-is-function');\nvar plain = require('is-plain-obj');\n\n/* Expose a frozen processor. */\nmodule.exports = unified().freeze();\n\nvar slice = [].slice;\nvar own = {}.hasOwnProperty;\n\n/* Process pipeline. */\nvar pipeline = trough().use(pipelineParse).use(pipelineRun).use(pipelineStringify);\n\nfunction pipelineParse(p, ctx) {\n  ctx.tree = p.parse(ctx.file);\n}\n\nfunction pipelineRun(p, ctx, next) {\n  p.run(ctx.tree, ctx.file, done);\n\n  function done(err, tree, file) {\n    if (err) {\n      next(err);\n    } else {\n      ctx.tree = tree;\n      ctx.file = file;\n      next();\n    }\n  }\n}\n\nfunction pipelineStringify(p, ctx) {\n  ctx.file.contents = p.stringify(ctx.tree, ctx.file);\n}\n\n/* Function to create the first processor. */\nfunction unified() {\n  var attachers = [];\n  var transformers = trough();\n  var namespace = {};\n  var frozen = false;\n  var freezeIndex = -1;\n\n  /* Data management. */\n  processor.data = data;\n\n  /* Lock. */\n  processor.freeze = freeze;\n\n  /* Plug-ins. */\n  processor.attachers = attachers;\n  processor.use = use;\n\n  /* API. */\n  processor.parse = parse;\n  processor.stringify = stringify;\n  processor.run = run;\n  processor.runSync = runSync;\n  processor.process = process;\n  processor.processSync = processSync;\n\n  /* Expose. */\n  return processor;\n\n  /* Create a new processor based on the processor\n   * in the current scope. */\n  function processor() {\n    var destination = unified();\n    var length = attachers.length;\n    var index = -1;\n\n    while (++index < length) {\n      destination.use.apply(null, attachers[index]);\n    }\n\n    destination.data(extend(true, {}, namespace));\n\n    return destination;\n  }\n\n  /* Freeze: used to signal a processor that has finished\n   * configuration.\n   *\n   * For example, take unified itself.  It’s frozen.\n   * Plug-ins should not be added to it.  Rather, it should\n   * be extended, by invoking it, before modifying it.\n   *\n   * In essence, always invoke this when exporting a\n   * processor. */\n  function freeze() {\n    var values;\n    var plugin;\n    var options;\n    var transformer;\n\n    if (frozen) {\n      return processor;\n    }\n\n    while (++freezeIndex < attachers.length) {\n      values = attachers[freezeIndex];\n      plugin = values[0];\n      options = values[1];\n      transformer = null;\n\n      if (options === false) {\n        continue;\n      }\n\n      if (options === true) {\n        values[1] = undefined;\n      }\n\n      transformer = plugin.apply(processor, values.slice(1));\n\n      if (func(transformer)) {\n        transformers.use(transformer);\n      }\n    }\n\n    frozen = true;\n    freezeIndex = Infinity;\n\n    return processor;\n  }\n\n  /* Data management.\n   * Getter / setter for processor-specific informtion. */\n  function data(key, value) {\n    if (string(key)) {\n      /* Set `key`. */\n      if (arguments.length === 2) {\n        assertUnfrozen('data', frozen);\n\n        namespace[key] = value;\n\n        return processor;\n      }\n\n      /* Get `key`. */\n      return (own.call(namespace, key) && namespace[key]) || null;\n    }\n\n    /* Set space. */\n    if (key) {\n      assertUnfrozen('data', frozen);\n      namespace = key;\n      return processor;\n    }\n\n    /* Get space. */\n    return namespace;\n  }\n\n  /* Plug-in management.\n   *\n   * Pass it:\n   * *   an attacher and options,\n   * *   a preset,\n   * *   a list of presets, attachers, and arguments (list\n   *     of attachers and options). */\n  function use(value) {\n    var settings;\n\n    assertUnfrozen('use', frozen);\n\n    if (value === null || value === undefined) {\n      /* Empty */\n    } else if (func(value)) {\n      addPlugin.apply(null, arguments);\n    } else if (typeof value === 'object') {\n      if ('length' in value) {\n        addList(value);\n      } else {\n        addPreset(value);\n      }\n    } else {\n      throw new Error('Expected usable value, not `' + value + '`');\n    }\n\n    if (settings) {\n      namespace.settings = extend(namespace.settings || {}, settings);\n    }\n\n    return processor;\n\n    function addPreset(result) {\n      addList(result.plugins);\n\n      if (result.settings) {\n        settings = extend(settings || {}, result.settings);\n      }\n    }\n\n    function add(value) {\n      if (func(value)) {\n        addPlugin(value);\n      } else if (typeof value === 'object') {\n        if ('length' in value) {\n          addPlugin.apply(null, value);\n        } else {\n          addPreset(value);\n        }\n      } else {\n        throw new Error('Expected usable value, not `' + value + '`');\n      }\n    }\n\n    function addList(plugins) {\n      var length;\n      var index;\n\n      if (plugins === null || plugins === undefined) {\n        /* Empty */\n      } else if (typeof plugins === 'object' && 'length' in plugins) {\n        length = plugins.length;\n        index = -1;\n\n        while (++index < length) {\n          add(plugins[index]);\n        }\n      } else {\n        throw new Error('Expected a list of plugins, not `' + plugins + '`');\n      }\n    }\n\n    function addPlugin(plugin, value) {\n      var entry = find(plugin);\n\n      if (entry) {\n        if (plain(entry[1]) && plain(value)) {\n          value = extend(entry[1], value);\n        }\n\n        entry[1] = value;\n      } else {\n        attachers.push(slice.call(arguments));\n      }\n    }\n  }\n\n  function find(plugin) {\n    var length = attachers.length;\n    var index = -1;\n    var entry;\n\n    while (++index < length) {\n      entry = attachers[index];\n\n      if (entry[0] === plugin) {\n        return entry;\n      }\n    }\n  }\n\n  /* Parse a file (in string or VFile representation)\n   * into a Unist node using the `Parser` on the\n   * processor. */\n  function parse(doc) {\n    var file = vfile(doc);\n    var Parser;\n\n    freeze();\n    Parser = processor.Parser;\n    assertParser('parse', Parser);\n\n    if (newable(Parser)) {\n      return new Parser(String(file), file).parse();\n    }\n\n    return Parser(String(file), file); // eslint-disable-line new-cap\n  }\n\n  /* Run transforms on a Unist node representation of a file\n   * (in string or VFile representation), async. */\n  function run(node, file, cb) {\n    assertNode(node);\n    freeze();\n\n    if (!cb && func(file)) {\n      cb = file;\n      file = null;\n    }\n\n    if (!cb) {\n      return new Promise(executor);\n    }\n\n    executor(null, cb);\n\n    function executor(resolve, reject) {\n      transformers.run(node, vfile(file), done);\n\n      function done(err, tree, file) {\n        tree = tree || node;\n        if (err) {\n          reject(err);\n        } else if (resolve) {\n          resolve(tree);\n        } else {\n          cb(null, tree, file);\n        }\n      }\n    }\n  }\n\n  /* Run transforms on a Unist node representation of a file\n   * (in string or VFile representation), sync. */\n  function runSync(node, file) {\n    var complete = false;\n    var result;\n\n    run(node, file, done);\n\n    assertDone('runSync', 'run', complete);\n\n    return result;\n\n    function done(err, tree) {\n      complete = true;\n      bail(err);\n      result = tree;\n    }\n  }\n\n  /* Stringify a Unist node representation of a file\n   * (in string or VFile representation) into a string\n   * using the `Compiler` on the processor. */\n  function stringify(node, doc) {\n    var file = vfile(doc);\n    var Compiler;\n\n    freeze();\n    Compiler = processor.Compiler;\n    assertCompiler('stringify', Compiler);\n    assertNode(node);\n\n    if (newable(Compiler)) {\n      return new Compiler(node, file).compile();\n    }\n\n    return Compiler(node, file); // eslint-disable-line new-cap\n  }\n\n  /* Parse a file (in string or VFile representation)\n   * into a Unist node using the `Parser` on the processor,\n   * then run transforms on that node, and compile the\n   * resulting node using the `Compiler` on the processor,\n   * and store that result on the VFile. */\n  function process(doc, cb) {\n    freeze();\n    assertParser('process', processor.Parser);\n    assertCompiler('process', processor.Compiler);\n\n    if (!cb) {\n      return new Promise(executor);\n    }\n\n    executor(null, cb);\n\n    function executor(resolve, reject) {\n      var file = vfile(doc);\n\n      pipeline.run(processor, {file: file}, done);\n\n      function done(err) {\n        if (err) {\n          reject(err);\n        } else if (resolve) {\n          resolve(file);\n        } else {\n          cb(null, file);\n        }\n      }\n    }\n  }\n\n  /* Process the given document (in string or VFile\n   * representation), sync. */\n  function processSync(doc) {\n    var complete = false;\n    var file;\n\n    freeze();\n    assertParser('processSync', processor.Parser);\n    assertCompiler('processSync', processor.Compiler);\n    file = vfile(doc);\n\n    process(file, done);\n\n    assertDone('processSync', 'process', complete);\n\n    return file;\n\n    function done(err) {\n      complete = true;\n      bail(err);\n    }\n  }\n}\n\n/* Check if `func` is a constructor. */\nfunction newable(value) {\n  return func(value) && keys(value.prototype);\n}\n\n/* Check if `value` is an object with keys. */\nfunction keys(value) {\n  var key;\n  for (key in value) {\n    return true;\n  }\n  return false;\n}\n\n/* Assert a parser is available. */\nfunction assertParser(name, Parser) {\n  if (!func(Parser)) {\n    throw new Error('Cannot `' + name + '` without `Parser`');\n  }\n}\n\n/* Assert a compiler is available. */\nfunction assertCompiler(name, Compiler) {\n  if (!func(Compiler)) {\n    throw new Error('Cannot `' + name + '` without `Compiler`');\n  }\n}\n\n/* Assert the processor is not frozen. */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot invoke `' + name + '` on a frozen processor.\\n' +\n      'Create a new processor first, by invoking it: ' +\n      'use `processor()` instead of `processor`.'\n    );\n  }\n}\n\n/* Assert `node` is a Unist node. */\nfunction assertNode(node) {\n  if (!node || !string(node.type)) {\n    throw new Error('Expected node, got `' + node + '`');\n  }\n}\n\n/* Assert that `complete` is `true`. */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error('`' + name + '` finished async. Use `' + asyncName + '` instead');\n  }\n}\n","'use strict';\n\n/* eslint-disable max-params */\n\n/* Expose. */\nmodule.exports = is;\n\n/* Assert if `test` passes for `node`.\n * When a `parent` node is known the `index` of node */\nfunction is(test, node, index, parent, context) {\n  var hasParent = parent !== null && parent !== undefined;\n  var hasIndex = index !== null && index !== undefined;\n  var check = convert(test);\n\n  if (\n    hasIndex &&\n    (typeof index !== 'number' || index < 0 || index === Infinity)\n  ) {\n    throw new Error('Expected positive finite index or child node');\n  }\n\n  if (hasParent && (!is(null, parent) || !parent.children)) {\n    throw new Error('Expected parent node');\n  }\n\n  if (!node || !node.type || typeof node.type !== 'string') {\n    return false;\n  }\n\n  if (hasParent !== hasIndex) {\n    throw new Error('Expected both parent and index');\n  }\n\n  return Boolean(check.call(context, node, index, parent));\n}\n\nfunction convert(test) {\n  if (typeof test === 'string') {\n    return typeFactory(test);\n  }\n\n  if (test === null || test === undefined) {\n    return ok;\n  }\n\n  if (typeof test === 'object') {\n    return ('length' in test ? anyFactory : matchesFactory)(test);\n  }\n\n  if (typeof test === 'function') {\n    return test;\n  }\n\n  throw new Error('Expected function, string, or object as test');\n}\n\nfunction convertAll(tests) {\n  var results = [];\n  var length = tests.length;\n  var index = -1;\n\n  while (++index < length) {\n    results[index] = convert(tests[index]);\n  }\n\n  return results;\n}\n\n/* Utility assert each property in `test` is represented\n * in `node`, and each values are strictly equal. */\nfunction matchesFactory(test) {\n  return matches;\n\n  function matches(node) {\n    var key;\n\n    for (key in test) {\n      if (node[key] !== test[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nfunction anyFactory(tests) {\n  var checks = convertAll(tests);\n  var length = checks.length;\n\n  return matches;\n\n  function matches() {\n    var index = -1;\n\n    while (++index < length) {\n      if (checks[index].apply(this, arguments)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n\n/* Utility to convert a string into a function which checks\n * a given node’s type for said string. */\nfunction typeFactory(test) {\n  return type;\n\n  function type(node) {\n    return Boolean(node && node.type === test);\n  }\n}\n\n/* Utility to return true. */\nfunction ok() {\n  return true;\n}\n","'use strict';\n\nvar iterate = require('array-iterate');\n\nmodule.exports = modifierFactory;\n\n/* Turn `callback` into a child-modifier accepting a parent.\n * See `array-iterate` for more info. */\nfunction modifierFactory(callback) {\n  return iteratorFactory(wrapperFactory(callback));\n}\n\n/* Turn `callback` into a `iterator' accepting a parent. */\nfunction iteratorFactory(callback) {\n  return iterator;\n\n  function iterator(parent) {\n    var children = parent && parent.children;\n\n    if (!children) {\n      throw new Error('Missing children in `parent` for `modifier`');\n    }\n\n    return iterate(children, callback, parent);\n  }\n}\n\n/* Pass the context as the third argument to `callback`. */\nfunction wrapperFactory(callback) {\n  return wrapper;\n\n  function wrapper(value, index) {\n    return callback(value, index, this);\n  }\n}\n","'use strict';\n\nvar own = {}.hasOwnProperty;\n\nmodule.exports = stringify;\n\nfunction stringify(value) {\n  /* Nothing. */\n  if (!value || typeof value !== 'object') {\n    return null;\n  }\n\n  /* Node. */\n  if (own.call(value, 'position') || own.call(value, 'type')) {\n    return location(value.position);\n  }\n\n  /* Location. */\n  if (own.call(value, 'start') || own.call(value, 'end')) {\n    return location(value);\n  }\n\n  /* Position. */\n  if (own.call(value, 'line') || own.call(value, 'column')) {\n    return position(value);\n  }\n\n  /* ? */\n  return null;\n}\n\nfunction position(pos) {\n  if (!pos || typeof pos !== 'object') {\n    pos = {};\n  }\n\n  return index(pos.line) + ':' + index(pos.column);\n}\n\nfunction location(loc) {\n  if (!loc || typeof loc !== 'object') {\n    loc = {};\n  }\n\n  return position(loc.start) + '-' + position(loc.end);\n}\n\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1;\n}\n","'use strict';\n\n/* Expose. */\nmodule.exports = visitorFactory;\n\n/* Turns `callback` into a child-visitor accepting a parent. */\nfunction visitorFactory(callback) {\n  return visitor;\n\n  /* Visit `parent`, invoking `callback` for each child. */\n  function visitor(parent) {\n    var index = -1;\n    var children = parent && parent.children;\n\n    if (!children) {\n      throw new Error('Missing children in `parent` for `visitor`');\n    }\n\n    while (++index in children) {\n      callback(children[index], index, parent);\n    }\n  }\n}\n","'use strict';\n\n/* Expose. */\nmodule.exports = visit;\n\nvar is = require('unist-util-is');\n\n/* Visit. */\nfunction visit(tree, test, visitor, reverse) {\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor;\n    visitor = test;\n    test = null;\n  }\n\n  one(tree);\n\n  /* Visit a single node. */\n  function one(node, index, parent) {\n    var result;\n\n    index = index || (parent ? 0 : null);\n\n    if (!test || node.type === test || is(test, node, index, parent || null)) {\n      result = visitor(node, index, parent || null);\n    }\n\n    if (node.children && result !== false) {\n      return all(node.children, node);\n    }\n\n    return result;\n  }\n\n  /* Visit children in `parent`. */\n  function all(children, parent) {\n    var step = reverse ? -1 : 1;\n    var max = children.length;\n    var min = -1;\n    var index = (reverse ? max : min) + step;\n    var child;\n\n    while (index > min && index < max) {\n      child = children[index];\n\n      if (child && one(child, index, parent) === false) {\n        return false;\n      }\n\n      index += step;\n    }\n\n    return true;\n  }\n}\n","'use strict';\n\nvar stringify = require('unist-util-stringify-position');\n\nmodule.exports = VMessage;\n\n/* Inherit from `Error#`. */\nfunction VMessagePrototype() {}\nVMessagePrototype.prototype = Error.prototype;\nVMessage.prototype = new VMessagePrototype();\n\n/* Message properties. */\nvar proto = VMessage.prototype;\n\nproto.file = '';\nproto.name = '';\nproto.reason = '';\nproto.message = '';\nproto.stack = '';\nproto.fatal = null;\nproto.column = null;\nproto.line = null;\n\n/* Construct a new VMessage.\n *\n * Note: We cannot invoke `Error` on the created context,\n * as that adds readonly `line` and `column` attributes on\n * Safari 9, thus throwing and failing the data. */\nfunction VMessage(reason, position, origin) {\n  var parts;\n  var range;\n  var location;\n\n  if (typeof position === 'string') {\n    origin = position;\n    position = null;\n  }\n\n  parts = parseOrigin(origin);\n  range = stringify(position) || '1:1';\n\n  location = {\n    start: {line: null, column: null},\n    end: {line: null, column: null}\n  };\n\n  /* Node. */\n  if (position && position.position) {\n    position = position.position;\n  }\n\n  if (position) {\n    /* Position. */\n    if (position.start) {\n      location = position;\n      position = position.start;\n    } else {\n      /* Point. */\n      location.start = position;\n    }\n  }\n\n  if (reason.stack) {\n    this.stack = reason.stack;\n    reason = reason.message;\n  }\n\n  this.message = reason;\n  this.name = range;\n  this.reason = reason;\n  this.line = position ? position.line : null;\n  this.column = position ? position.column : null;\n  this.location = location;\n  this.source = parts[0];\n  this.ruleId = parts[1];\n}\n\nfunction parseOrigin(origin) {\n  var result = [null, null];\n  var index;\n\n  if (typeof origin === 'string') {\n    index = origin.indexOf(':');\n\n    if (index === -1) {\n      result[1] = origin;\n    } else {\n      result[0] = origin.slice(0, index);\n      result[1] = origin.slice(index + 1);\n    }\n  }\n\n  return result;\n}\n","'use strict';\n\nvar path = require('path');\nvar replace = require('replace-ext');\nvar buffer = require('is-buffer');\n\nmodule.exports = VFile;\n\nvar own = {}.hasOwnProperty;\nvar proto = VFile.prototype;\n\nproto.toString = toString;\n\n/* Order of setting (least specific to most), we need this because\n * otherwise `{stem: 'a', path: '~/b.js'}` would throw, as a path\n * is needed before a stem can be set. */\nvar order = [\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n];\n\n/* Construct a new file. */\nfunction VFile(options) {\n  var prop;\n  var index;\n  var length;\n\n  if (!options) {\n    options = {};\n  } else if (typeof options === 'string' || buffer(options)) {\n    options = {contents: options};\n  } else if ('message' in options && 'messages' in options) {\n    return options;\n  }\n\n  if (!(this instanceof VFile)) {\n    return new VFile(options);\n  }\n\n  this.data = {};\n  this.messages = [];\n  this.history = [];\n  this.cwd = process.cwd();\n\n  /* Set path related properties in the correct order. */\n  index = -1;\n  length = order.length;\n\n  while (++index < length) {\n    prop = order[index];\n\n    if (own.call(options, prop)) {\n      this[prop] = options[prop];\n    }\n  }\n\n  /* Set non-path related properties. */\n  for (prop in options) {\n    if (order.indexOf(prop) === -1) {\n      this[prop] = options[prop];\n    }\n  }\n}\n\n/* Access full path (`~/index.min.js`). */\nObject.defineProperty(proto, 'path', {\n  get: function () {\n    return this.history[this.history.length - 1];\n  },\n  set: function (path) {\n    assertNonEmpty(path, 'path');\n\n    if (path !== this.path) {\n      this.history.push(path);\n    }\n  }\n});\n\n/* Access parent path (`~`). */\nObject.defineProperty(proto, 'dirname', {\n  get: function () {\n    return typeof this.path === 'string' ? path.dirname(this.path) : undefined;\n  },\n  set: function (dirname) {\n    assertPath(this.path, 'dirname');\n    this.path = path.join(dirname || '', this.basename);\n  }\n});\n\n/* Access basename (`index.min.js`). */\nObject.defineProperty(proto, 'basename', {\n  get: function () {\n    return typeof this.path === 'string' ? path.basename(this.path) : undefined;\n  },\n  set: function (basename) {\n    assertNonEmpty(basename, 'basename');\n    assertPart(basename, 'basename');\n    this.path = path.join(this.dirname || '', basename);\n  }\n});\n\n/* Access extname (`.js`). */\nObject.defineProperty(proto, 'extname', {\n  get: function () {\n    return typeof this.path === 'string' ? path.extname(this.path) : undefined;\n  },\n  set: function (extname) {\n    var ext = extname || '';\n\n    assertPart(ext, 'extname');\n    assertPath(this.path, 'extname');\n\n    if (ext) {\n      if (ext.charAt(0) !== '.') {\n        throw new Error('`extname` must start with `.`');\n      }\n\n      if (ext.indexOf('.', 1) !== -1) {\n        throw new Error('`extname` cannot contain multiple dots');\n      }\n    }\n\n    this.path = replace(this.path, ext);\n  }\n});\n\n/* Access stem (`index.min`). */\nObject.defineProperty(proto, 'stem', {\n  get: function () {\n    return typeof this.path === 'string' ? path.basename(this.path, this.extname) : undefined;\n  },\n  set: function (stem) {\n    assertNonEmpty(stem, 'stem');\n    assertPart(stem, 'stem');\n    this.path = path.join(this.dirname || '', stem + (this.extname || ''));\n  }\n});\n\n/* Get the value of the file. */\nfunction toString(encoding) {\n  var value = this.contents || '';\n  return buffer(value) ? value.toString(encoding) : String(value);\n}\n\n/* Assert that `part` is not a path (i.e., does\n * not contain `path.sep`). */\nfunction assertPart(part, name) {\n  if (part.indexOf(path.sep) !== -1) {\n    throw new Error('`' + name + '` cannot be a path: did not expect `' + path.sep + '`');\n  }\n}\n\n/* Assert that `part` is not empty. */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty');\n  }\n}\n\n/* Assert `path` exists. */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too');\n  }\n}\n","'use strict';\n\nvar VMessage = require('vfile-message');\nvar VFile = require('./core.js');\n\nmodule.exports = VFile;\n\nvar proto = VFile.prototype;\n\nproto.message = message;\nproto.info = info;\nproto.fail = fail;\n\n/* Slight backwards compatibility.  Remove in the future. */\nproto.warn = message;\n\n/* Create a message with `reason` at `position`.\n * When an error is passed in as `reason`, copies the stack. */\nfunction message(reason, position, origin) {\n  var filePath = this.path;\n  var message = new VMessage(reason, position, origin);\n\n  if (filePath) {\n    message.name = filePath + ':' + message.name;\n    message.file = filePath;\n  }\n\n  message.fatal = false;\n\n  this.messages.push(message);\n\n  return message;\n}\n\n/* Fail. Creates a vmessage, associates it with the file,\n * and throws it. */\nfunction fail() {\n  var message = this.message.apply(this, arguments);\n\n  message.fatal = true;\n\n  throw message;\n}\n\n/* Info. Creates a vmessage, associates it with the file,\n * and marks the fatality as null. */\nfunction info() {\n  var message = this.message.apply(this, arguments);\n\n  message.fatal = null;\n\n  return message;\n}\n","'use strict';\n\nvar path = require('path');\n\nfunction replaceExt(npath, ext) {\n  if (typeof npath !== 'string') {\n    return npath;\n  }\n\n  if (npath.length === 0) {\n    return npath;\n  }\n\n  var nFileName = path.basename(npath, path.extname(npath)) + ext;\n  return path.join(path.dirname(npath), nFileName);\n}\n\nmodule.exports = replaceExt;\n","module.exports = function isFunction (fn) {\n  return Object.prototype.toString.call(fn) === '[object Function]'\n}\n","var toString = Object.prototype.toString\n\nmodule.exports = isString\n\nfunction isString(obj) {\n    return toString.call(obj) === \"[object String]\"\n}\n","module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n","const vfile = require('to-vfile');\nconst unified = require('unified');\nconst english = require('retext-english');\nconst stringify = require('retext-stringify');\n\nconst readability = require('./retext-readability-index.js');\n\nself.onmessage = function(e) {\n  var {file, url, text, minWords, unit} = e.data;\n  var opts = {minWords, unit};\n  var job;\n  if (file) job = readFile(file).then(text => analyze({text, opts}));\n  else if (url) job = fetchUrl(url).then(text => analyze({text, opts}));\n  else job = analyze({text, opts});\n\n  job\n    .then(data => self.postMessage(data))\n    .then(() => {\n      self.close();\n    })\n    .catch(error => {\n      console.error(error);\n      self.close();\n    });\n};\n\nfunction readFile(file) {\n  return new Promise((resolve, reject) => {\n    var fs = new FileReader();\n    fs.onload = () => {\n      resolve(fs.result);\n    };\n    fs.onerror = reject;\n    fs.readAsText(file);\n  });\n}\n\nfunction fetchUrl(url) {\n  return new Promise((resolve, reject) => {\n    let httpRequest = new XMLHttpRequest();\n    if (!httpRequest) reject('cannot create XMLHttpRequest object!');\n    httpRequest.onreadystatechange = () => {\n      if (httpRequest.readyState === XMLHttpRequest.DONE) {\n        httpRequest.status === 200\n          ? resolve(httpRequest.responseText)\n          : reject(httpRequest.statusText);\n      }\n    };\n    httpRequest.open('GET', url);\n    httpRequest.send();\n  });\n}\n\nfunction analyze({text, opts}) {\n  return new Promise((resolve, reject) => {\n    let file = vfile({contents: text});\n    unified()\n      .use(english)\n      .use(readability, opts)\n      .use(stringify)\n      .process(file, function(err, file) {\n        if (err) reject(err);\n        else {\n          let result = file.messages.map(d => {\n            return {\n              text: d.actual,\n              location: d.location,\n              readability: d.message,\n              counts: d.counts\n            };\n          });\n          resolve(result);\n        }\n      });\n  });\n}\n","'use strict';\nvar visit = require('unist-util-visit');\nvar toString = require('nlcst-to-string');\nvar syllable = require('syllable');\nvar daleChall = require('dale-chall');\nvar spache = require('spache');\nvar daleChallFormula = require('dale-chall-formula');\nvar ari = require('automated-readability');\nvar colemanLiau = require('coleman-liau');\nvar flesch = require('flesch');\nvar smog = require('smog-formula');\nvar gunningFog = require('gunning-fog');\nvar spacheFormula = require('spache-formula');\n\nvar SOURCE = 'retext-readability';\nvar WORDYNESS_THRESHOLD = 5;\n\nvar own = {}.hasOwnProperty;\nvar floor = Math.floor;\nvar round = Math.round;\nvar ceil = Math.ceil;\nvar sqrt = Math.sqrt;\n\n// TextNode, SentenceNode, ParagraphNode\nfunction readability(options) {\n  var settings = Object.assign(\n    {minWords: WORDYNESS_THRESHOLD, unit: 'RootNode'},\n    options\n  );\n  var minWords = settings.minWords;\n\n  return transformer;\n\n  function transformer(tree, file) {\n    visit(tree, settings.unit, gather);\n\n    function gather(node) {\n      var familiarWords = {};\n      var easyWord = {};\n      var complexPolysillabicWord = 0;\n      var familiarWordCount = 0;\n      var polysillabicWord = 0;\n      var totalSyllables = 0;\n      var easyWordCount = 0;\n      var wordCount = 0;\n      var sentenceCount = 0;\n      var letters = 0;\n      var counts;\n      var caseless;\n\n      visit(node, 'SentenceNode', () => {\n        sentenceCount += 1;\n      });\n      visit(node, 'WordNode', visitor);\n\n      if (wordCount < minWords) {\n        return;\n      }\n\n      counts = {\n        complexPolysillabicWord: complexPolysillabicWord,\n        polysillabicWord: polysillabicWord,\n        unfamiliarWord: wordCount - familiarWordCount,\n        difficultWord: wordCount - easyWordCount,\n        syllable: totalSyllables,\n        sentence: sentenceCount,\n        word: wordCount,\n        character: letters,\n        letter: letters\n      };\n\n      var _fn_ = [\n        d => gradeToAge(daleChallFormula.gradeLevel(d)[1]),\n        gradeToAge,\n        gradeToAge,\n        fleschToAge,\n        smogToAge,\n        gradeToAge,\n        gradeToAge\n      ];\n\n      var scores = [\n        daleChallFormula(counts),\n        ari(counts),\n        colemanLiau(counts),\n        flesch(counts),\n        smog(counts),\n        gunningFog(counts),\n        spacheFormula(counts)\n      ];\n\n      var ages = scores.map((d, i) => _fn_[i](d));\n\n      report(file, node, scores, ages, counts);\n\n      function visitor(node) {\n        var value = toString(node);\n        var syllables = syllable(value);\n        wordCount++;\n        totalSyllables += syllables;\n        letters += value.length;\n        caseless = value.toLowerCase();\n\n        /* Count complex words for gunning-fog based on\n         * whether they have three or more syllables\n         * and whether they aren’t proper nouns.  The\n         * last is checked a little simple, so this\n         * index might be over-eager. */\n        if (syllables >= 3) {\n          polysillabicWord++;\n\n          if (value.charCodeAt(0) === caseless.charCodeAt(0)) {\n            complexPolysillabicWord++;\n          }\n        }\n\n        /* Find unique unfamiliar words for spache. */\n        if (\n          spache.indexOf(caseless) !== -1 &&\n          !own.call(familiarWords, caseless)\n        ) {\n          familiarWords[caseless] = true;\n          familiarWordCount++;\n        }\n\n        /* Find unique difficult words for dale-chall. */\n        if (\n          daleChall.indexOf(caseless) !== -1 &&\n          !own.call(easyWord, caseless)\n        ) {\n          easyWord[caseless] = true;\n          easyWordCount++;\n        }\n      }\n    }\n  }\n}\n\n/* Calculate the typical starting age (on the higher-end) when\n * someone joins `grade` grade, in the US.\n * See https://en.wikipedia.org/wiki/Educational_stage#United_States. */\nfunction gradeToAge(grade) {\n  return round(grade + 5);\n}\n\n/* Calculate the age relating to a Flesch result. */\nfunction fleschToAge(value) {\n  return 20 - floor(value / 10);\n}\n\n/* Calculate the age relating to a SMOG result.\n * See http://www.readabilityformulas.com/smog-readability-formula.php. */\nfunction smogToAge(value) {\n  return ceil(sqrt(value) + 2.5);\n}\n\n/* eslint-disable max-params */\n\n/* Report the `results` if they’re reliably too hard for\n * the `target` age. */\nfunction report(file, node, scores, ages, counts) {\n  var message;\n  var summary = [\n    'daleChall',\n    'ari',\n    'colemanLiau',\n    'flesch',\n    'smog',\n    'gunningFog',\n    'spache'\n  ].map((index, i) => {\n    return {index, age: ages[i], score: scores[i]};\n  });\n\n  message = file.message(summary, node, SOURCE);\n\n  message.source = SOURCE;\n  message.actual = toString(node);\n  message.counts = Object.keys(counts).map((index, i) => {\n    return {index, count: counts[index]};\n  });\n}\n\nmodule.exports = readability;\n"]}